/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.analysis;


import org.overture.codegen.cgast.types.AObjectTypeCG;
import org.overture.codegen.cgast.expressions.ASubtractNumericBinaryExpCG;
import org.overture.codegen.cgast.patterns.ARecordPatternCG;
import org.overture.codegen.cgast.expressions.AIsolationUnaryExpCG;
import org.overture.codegen.cgast.expressions.ANullExpCG;
import org.overture.codegen.cgast.expressions.ARealIsExpCG;
import org.overture.codegen.cgast.STraceCoreDeclCG;
import org.overture.codegen.cgast.types.ACharBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AForAllQuantifierExpCG;
import java.lang.Integer;
import org.overture.codegen.cgast.types.AErrorTypeCG;
import org.overture.codegen.cgast.expressions.ABoolLiteralExpCG;
import org.overture.codegen.cgast.statements.AAssignmentStmCG;
import org.overture.codegen.cgast.statements.ALocalAssignmentStmCG;
import java.lang.Long;
import org.overture.codegen.cgast.types.SBasicTypeCG;
import org.overture.codegen.cgast.patterns.ARealPatternCG;
import org.overture.codegen.cgast.traces.ABracketedExpTraceCoreDeclCG;
import org.overture.codegen.cgast.expressions.AAssignExpExpCG;
import org.overture.codegen.cgast.expressions.AMapOverrideBinaryExpCG;
import org.overture.codegen.cgast.statements.ACasesStmCG;
import org.overture.codegen.cgast.types.AStringTypeCG;
import org.overture.codegen.cgast.statements.AForLoopStmCG;
import org.overture.codegen.cgast.expressions.ADeRefExpCG;
import org.overture.codegen.cgast.expressions.ASetUnionBinaryExpCG;
import org.overture.codegen.cgast.expressions.ALetBeStNoBindingRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.AAndBoolBinaryExpCG;
import org.overture.codegen.cgast.expressions.AIntDivNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ADistIntersectUnaryExpCG;
import org.overture.codegen.cgast.traces.AConcurrentExpTraceCoreDeclCG;
import org.overture.codegen.cgast.statements.ASuperCallStmCG;
import org.overture.codegen.cgast.expressions.AStringLiteralExpCG;
import org.overture.codegen.cgast.expressions.ATypeArgExpCG;
import org.overture.codegen.cgast.expressions.ALessNumericBinaryExpCG;
import org.overture.codegen.cgast.declarations.ATypeDeclCG;
import org.overture.codegen.cgast.types.ARatNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.AAbsUnaryExpCG;
import org.overture.codegen.cgast.expressions.AFieldExpCG;
import org.overture.codegen.cgast.expressions.ARecordModExpCG;
import org.overture.codegen.cgast.types.ARealNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.ATupleIsExpCG;
import org.overture.codegen.cgast.expressions.AInSetBinaryExpCG;
import org.overture.codegen.cgast.SObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AModNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.AIfStmCG;
import org.overture.codegen.cgast.types.ABoolBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.types.ACharBasicTypeCG;
import org.overture.codegen.cgast.expressions.APreDecExpCG;
import org.overture.codegen.cgast.statements.APlainCallStmCG;
import org.overture.codegen.cgast.expressions.AGreaterEqualNumericBinaryExpCG;
import org.overture.codegen.cgast.types.SSeqTypeCG;
import org.overture.codegen.cgast.expressions.ASelfExpCG;
import org.overture.codegen.cgast.expressions.APowerSetUnaryExpCG;
import org.overture.codegen.cgast.expressions.ANotImplementedExpCG;
import org.overture.codegen.cgast.expressions.ADomainResByBinaryExpCG;
import org.overture.codegen.cgast.patterns.ACharPatternCG;
import org.overture.codegen.cgast.types.AInterfaceTypeCG;
import org.overture.codegen.cgast.expressions.SAltExpExpCG;
import org.overture.codegen.cgast.statements.ACallObjectStmCG;
import org.overture.codegen.cgast.statements.AFieldStateDesignatorCG;
import org.overture.codegen.cgast.utils.PExternalType;
import org.overture.codegen.cgast.expressions.APreIncExpCG;
import org.overture.codegen.cgast.expressions.SIsExpCG;
import org.overture.codegen.cgast.SStmCG;
import org.overture.codegen.cgast.expressions.AElemsUnaryExpCG;
import org.overture.codegen.cgast.statements.AForIndexStmCG;
import org.overture.codegen.cgast.expressions.AMapInverseUnaryExpCG;
import org.overture.codegen.cgast.traces.ATraceDeclTermCG;
import org.overture.codegen.cgast.declarations.AMutexSyncDeclCG;
import org.overture.codegen.cgast.expressions.SMapExpCG;
import org.overture.codegen.cgast.traces.AInstanceTraceDeclCG;
import org.overture.codegen.cgast.expressions.AEnumMapExpCG;
import org.overture.codegen.cgast.expressions.APowerNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.AEnumSetExpCG;
import org.overture.codegen.cgast.SLocalParamCG;
import org.overture.codegen.cgast.expressions.SSetExpCG;
import org.overture.codegen.cgast.expressions.ACharIsExpCG;
import org.overture.codegen.cgast.INode;
import org.overture.codegen.cgast.expressions.ACompMapExpCG;
import org.overture.codegen.cgast.expressions.ADistConcatUnaryExpCG;
import org.overture.codegen.cgast.statements.ACallObjectExpStmCG;
import org.overture.codegen.cgast.types.AVoidTypeCG;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import org.overture.codegen.cgast.types.AIntNumericBasicTypeCG;
import org.overture.codegen.cgast.types.ATokenBasicTypeCG;
import org.overture.codegen.cgast.expressions.AOrBoolBinaryExpCG;
import org.overture.codegen.cgast.types.ATemplateTypeCG;
import org.overture.codegen.cgast.declarations.AMethodDeclCG;
import org.overture.codegen.cgast.traces.ALetBeStBindingTraceDeclCG;
import org.overture.codegen.cgast.types.AExternalTypeCG;
import org.overture.codegen.cgast.types.ARealBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.APreCondRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.AExistsQuantifierExpCG;
import org.overture.codegen.cgast.patterns.AStringPatternCG;
import org.overture.codegen.cgast.expressions.ACompSetExpCG;
import org.overture.codegen.cgast.statements.ALetBeStStmCG;
import org.overture.codegen.cgast.statements.AStartlistStmCG;
import org.overture.codegen.cgast.patterns.ANullPatternCG;
import org.overture.codegen.cgast.expressions.ADistMergeUnaryExpCG;
import org.overture.codegen.cgast.types.ATupleTypeCG;
import org.overture.codegen.cgast.expressions.ADistUnionUnaryExpCG;
import org.overture.codegen.cgast.expressions.ATimeExpCG;
import org.overture.codegen.cgast.types.AIntBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AMkBasicExpCG;
import org.overture.codegen.cgast.expressions.AQuoteLiteralExpCG;
import org.overture.codegen.cgast.expressions.AMapletExpCG;
import org.overture.codegen.cgast.utils.AHeaderLetBeStCG;
import org.overture.codegen.cgast.expressions.AExists1QuantifierExpCG;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.declarations.AVarDeclCG;
import org.overture.codegen.cgast.expressions.ADomainResToBinaryExpCG;
import org.overture.codegen.cgast.expressions.ARemNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ANat1IsExpCG;
import org.overture.codegen.cgast.expressions.AAddrNotEqualsBinaryExpCG;
import org.overture.codegen.cgast.expressions.AHistoryExpCG;
import org.overture.codegen.cgast.statements.SAltStmStmCG;
import org.overture.codegen.cgast.SBindCG;
import org.overture.codegen.cgast.statements.AWhileStmCG;
import java.lang.Boolean;
import org.overture.codegen.cgast.statements.AForAllStmCG;
import java.util.LinkedList;
import org.overture.codegen.cgast.expressions.ASetIntersectBinaryExpCG;
import org.overture.codegen.cgast.types.AClassTypeCG;
import org.overture.codegen.cgast.expressions.APlusUnaryExpCG;
import org.overture.codegen.cgast.expressions.AIndicesUnaryExpCG;
import org.overture.codegen.cgast.SLetBeStCG;
import org.overture.codegen.cgast.expressions.ATupleCompatibilityExpCG;
import org.overture.codegen.cgast.expressions.ARangeResToBinaryExpCG;
import org.overture.codegen.cgast.statements.AApplyObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.ASetProperSubsetBinaryExpCG;
import org.overture.codegen.cgast.expressions.ALessEqualNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ANotUnaryExpCG;
import org.overture.codegen.cgast.declarations.APersyncDeclCG;
import org.overture.codegen.cgast.expressions.AReverseUnaryExpCG;
import org.overture.codegen.cgast.name.ATypeNameCG;
import org.overture.codegen.cgast.types.AQuoteTypeCG;
import java.lang.Object;
import org.overture.codegen.cgast.expressions.AMethodInstantiationExpCG;
import org.overture.ast.types.PType;
import org.overture.codegen.cgast.expressions.ACharLiteralExpCG;
import org.overture.codegen.cgast.statements.AStackDeclStmCG;
import org.overture.codegen.cgast.expressions.SRuntimeErrorExpCG;
import org.overture.codegen.cgast.patterns.AQuotePatternCG;
import org.overture.codegen.cgast.types.SBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AMinusUnaryExpCG;
import org.overture.codegen.cgast.expressions.AMapDomainUnaryExpCG;
import org.overture.codegen.cgast.expressions.ARangeResByBinaryExpCG;
import org.overture.codegen.cgast.types.AMethodTypeCG;
import org.overture.codegen.cgast.declarations.AFormalParamLocalParamCG;
import org.overture.codegen.cgast.expressions.SQuantifierExpCG;
import org.overture.codegen.cgast.statements.AIncrementStmCG;
import org.overture.codegen.cgast.expressions.ADivideNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ASeqToStringUnaryExpCG;
import org.overture.codegen.cgast.expressions.APatternMatchRuntimeErrorExpCG;
import org.overture.codegen.cgast.statements.AIdentifierStateDesignatorCG;
import org.overture.codegen.cgast.declarations.ARecordDeclCG;
import org.overture.codegen.cgast.expressions.AAnonymousClassExpCG;
import org.overture.codegen.cgast.patterns.ATuplePatternCG;
import org.overture.codegen.cgast.expressions.ANewExpCG;
import org.overture.codegen.cgast.expressions.ACastUnaryExpCG;
import java.lang.Character;
import org.overture.codegen.cgast.expressions.SUnaryExpCG;
import org.overture.codegen.cgast.expressions.APostIncExpCG;
import org.overture.codegen.cgast.expressions.ANatIsExpCG;
import org.overture.codegen.cgast.expressions.AIntLiteralExpCG;
import org.overture.codegen.cgast.types.ANat1NumericBasicTypeCG;
import org.overture.codegen.cgast.statements.AFieldObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AUndefinedExpCG;
import org.overture.codegen.cgast.traces.AApplyExpTraceCoreDeclCG;
import org.overture.codegen.cgast.statements.AStartStmCG;
import org.overture.codegen.cgast.expressions.SBoolBinaryExpCG;
import org.overture.codegen.cgast.expressions.SLiteralExpCG;
import org.overture.codegen.cgast.statements.AIdentifierObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.ABoolIsExpCG;
import org.overture.codegen.cgast.expressions.AGeneralIsExpCG;
import org.overture.codegen.cgast.expressions.AStringToSeqUnaryExpCG;
import org.overture.codegen.cgast.PCG;
import org.overture.codegen.cgast.expressions.APostDecExpCG;
import org.overture.codegen.cgast.expressions.ATailUnaryExpCG;
import java.util.Set;
import org.overture.codegen.cgast.expressions.ASeqModificationBinaryExpCG;
import org.overture.codegen.cgast.types.SSetTypeCG;
import org.overture.codegen.cgast.statements.SCallStmCG;
import org.overture.codegen.cgast.statements.AContinueStmCG;
import org.overture.codegen.cgast.expressions.ACaseAltExpExpCG;
import org.overture.codegen.cgast.expressions.ASuperVarExpCG;
import org.overture.codegen.cgast.statements.AMapSeqStateDesignatorCG;
import org.overture.codegen.cgast.SMultipleBindCG;
import org.overture.codegen.cgast.expressions.AApplyExpCG;
import org.overture.codegen.cgast.expressions.ACompSeqExpCG;
import java.lang.Double;
import org.overture.codegen.cgast.expressions.ASubSeqExpCG;
import org.overture.codegen.cgast.SPatternCG;
import org.overture.codegen.cgast.expressions.ARecordModifierCG;
import org.overture.codegen.cgast.expressions.ACasesExpCG;
import org.overture.codegen.cgast.statements.AReturnStmCG;
import org.overture.codegen.cgast.types.AMapMapTypeCG;
import java.util.ArrayList;
import org.overture.codegen.cgast.expressions.ALetDefExpCG;
import org.overture.codegen.cgast.expressions.ASetSubsetBinaryExpCG;
import java.lang.String;
import org.overture.codegen.cgast.expressions.ATimesNumericBinaryExpCG;
import org.overture.codegen.ir.SourceNode;
import org.overture.codegen.cgast.statements.ANewObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AAddrEqualsBinaryExpCG;
import org.overture.codegen.cgast.statements.ACaseAltStmStmCG;
import org.overture.codegen.cgast.expressions.AExplicitVarExpCG;
import org.overture.codegen.cgast.analysis.intf.IQuestion;
import org.overture.codegen.cgast.types.SNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.AThreadIdExpCG;
import org.overture.codegen.cgast.expressions.AFieldNumberExpCG;
import org.overture.codegen.cgast.types.ABoolBasicTypeCG;
import org.overture.codegen.cgast.patterns.ABoolPatternCG;
import org.overture.codegen.cgast.types.ARecordTypeCG;
import org.overture.codegen.cgast.statements.ABreakStmCG;
import org.overture.codegen.cgast.statements.ALocalPatternAssignmentStmCG;
import org.overture.codegen.cgast.types.ASetSetTypeCG;
import org.overture.codegen.cgast.SExpCG;
import org.overture.codegen.cgast.types.SMapTypeCG;
import org.overture.codegen.cgast.patterns.ASetMultipleBindCG;
import org.overture.codegen.cgast.STraceDeclCG;
import org.overture.codegen.cgast.patterns.AIgnorePatternCG;
import org.overture.codegen.cgast.STypeCG;
import org.overture.codegen.cgast.expressions.ALetBeStExpCG;
import org.overture.codegen.cgast.name.ATokenNameCG;
import org.overture.codegen.cgast.expressions.AInstanceofExpCG;
import org.overture.codegen.cgast.SDeclCG;
import org.overture.codegen.cgast.expressions.AMapRangeUnaryExpCG;
import org.overture.codegen.cgast.expressions.ALenUnaryExpCG;
import org.overture.codegen.cgast.expressions.ACardUnaryExpCG;
import org.overture.codegen.cgast.declarations.AFuncDeclCG;
import org.overture.codegen.cgast.declarations.ACatchClauseDeclCG;
import org.overture.codegen.cgast.types.ANatNumericBasicTypeCG;
import org.overture.codegen.cgast.SStateDesignatorCG;
import org.overture.codegen.cgast.statements.ABlockStmCG;
import org.overture.codegen.cgast.statements.ASkipStmCG;
import org.overture.codegen.cgast.declarations.AFieldDeclCG;
import org.overture.codegen.cgast.expressions.AMissingMemberRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.ATupleExpCG;
import org.overture.codegen.cgast.expressions.ARealLiteralExpCG;
import org.overture.codegen.cgast.IToken;
import org.overture.codegen.cgast.statements.ANotImplementedStmCG;
import java.util.List;
import org.overture.codegen.cgast.patterns.AIntPatternCG;
import org.overture.codegen.cgast.expressions.ARatIsExpCG;
import org.overture.codegen.cgast.expressions.ASeqConcatBinaryExpCG;
import org.overture.codegen.cgast.expressions.AFloorUnaryExpCG;
import org.overture.codegen.cgast.statements.ADecrementStmCG;
import org.overture.codegen.cgast.expressions.ALambdaExpCG;
import org.overture.codegen.cgast.types.AUnionTypeCG;
import org.overture.codegen.cgast.expressions.SBinaryExpCG;
import org.overture.codegen.cgast.expressions.AGreaterNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.APeriodicStmCG;
import org.overture.codegen.cgast.expressions.SVarExpCG;
import org.overture.codegen.cgast.expressions.APlusNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.ARaiseErrorStmCG;
import org.overture.codegen.cgast.STermCG;
import org.overture.codegen.cgast.expressions.ATernaryIfExpCG;
import org.overture.codegen.cgast.expressions.SSeqExpCG;
import org.overture.codegen.cgast.expressions.AEnumSeqExpCG;
import org.overture.codegen.cgast.types.ANat1BasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.patterns.ASetBindCG;
import org.overture.codegen.cgast.declarations.AInterfaceDeclCG;
import org.overture.codegen.cgast.expressions.ATokenIsExpCG;
import org.overture.codegen.cgast.expressions.SNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.ATryStmCG;
import org.overture.codegen.cgast.traces.ARepeatTraceDeclCG;
import org.overture.codegen.cgast.traces.ALetDefBindingTraceDeclCG;
import org.overture.codegen.cgast.expressions.AExternalExpCG;
import org.overture.codegen.cgast.utils.AInfoExternalType;
import org.overture.codegen.cgast.patterns.AIdentifierPatternCG;
import org.overture.codegen.cgast.expressions.ANotEqualsBinaryExpCG;
import org.overture.codegen.cgast.statements.AAbstractBodyStmCG;
import org.overture.codegen.cgast.expressions.AHeadUnaryExpCG;
import org.overture.codegen.cgast.types.ASeqSeqTypeCG;
import org.overture.codegen.cgast.expressions.AMapUnionBinaryExpCG;
import org.overture.codegen.cgast.expressions.AIntIsExpCG;
import org.overture.codegen.cgast.SModifierCG;
import org.overture.codegen.cgast.declarations.ANamedTraceDeclCG;
import org.overture.codegen.cgast.statements.ASelfObjectDesignatorCG;
import org.overture.codegen.cgast.types.ANatBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AXorBoolBinaryExpCG;
import org.overture.codegen.cgast.statements.AElseIfStmCG;
import org.overture.codegen.cgast.types.AUnknownTypeCG;
import org.overture.codegen.cgast.declarations.AClassDeclCG;
import org.overture.codegen.cgast.statements.AThrowStmCG;
import org.overture.codegen.cgast.expressions.AEqualsBinaryExpCG;
import org.overture.codegen.cgast.expressions.ASetDifferenceBinaryExpCG;
import org.overture.codegen.cgast.declarations.AThreadDeclCG;
import org.overture.codegen.cgast.types.ARatBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.declarations.ANamedTypeDeclCG;
import org.overture.codegen.cgast.SNameCG;
import org.overture.codegen.cgast.expressions.AIdentifierVarExpCG;
import org.overture.codegen.cgast.statements.AErrorStmCG;
import org.overture.codegen.cgast.expressions.ARangeSetExpCG;
import org.overture.codegen.cgast.expressions.ATupleSizeExpCG;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
@SuppressWarnings({"all"})
public abstract class DepthFirstAnalysisAdaptorQuestion<Q> implements IQuestion<Q>
{
	private static final long serialVersionUID = 1L;

	protected Set<INode> _visitedNodes = new java.util.HashSet<INode>();
	final protected IQuestion<Q> THIS;

	/**
	* Creates a new {@code DepthFirstAnalysisAdaptorQuestion} node with the given nodes as children.
	* The basic child nodes are removed from their previous parents.
	* @param visitedNodes_ the {@link Set} node for the {@code visitedNodes} child of this {@link DepthFirstAnalysisAdaptorQuestion} node
	* @param THIS_ the {@link IQuestion} <b>graph</a> node for the {@code THIS} child of this {@link DepthFirstAnalysisAdaptorQuestion} node.
	*  <i>The parent of this {@code THIS } will not be changed by adding it to this node.</i>
	*/
	public DepthFirstAnalysisAdaptorQuestion(Set<INode> visitedNodes_, IQuestion<Q> THIS_)
	{
		super();
		this.setVisitedNodes(visitedNodes_);
		this.THIS = THIS_;

	}


	/**
	 * Creates a new {@link DepthFirstAnalysisAdaptorQuestion} node with no children.
	 */
	public DepthFirstAnalysisAdaptorQuestion()
	{
		this.THIS=this;

	}


	/**
	 * Sets the {@code _visitedNodes} child of this {@link DepthFirstAnalysisAdaptorQuestion} node.
	 * @param value the new {@code _visitedNodes} child of this {@link DepthFirstAnalysisAdaptorQuestion} node
	*/
	public void setVisitedNodes(Set<INode> value)
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void casePType(PType node, Q question) throws AnalysisException
	{
		inPType(node, question);


		outPType(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inPType(PType node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outPType(PType node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseSourceNode(SourceNode node, Q question) throws AnalysisException
	{
		inSourceNode(node, question);


		outSourceNode(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inSourceNode(SourceNode node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outSourceNode(SourceNode node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseBoolean(Boolean node, Q question) throws AnalysisException
	{
		inBoolean(node, question);


		outBoolean(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inBoolean(Boolean node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outBoolean(Boolean node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseLong(Long node, Q question) throws AnalysisException
	{
		inLong(node, question);


		outLong(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inLong(Long node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outLong(Long node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseInteger(Integer node, Q question) throws AnalysisException
	{
		inInteger(node, question);


		outInteger(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inInteger(Integer node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outInteger(Integer node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseDouble(Double node, Q question) throws AnalysisException
	{
		inDouble(node, question);


		outDouble(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inDouble(Double node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outDouble(Double node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseCharacter(Character node, Q question) throws AnalysisException
	{
		inCharacter(node, question);


		outCharacter(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inCharacter(Character node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outCharacter(Character node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseString(String node, Q question) throws AnalysisException
	{
		inString(node, question);


		outString(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inString(String node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outString(String node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseObject(Object node, Q question) throws AnalysisException
	{
		inObject(node, question);


		outObject(node, question);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inObject(Object node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outObject(Object node, Q question) throws AnalysisException
	{

	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public void defaultInPCG(PCG node, Q question) throws AnalysisException
	{
		defaultInINode(node, question);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public void defaultOutPCG(PCG node, Q question) throws AnalysisException
	{
		defaultOutINode(node, question);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public void defaultPCG(PCG node, Q question) throws AnalysisException
	{
		defaultINode(node, question);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public void inPCG(PCG node, Q question) throws AnalysisException
	{
		defaultInINode(node, question);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public void outPCG(PCG node, Q question) throws AnalysisException
	{
		defaultOutINode(node, question);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public void defaultInSPatternCG(SPatternCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public void defaultOutSPatternCG(SPatternCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public void defaultSPatternCG(SPatternCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public void inSPatternCG(SPatternCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public void outSPatternCG(SPatternCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public void defaultInSBindCG(SBindCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public void defaultOutSBindCG(SBindCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public void defaultSBindCG(SBindCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public void inSBindCG(SBindCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public void outSBindCG(SBindCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public void defaultInSMultipleBindCG(SMultipleBindCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public void defaultOutSMultipleBindCG(SMultipleBindCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public void defaultSMultipleBindCG(SMultipleBindCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public void inSMultipleBindCG(SMultipleBindCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public void outSMultipleBindCG(SMultipleBindCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public void defaultInSNameCG(SNameCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public void defaultOutSNameCG(SNameCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public void defaultSNameCG(SNameCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public void inSNameCG(SNameCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public void outSNameCG(SNameCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public void defaultInSDeclCG(SDeclCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public void defaultOutSDeclCG(SDeclCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public void defaultSDeclCG(SDeclCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public void inSDeclCG(SDeclCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public void outSDeclCG(SDeclCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public void defaultInSStateDesignatorCG(SStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public void defaultOutSStateDesignatorCG(SStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public void defaultSStateDesignatorCG(SStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public void inSStateDesignatorCG(SStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public void outSStateDesignatorCG(SStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public void defaultInSObjectDesignatorCG(SObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public void defaultOutSObjectDesignatorCG(SObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public void defaultSObjectDesignatorCG(SObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public void inSObjectDesignatorCG(SObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public void outSObjectDesignatorCG(SObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public void defaultInSLocalParamCG(SLocalParamCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public void defaultOutSLocalParamCG(SLocalParamCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public void defaultSLocalParamCG(SLocalParamCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public void inSLocalParamCG(SLocalParamCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public void outSLocalParamCG(SLocalParamCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public void defaultInSStmCG(SStmCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public void defaultOutSStmCG(SStmCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public void defaultSStmCG(SStmCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public void inSStmCG(SStmCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public void outSStmCG(SStmCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public void defaultInSLetBeStCG(SLetBeStCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public void defaultOutSLetBeStCG(SLetBeStCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public void defaultSLetBeStCG(SLetBeStCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public void inSLetBeStCG(SLetBeStCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public void outSLetBeStCG(SLetBeStCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public void defaultInSExpCG(SExpCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public void defaultOutSExpCG(SExpCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public void defaultSExpCG(SExpCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public void inSExpCG(SExpCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public void outSExpCG(SExpCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public void defaultInSTypeCG(STypeCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public void defaultOutSTypeCG(STypeCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public void defaultSTypeCG(STypeCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public void inSTypeCG(STypeCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public void outSTypeCG(STypeCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public void defaultInSModifierCG(SModifierCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public void defaultOutSModifierCG(SModifierCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public void defaultSModifierCG(SModifierCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public void inSModifierCG(SModifierCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public void outSModifierCG(SModifierCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public void defaultInSTermCG(STermCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public void defaultOutSTermCG(STermCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public void defaultSTermCG(STermCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public void inSTermCG(STermCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public void outSTermCG(STermCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public void defaultInSTraceDeclCG(STraceDeclCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public void defaultOutSTraceDeclCG(STraceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public void defaultSTraceDeclCG(STraceDeclCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public void inSTraceDeclCG(STraceDeclCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public void outSTraceDeclCG(STraceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public void defaultInSTraceCoreDeclCG(STraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public void defaultOutSTraceCoreDeclCG(STraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public void defaultSTraceCoreDeclCG(STraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultPCG(node, question);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public void inSTraceCoreDeclCG(STraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultInPCG(node, question);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public void outSTraceCoreDeclCG(STraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultOutPCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierPatternCG} node from {@link AIdentifierPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPatternCG} node
	*/
	public void caseAIdentifierPatternCG(AIdentifierPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIdentifierPatternCG(node, question);


		outAIdentifierPatternCG(node, question);

	}


	/**
	* Called by the {@link AIdentifierPatternCG} node from {@link AIdentifierPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPatternCG} node
	*/
	public void inAIdentifierPatternCG(AIdentifierPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierPatternCG} node from {@link AIdentifierPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPatternCG} node
	*/
	public void outAIdentifierPatternCG(AIdentifierPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link AIgnorePatternCG} node from {@link AIgnorePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePatternCG} node
	*/
	public void caseAIgnorePatternCG(AIgnorePatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIgnorePatternCG(node, question);


		outAIgnorePatternCG(node, question);

	}


	/**
	* Called by the {@link AIgnorePatternCG} node from {@link AIgnorePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePatternCG} node
	*/
	public void inAIgnorePatternCG(AIgnorePatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link AIgnorePatternCG} node from {@link AIgnorePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePatternCG} node
	*/
	public void outAIgnorePatternCG(AIgnorePatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link ABoolPatternCG} node from {@link ABoolPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolPatternCG} node
	*/
	public void caseABoolPatternCG(ABoolPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABoolPatternCG(node, question);


		outABoolPatternCG(node, question);

	}


	/**
	* Called by the {@link ABoolPatternCG} node from {@link ABoolPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolPatternCG} node
	*/
	public void inABoolPatternCG(ABoolPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link ABoolPatternCG} node from {@link ABoolPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolPatternCG} node
	*/
	public void outABoolPatternCG(ABoolPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link ACharPatternCG} node from {@link ACharPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharPatternCG} node
	*/
	public void caseACharPatternCG(ACharPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACharPatternCG(node, question);


		outACharPatternCG(node, question);

	}


	/**
	* Called by the {@link ACharPatternCG} node from {@link ACharPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharPatternCG} node
	*/
	public void inACharPatternCG(ACharPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link ACharPatternCG} node from {@link ACharPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharPatternCG} node
	*/
	public void outACharPatternCG(ACharPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link AIntPatternCG} node from {@link AIntPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntPatternCG} node
	*/
	public void caseAIntPatternCG(AIntPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIntPatternCG(node, question);


		outAIntPatternCG(node, question);

	}


	/**
	* Called by the {@link AIntPatternCG} node from {@link AIntPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntPatternCG} node
	*/
	public void inAIntPatternCG(AIntPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link AIntPatternCG} node from {@link AIntPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntPatternCG} node
	*/
	public void outAIntPatternCG(AIntPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link ANullPatternCG} node from {@link ANullPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullPatternCG} node
	*/
	public void caseANullPatternCG(ANullPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANullPatternCG(node, question);


		outANullPatternCG(node, question);

	}


	/**
	* Called by the {@link ANullPatternCG} node from {@link ANullPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullPatternCG} node
	*/
	public void inANullPatternCG(ANullPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link ANullPatternCG} node from {@link ANullPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullPatternCG} node
	*/
	public void outANullPatternCG(ANullPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link AQuotePatternCG} node from {@link AQuotePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePatternCG} node
	*/
	public void caseAQuotePatternCG(AQuotePatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAQuotePatternCG(node, question);


		outAQuotePatternCG(node, question);

	}


	/**
	* Called by the {@link AQuotePatternCG} node from {@link AQuotePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePatternCG} node
	*/
	public void inAQuotePatternCG(AQuotePatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link AQuotePatternCG} node from {@link AQuotePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePatternCG} node
	*/
	public void outAQuotePatternCG(AQuotePatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link ARealPatternCG} node from {@link ARealPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealPatternCG} node
	*/
	public void caseARealPatternCG(ARealPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARealPatternCG(node, question);


		outARealPatternCG(node, question);

	}


	/**
	* Called by the {@link ARealPatternCG} node from {@link ARealPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealPatternCG} node
	*/
	public void inARealPatternCG(ARealPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link ARealPatternCG} node from {@link ARealPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealPatternCG} node
	*/
	public void outARealPatternCG(ARealPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link AStringPatternCG} node from {@link AStringPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringPatternCG} node
	*/
	public void caseAStringPatternCG(AStringPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAStringPatternCG(node, question);


		outAStringPatternCG(node, question);

	}


	/**
	* Called by the {@link AStringPatternCG} node from {@link AStringPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringPatternCG} node
	*/
	public void inAStringPatternCG(AStringPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link AStringPatternCG} node from {@link AStringPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringPatternCG} node
	*/
	public void outAStringPatternCG(AStringPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link ATuplePatternCG} node from {@link ATuplePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePatternCG} node
	*/
	public void caseATuplePatternCG(ATuplePatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATuplePatternCG(node, question);

		{
			List<SPatternCG> copy = new ArrayList<SPatternCG>(node.getPatterns());
			for( SPatternCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outATuplePatternCG(node, question);

	}


	/**
	* Called by the {@link ATuplePatternCG} node from {@link ATuplePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePatternCG} node
	*/
	public void inATuplePatternCG(ATuplePatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link ATuplePatternCG} node from {@link ATuplePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePatternCG} node
	*/
	public void outATuplePatternCG(ATuplePatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link ARecordPatternCG} node from {@link ARecordPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPatternCG} node
	*/
	public void caseARecordPatternCG(ARecordPatternCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARecordPatternCG(node, question);

		{
			List<SPatternCG> copy = new ArrayList<SPatternCG>(node.getPatterns());
			for( SPatternCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outARecordPatternCG(node, question);

	}


	/**
	* Called by the {@link ARecordPatternCG} node from {@link ARecordPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPatternCG} node
	*/
	public void inARecordPatternCG(ARecordPatternCG node, Q question) throws AnalysisException
	{
		defaultInSPatternCG(node, question);
	}


	/**
	* Called by the {@link ARecordPatternCG} node from {@link ARecordPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPatternCG} node
	*/
	public void outARecordPatternCG(ARecordPatternCG node, Q question) throws AnalysisException
	{
		defaultOutSPatternCG(node, question);
	}


	/**
	* Called by the {@link ASetBindCG} node from {@link ASetBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetBindCG} node
	*/
	public void caseASetBindCG(ASetBindCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetBindCG(node, question);

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			node.getPattern().apply(this, question);
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			node.getSet().apply(this, question);
		}

		outASetBindCG(node, question);

	}


	/**
	* Called by the {@link ASetBindCG} node from {@link ASetBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetBindCG} node
	*/
	public void inASetBindCG(ASetBindCG node, Q question) throws AnalysisException
	{
		defaultInSBindCG(node, question);
	}


	/**
	* Called by the {@link ASetBindCG} node from {@link ASetBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetBindCG} node
	*/
	public void outASetBindCG(ASetBindCG node, Q question) throws AnalysisException
	{
		defaultOutSBindCG(node, question);
	}


	/**
	* Called by the {@link ASetMultipleBindCG} node from {@link ASetMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBindCG} node
	*/
	public void caseASetMultipleBindCG(ASetMultipleBindCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetMultipleBindCG(node, question);

		{
			List<SPatternCG> copy = new ArrayList<SPatternCG>(node.getPatterns());
			for( SPatternCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			node.getSet().apply(this, question);
		}

		outASetMultipleBindCG(node, question);

	}


	/**
	* Called by the {@link ASetMultipleBindCG} node from {@link ASetMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBindCG} node
	*/
	public void inASetMultipleBindCG(ASetMultipleBindCG node, Q question) throws AnalysisException
	{
		defaultInSMultipleBindCG(node, question);
	}


	/**
	* Called by the {@link ASetMultipleBindCG} node from {@link ASetMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBindCG} node
	*/
	public void outASetMultipleBindCG(ASetMultipleBindCG node, Q question) throws AnalysisException
	{
		defaultOutSMultipleBindCG(node, question);
	}


	/**
	* Called by the {@link ATypeNameCG} node from {@link ATypeNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeNameCG} node
	*/
	public void caseATypeNameCG(ATypeNameCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATypeNameCG(node, question);


		outATypeNameCG(node, question);

	}


	/**
	* Called by the {@link ATypeNameCG} node from {@link ATypeNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeNameCG} node
	*/
	public void inATypeNameCG(ATypeNameCG node, Q question) throws AnalysisException
	{
		defaultInSNameCG(node, question);
	}


	/**
	* Called by the {@link ATypeNameCG} node from {@link ATypeNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeNameCG} node
	*/
	public void outATypeNameCG(ATypeNameCG node, Q question) throws AnalysisException
	{
		defaultOutSNameCG(node, question);
	}


	/**
	* Called by the {@link ATokenNameCG} node from {@link ATokenNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenNameCG} node
	*/
	public void caseATokenNameCG(ATokenNameCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATokenNameCG(node, question);


		outATokenNameCG(node, question);

	}


	/**
	* Called by the {@link ATokenNameCG} node from {@link ATokenNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenNameCG} node
	*/
	public void inATokenNameCG(ATokenNameCG node, Q question) throws AnalysisException
	{
		defaultInSNameCG(node, question);
	}


	/**
	* Called by the {@link ATokenNameCG} node from {@link ATokenNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenNameCG} node
	*/
	public void outATokenNameCG(ATokenNameCG node, Q question) throws AnalysisException
	{
		defaultOutSNameCG(node, question);
	}


	/**
	* Called by the {@link AMethodDeclCG} node from {@link AMethodDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodDeclCG} node
	*/
	public void caseAMethodDeclCG(AMethodDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMethodDeclCG(node, question);

		if(node.getPreCond() != null && !_visitedNodes.contains(node.getPreCond())) 
		{
			node.getPreCond().apply(this, question);
		}
		if(node.getPostCond() != null && !_visitedNodes.contains(node.getPostCond())) 
		{
			node.getPostCond().apply(this, question);
		}
		if(node.getMethodType() != null && !_visitedNodes.contains(node.getMethodType())) 
		{
			node.getMethodType().apply(this, question);
		}
		{
			List<AFormalParamLocalParamCG> copy = new ArrayList<AFormalParamLocalParamCG>(node.getFormalParams());
			for( AFormalParamLocalParamCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<ATemplateTypeCG> copy = new ArrayList<ATemplateTypeCG>(node.getTemplateTypes());
			for( ATemplateTypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outAMethodDeclCG(node, question);

	}


	/**
	* Called by the {@link AMethodDeclCG} node from {@link AMethodDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodDeclCG} node
	*/
	public void inAMethodDeclCG(AMethodDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AMethodDeclCG} node from {@link AMethodDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodDeclCG} node
	*/
	public void outAMethodDeclCG(AMethodDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AFuncDeclCG} node from {@link AFuncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFuncDeclCG} node
	*/
	public void caseAFuncDeclCG(AFuncDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFuncDeclCG(node, question);

		if(node.getPreCond() != null && !_visitedNodes.contains(node.getPreCond())) 
		{
			node.getPreCond().apply(this, question);
		}
		if(node.getPostCond() != null && !_visitedNodes.contains(node.getPostCond())) 
		{
			node.getPostCond().apply(this, question);
		}
		if(node.getMethodType() != null && !_visitedNodes.contains(node.getMethodType())) 
		{
			node.getMethodType().apply(this, question);
		}
		{
			List<AFormalParamLocalParamCG> copy = new ArrayList<AFormalParamLocalParamCG>(node.getFormalParams());
			for( AFormalParamLocalParamCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<ATemplateTypeCG> copy = new ArrayList<ATemplateTypeCG>(node.getTemplateTypes());
			for( ATemplateTypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outAFuncDeclCG(node, question);

	}


	/**
	* Called by the {@link AFuncDeclCG} node from {@link AFuncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFuncDeclCG} node
	*/
	public void inAFuncDeclCG(AFuncDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AFuncDeclCG} node from {@link AFuncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFuncDeclCG} node
	*/
	public void outAFuncDeclCG(AFuncDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AFieldDeclCG} node from {@link AFieldDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldDeclCG} node
	*/
	public void caseAFieldDeclCG(AFieldDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFieldDeclCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getInitial() != null && !_visitedNodes.contains(node.getInitial())) 
		{
			node.getInitial().apply(this, question);
		}

		outAFieldDeclCG(node, question);

	}


	/**
	* Called by the {@link AFieldDeclCG} node from {@link AFieldDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldDeclCG} node
	*/
	public void inAFieldDeclCG(AFieldDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AFieldDeclCG} node from {@link AFieldDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldDeclCG} node
	*/
	public void outAFieldDeclCG(AFieldDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AClassDeclCG} node from {@link AClassDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassDeclCG} node
	*/
	public void caseAClassDeclCG(AClassDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAClassDeclCG(node, question);

		{
			List<AFieldDeclCG> copy = new ArrayList<AFieldDeclCG>(node.getFields());
			for( AFieldDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethods());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<AFuncDeclCG> copy = new ArrayList<AFuncDeclCG>(node.getFunctions());
			for( AFuncDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<ANamedTraceDeclCG> copy = new ArrayList<ANamedTraceDeclCG>(node.getTraces());
			for( ANamedTraceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getThread() != null && !_visitedNodes.contains(node.getThread())) 
		{
			node.getThread().apply(this, question);
		}
		{
			List<AClassDeclCG> copy = new ArrayList<AClassDeclCG>(node.getInnerClasses());
			for( AClassDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<AInterfaceDeclCG> copy = new ArrayList<AInterfaceDeclCG>(node.getInterfaces());
			for( AInterfaceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<ATypeDeclCG> copy = new ArrayList<ATypeDeclCG>(node.getTypeDecls());
			for( ATypeDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<APersyncDeclCG> copy = new ArrayList<APersyncDeclCG>(node.getPerSyncs());
			for( APersyncDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<AMutexSyncDeclCG> copy = new ArrayList<AMutexSyncDeclCG>(node.getMutexSyncs());
			for( AMutexSyncDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAClassDeclCG(node, question);

	}


	/**
	* Called by the {@link AClassDeclCG} node from {@link AClassDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassDeclCG} node
	*/
	public void inAClassDeclCG(AClassDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AClassDeclCG} node from {@link AClassDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassDeclCG} node
	*/
	public void outAClassDeclCG(AClassDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AInterfaceDeclCG} node from {@link AInterfaceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceDeclCG} node
	*/
	public void caseAInterfaceDeclCG(AInterfaceDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAInterfaceDeclCG(node, question);

		{
			List<ATemplateTypeCG> copy = new ArrayList<ATemplateTypeCG>(node.getTemplateTypes());
			for( ATemplateTypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<AFieldDeclCG> copy = new ArrayList<AFieldDeclCG>(node.getFields());
			for( AFieldDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethodSignatures());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAInterfaceDeclCG(node, question);

	}


	/**
	* Called by the {@link AInterfaceDeclCG} node from {@link AInterfaceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceDeclCG} node
	*/
	public void inAInterfaceDeclCG(AInterfaceDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AInterfaceDeclCG} node from {@link AInterfaceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceDeclCG} node
	*/
	public void outAInterfaceDeclCG(AInterfaceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link ARecordDeclCG} node from {@link ARecordDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordDeclCG} node
	*/
	public void caseARecordDeclCG(ARecordDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARecordDeclCG(node, question);

		{
			List<AFieldDeclCG> copy = new ArrayList<AFieldDeclCG>(node.getFields());
			for( AFieldDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethods());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outARecordDeclCG(node, question);

	}


	/**
	* Called by the {@link ARecordDeclCG} node from {@link ARecordDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordDeclCG} node
	*/
	public void inARecordDeclCG(ARecordDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link ARecordDeclCG} node from {@link ARecordDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordDeclCG} node
	*/
	public void outARecordDeclCG(ARecordDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AThreadDeclCG} node from {@link AThreadDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDeclCG} node
	*/
	public void caseAThreadDeclCG(AThreadDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAThreadDeclCG(node, question);

		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			node.getDef().apply(this, question);
		}
		if(node.getStm() != null && !_visitedNodes.contains(node.getStm())) 
		{
			node.getStm().apply(this, question);
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAThreadDeclCG(node, question);

	}


	/**
	* Called by the {@link AThreadDeclCG} node from {@link AThreadDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDeclCG} node
	*/
	public void inAThreadDeclCG(AThreadDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AThreadDeclCG} node from {@link AThreadDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDeclCG} node
	*/
	public void outAThreadDeclCG(AThreadDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link ATypeDeclCG} node from {@link ATypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDeclCG} node
	*/
	public void caseATypeDeclCG(ATypeDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATypeDeclCG(node, question);

		if(node.getDecl() != null && !_visitedNodes.contains(node.getDecl())) 
		{
			node.getDecl().apply(this, question);
		}

		outATypeDeclCG(node, question);

	}


	/**
	* Called by the {@link ATypeDeclCG} node from {@link ATypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDeclCG} node
	*/
	public void inATypeDeclCG(ATypeDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link ATypeDeclCG} node from {@link ATypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDeclCG} node
	*/
	public void outATypeDeclCG(ATypeDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link ACatchClauseDeclCG} node from {@link ACatchClauseDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ACatchClauseDeclCG} node
	*/
	public void caseACatchClauseDeclCG(ACatchClauseDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACatchClauseDeclCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getStm() != null && !_visitedNodes.contains(node.getStm())) 
		{
			node.getStm().apply(this, question);
		}

		outACatchClauseDeclCG(node, question);

	}


	/**
	* Called by the {@link ACatchClauseDeclCG} node from {@link ACatchClauseDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ACatchClauseDeclCG} node
	*/
	public void inACatchClauseDeclCG(ACatchClauseDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link ACatchClauseDeclCG} node from {@link ACatchClauseDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ACatchClauseDeclCG} node
	*/
	public void outACatchClauseDeclCG(ACatchClauseDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link APersyncDeclCG} node from {@link APersyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link APersyncDeclCG} node
	*/
	public void caseAPersyncDeclCG(APersyncDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPersyncDeclCG(node, question);

		if(node.getPred() != null && !_visitedNodes.contains(node.getPred())) 
		{
			node.getPred().apply(this, question);
		}

		outAPersyncDeclCG(node, question);

	}


	/**
	* Called by the {@link APersyncDeclCG} node from {@link APersyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link APersyncDeclCG} node
	*/
	public void inAPersyncDeclCG(APersyncDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link APersyncDeclCG} node from {@link APersyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link APersyncDeclCG} node
	*/
	public void outAPersyncDeclCG(APersyncDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AMutexSyncDeclCG} node from {@link AMutexSyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDeclCG} node
	*/
	public void caseAMutexSyncDeclCG(AMutexSyncDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMutexSyncDeclCG(node, question);

		{
			List<SNameCG> copy = new ArrayList<SNameCG>(node.getOpnames());
			for( SNameCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAMutexSyncDeclCG(node, question);

	}


	/**
	* Called by the {@link AMutexSyncDeclCG} node from {@link AMutexSyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDeclCG} node
	*/
	public void inAMutexSyncDeclCG(AMutexSyncDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AMutexSyncDeclCG} node from {@link AMutexSyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDeclCG} node
	*/
	public void outAMutexSyncDeclCG(AMutexSyncDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AVarDeclCG} node from {@link AVarDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AVarDeclCG} node
	*/
	public void caseAVarDeclCG(AVarDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAVarDeclCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			node.getPattern().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAVarDeclCG(node, question);

	}


	/**
	* Called by the {@link AVarDeclCG} node from {@link AVarDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AVarDeclCG} node
	*/
	public void inAVarDeclCG(AVarDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link AVarDeclCG} node from {@link AVarDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AVarDeclCG} node
	*/
	public void outAVarDeclCG(AVarDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link ANamedTypeDeclCG} node from {@link ANamedTypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTypeDeclCG} node
	*/
	public void caseANamedTypeDeclCG(ANamedTypeDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANamedTypeDeclCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outANamedTypeDeclCG(node, question);

	}


	/**
	* Called by the {@link ANamedTypeDeclCG} node from {@link ANamedTypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTypeDeclCG} node
	*/
	public void inANamedTypeDeclCG(ANamedTypeDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link ANamedTypeDeclCG} node from {@link ANamedTypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTypeDeclCG} node
	*/
	public void outANamedTypeDeclCG(ANamedTypeDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link ANamedTraceDeclCG} node from {@link ANamedTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDeclCG} node
	*/
	public void caseANamedTraceDeclCG(ANamedTraceDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANamedTraceDeclCG(node, question);

		{
			List<ATokenNameCG> copy = new ArrayList<ATokenNameCG>(node.getPathname());
			for( ATokenNameCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<ATraceDeclTermCG> copy = new ArrayList<ATraceDeclTermCG>(node.getTerms());
			for( ATraceDeclTermCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outANamedTraceDeclCG(node, question);

	}


	/**
	* Called by the {@link ANamedTraceDeclCG} node from {@link ANamedTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDeclCG} node
	*/
	public void inANamedTraceDeclCG(ANamedTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultInSDeclCG(node, question);
	}


	/**
	* Called by the {@link ANamedTraceDeclCG} node from {@link ANamedTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDeclCG} node
	*/
	public void outANamedTraceDeclCG(ANamedTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSDeclCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierStateDesignatorCG} node from {@link AIdentifierStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignatorCG} node
	*/
	public void caseAIdentifierStateDesignatorCG(AIdentifierStateDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIdentifierStateDesignatorCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAIdentifierStateDesignatorCG(node, question);

	}


	/**
	* Called by the {@link AIdentifierStateDesignatorCG} node from {@link AIdentifierStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignatorCG} node
	*/
	public void inAIdentifierStateDesignatorCG(AIdentifierStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSStateDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierStateDesignatorCG} node from {@link AIdentifierStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignatorCG} node
	*/
	public void outAIdentifierStateDesignatorCG(AIdentifierStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSStateDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AFieldStateDesignatorCG} node from {@link AFieldStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignatorCG} node
	*/
	public void caseAFieldStateDesignatorCG(AFieldStateDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFieldStateDesignatorCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			node.getObject().apply(this, question);
		}

		outAFieldStateDesignatorCG(node, question);

	}


	/**
	* Called by the {@link AFieldStateDesignatorCG} node from {@link AFieldStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignatorCG} node
	*/
	public void inAFieldStateDesignatorCG(AFieldStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSStateDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AFieldStateDesignatorCG} node from {@link AFieldStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignatorCG} node
	*/
	public void outAFieldStateDesignatorCG(AFieldStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSStateDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AMapSeqStateDesignatorCG} node from {@link AMapSeqStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignatorCG} node
	*/
	public void caseAMapSeqStateDesignatorCG(AMapSeqStateDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapSeqStateDesignatorCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getMapseq() != null && !_visitedNodes.contains(node.getMapseq())) 
		{
			node.getMapseq().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAMapSeqStateDesignatorCG(node, question);

	}


	/**
	* Called by the {@link AMapSeqStateDesignatorCG} node from {@link AMapSeqStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignatorCG} node
	*/
	public void inAMapSeqStateDesignatorCG(AMapSeqStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSStateDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AMapSeqStateDesignatorCG} node from {@link AMapSeqStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignatorCG} node
	*/
	public void outAMapSeqStateDesignatorCG(AMapSeqStateDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSStateDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AApplyObjectDesignatorCG} node from {@link AApplyObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignatorCG} node
	*/
	public void caseAApplyObjectDesignatorCG(AApplyObjectDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAApplyObjectDesignatorCG(node, question);

		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			node.getObject().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAApplyObjectDesignatorCG(node, question);

	}


	/**
	* Called by the {@link AApplyObjectDesignatorCG} node from {@link AApplyObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignatorCG} node
	*/
	public void inAApplyObjectDesignatorCG(AApplyObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AApplyObjectDesignatorCG} node from {@link AApplyObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignatorCG} node
	*/
	public void outAApplyObjectDesignatorCG(AApplyObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AFieldObjectDesignatorCG} node from {@link AFieldObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignatorCG} node
	*/
	public void caseAFieldObjectDesignatorCG(AFieldObjectDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFieldObjectDesignatorCG(node, question);

		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			node.getObject().apply(this, question);
		}

		outAFieldObjectDesignatorCG(node, question);

	}


	/**
	* Called by the {@link AFieldObjectDesignatorCG} node from {@link AFieldObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignatorCG} node
	*/
	public void inAFieldObjectDesignatorCG(AFieldObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AFieldObjectDesignatorCG} node from {@link AFieldObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignatorCG} node
	*/
	public void outAFieldObjectDesignatorCG(AFieldObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierObjectDesignatorCG} node from {@link AIdentifierObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignatorCG} node
	*/
	public void caseAIdentifierObjectDesignatorCG(AIdentifierObjectDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIdentifierObjectDesignatorCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAIdentifierObjectDesignatorCG(node, question);

	}


	/**
	* Called by the {@link AIdentifierObjectDesignatorCG} node from {@link AIdentifierObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignatorCG} node
	*/
	public void inAIdentifierObjectDesignatorCG(AIdentifierObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierObjectDesignatorCG} node from {@link AIdentifierObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignatorCG} node
	*/
	public void outAIdentifierObjectDesignatorCG(AIdentifierObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link ANewObjectDesignatorCG} node from {@link ANewObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignatorCG} node
	*/
	public void caseANewObjectDesignatorCG(ANewObjectDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANewObjectDesignatorCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outANewObjectDesignatorCG(node, question);

	}


	/**
	* Called by the {@link ANewObjectDesignatorCG} node from {@link ANewObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignatorCG} node
	*/
	public void inANewObjectDesignatorCG(ANewObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link ANewObjectDesignatorCG} node from {@link ANewObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignatorCG} node
	*/
	public void outANewObjectDesignatorCG(ANewObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link ASelfObjectDesignatorCG} node from {@link ASelfObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignatorCG} node
	*/
	public void caseASelfObjectDesignatorCG(ASelfObjectDesignatorCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASelfObjectDesignatorCG(node, question);


		outASelfObjectDesignatorCG(node, question);

	}


	/**
	* Called by the {@link ASelfObjectDesignatorCG} node from {@link ASelfObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignatorCG} node
	*/
	public void inASelfObjectDesignatorCG(ASelfObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultInSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link ASelfObjectDesignatorCG} node from {@link ASelfObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignatorCG} node
	*/
	public void outASelfObjectDesignatorCG(ASelfObjectDesignatorCG node, Q question) throws AnalysisException
	{
		defaultOutSObjectDesignatorCG(node, question);
	}


	/**
	* Called by the {@link AFormalParamLocalParamCG} node from {@link AFormalParamLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link AFormalParamLocalParamCG} node
	*/
	public void caseAFormalParamLocalParamCG(AFormalParamLocalParamCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFormalParamLocalParamCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			node.getPattern().apply(this, question);
		}

		outAFormalParamLocalParamCG(node, question);

	}


	/**
	* Called by the {@link AFormalParamLocalParamCG} node from {@link AFormalParamLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link AFormalParamLocalParamCG} node
	*/
	public void inAFormalParamLocalParamCG(AFormalParamLocalParamCG node, Q question) throws AnalysisException
	{
		defaultInSLocalParamCG(node, question);
	}


	/**
	* Called by the {@link AFormalParamLocalParamCG} node from {@link AFormalParamLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link AFormalParamLocalParamCG} node
	*/
	public void outAFormalParamLocalParamCG(AFormalParamLocalParamCG node, Q question) throws AnalysisException
	{
		defaultOutSLocalParamCG(node, question);
	}


	/**
	* Called by the {@link AIfStmCG} node from {@link AIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIfStmCG} node
	*/
	public void caseAIfStmCG(AIfStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIfStmCG(node, question);

		if(node.getIfExp() != null && !_visitedNodes.contains(node.getIfExp())) 
		{
			node.getIfExp().apply(this, question);
		}
		if(node.getThenStm() != null && !_visitedNodes.contains(node.getThenStm())) 
		{
			node.getThenStm().apply(this, question);
		}
		{
			List<AElseIfStmCG> copy = new ArrayList<AElseIfStmCG>(node.getElseIf());
			for( AElseIfStmCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getElseStm() != null && !_visitedNodes.contains(node.getElseStm())) 
		{
			node.getElseStm().apply(this, question);
		}

		outAIfStmCG(node, question);

	}


	/**
	* Called by the {@link AIfStmCG} node from {@link AIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIfStmCG} node
	*/
	public void inAIfStmCG(AIfStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AIfStmCG} node from {@link AIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIfStmCG} node
	*/
	public void outAIfStmCG(AIfStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AElseIfStmCG} node from {@link AElseIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStmCG} node
	*/
	public void caseAElseIfStmCG(AElseIfStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAElseIfStmCG(node, question);

		if(node.getElseIf() != null && !_visitedNodes.contains(node.getElseIf())) 
		{
			node.getElseIf().apply(this, question);
		}
		if(node.getThenStm() != null && !_visitedNodes.contains(node.getThenStm())) 
		{
			node.getThenStm().apply(this, question);
		}

		outAElseIfStmCG(node, question);

	}


	/**
	* Called by the {@link AElseIfStmCG} node from {@link AElseIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStmCG} node
	*/
	public void inAElseIfStmCG(AElseIfStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AElseIfStmCG} node from {@link AElseIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStmCG} node
	*/
	public void outAElseIfStmCG(AElseIfStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ASkipStmCG} node from {@link ASkipStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStmCG} node
	*/
	public void caseASkipStmCG(ASkipStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASkipStmCG(node, question);


		outASkipStmCG(node, question);

	}


	/**
	* Called by the {@link ASkipStmCG} node from {@link ASkipStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStmCG} node
	*/
	public void inASkipStmCG(ASkipStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ASkipStmCG} node from {@link ASkipStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStmCG} node
	*/
	public void outASkipStmCG(ASkipStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AReturnStmCG} node from {@link AReturnStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStmCG} node
	*/
	public void caseAReturnStmCG(AReturnStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAReturnStmCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAReturnStmCG(node, question);

	}


	/**
	* Called by the {@link AReturnStmCG} node from {@link AReturnStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStmCG} node
	*/
	public void inAReturnStmCG(AReturnStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AReturnStmCG} node from {@link AReturnStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStmCG} node
	*/
	public void outAReturnStmCG(AReturnStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AAbstractBodyStmCG} node from {@link AAbstractBodyStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbstractBodyStmCG} node
	*/
	public void caseAAbstractBodyStmCG(AAbstractBodyStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAbstractBodyStmCG(node, question);


		outAAbstractBodyStmCG(node, question);

	}


	/**
	* Called by the {@link AAbstractBodyStmCG} node from {@link AAbstractBodyStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbstractBodyStmCG} node
	*/
	public void inAAbstractBodyStmCG(AAbstractBodyStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AAbstractBodyStmCG} node from {@link AAbstractBodyStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbstractBodyStmCG} node
	*/
	public void outAAbstractBodyStmCG(AAbstractBodyStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AAssignmentStmCG} node from {@link AAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStmCG} node
	*/
	public void caseAAssignmentStmCG(AAssignmentStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAssignmentStmCG(node, question);

		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			node.getTarget().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAAssignmentStmCG(node, question);

	}


	/**
	* Called by the {@link AAssignmentStmCG} node from {@link AAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStmCG} node
	*/
	public void inAAssignmentStmCG(AAssignmentStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AAssignmentStmCG} node from {@link AAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStmCG} node
	*/
	public void outAAssignmentStmCG(AAssignmentStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ALocalAssignmentStmCG} node from {@link ALocalAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalAssignmentStmCG} node
	*/
	public void caseALocalAssignmentStmCG(ALocalAssignmentStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALocalAssignmentStmCG(node, question);

		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			node.getTarget().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outALocalAssignmentStmCG(node, question);

	}


	/**
	* Called by the {@link ALocalAssignmentStmCG} node from {@link ALocalAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalAssignmentStmCG} node
	*/
	public void inALocalAssignmentStmCG(ALocalAssignmentStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ALocalAssignmentStmCG} node from {@link ALocalAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalAssignmentStmCG} node
	*/
	public void outALocalAssignmentStmCG(ALocalAssignmentStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ALocalPatternAssignmentStmCG} node from {@link ALocalPatternAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalPatternAssignmentStmCG} node
	*/
	public void caseALocalPatternAssignmentStmCG(ALocalPatternAssignmentStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALocalPatternAssignmentStmCG(node, question);

		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			node.getTarget().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		if(node.getNextElementDecl() != null && !_visitedNodes.contains(node.getNextElementDecl())) 
		{
			node.getNextElementDecl().apply(this, question);
		}

		outALocalPatternAssignmentStmCG(node, question);

	}


	/**
	* Called by the {@link ALocalPatternAssignmentStmCG} node from {@link ALocalPatternAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalPatternAssignmentStmCG} node
	*/
	public void inALocalPatternAssignmentStmCG(ALocalPatternAssignmentStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ALocalPatternAssignmentStmCG} node from {@link ALocalPatternAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalPatternAssignmentStmCG} node
	*/
	public void outALocalPatternAssignmentStmCG(ALocalPatternAssignmentStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ABlockStmCG} node from {@link ABlockStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABlockStmCG} node
	*/
	public void caseABlockStmCG(ABlockStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABlockStmCG(node, question);

		{
			List<AVarDeclCG> copy = new ArrayList<AVarDeclCG>(node.getLocalDefs());
			for( AVarDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		{
			List<SStmCG> copy = new ArrayList<SStmCG>(node.getStatements());
			for( SStmCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outABlockStmCG(node, question);

	}


	/**
	* Called by the {@link ABlockStmCG} node from {@link ABlockStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABlockStmCG} node
	*/
	public void inABlockStmCG(ABlockStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ABlockStmCG} node from {@link ABlockStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABlockStmCG} node
	*/
	public void outABlockStmCG(ABlockStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ACallObjectStmCG} node from {@link ACallObjectStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStmCG} node
	*/
	public void caseACallObjectStmCG(ACallObjectStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACallObjectStmCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getDesignator() != null && !_visitedNodes.contains(node.getDesignator())) 
		{
			node.getDesignator().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outACallObjectStmCG(node, question);

	}


	/**
	* Called by the {@link ACallObjectStmCG} node from {@link ACallObjectStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStmCG} node
	*/
	public void inACallObjectStmCG(ACallObjectStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ACallObjectStmCG} node from {@link ACallObjectStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStmCG} node
	*/
	public void outACallObjectStmCG(ACallObjectStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ACallObjectExpStmCG} node from {@link ACallObjectExpStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectExpStmCG} node
	*/
	public void caseACallObjectExpStmCG(ACallObjectExpStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACallObjectExpStmCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getObj() != null && !_visitedNodes.contains(node.getObj())) 
		{
			node.getObj().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outACallObjectExpStmCG(node, question);

	}


	/**
	* Called by the {@link ACallObjectExpStmCG} node from {@link ACallObjectExpStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectExpStmCG} node
	*/
	public void inACallObjectExpStmCG(ACallObjectExpStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ACallObjectExpStmCG} node from {@link ACallObjectExpStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectExpStmCG} node
	*/
	public void outACallObjectExpStmCG(ACallObjectExpStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public void defaultInSCallStmCG(SCallStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public void defaultOutSCallStmCG(SCallStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public void defaultSCallStmCG(SCallStmCG node, Q question) throws AnalysisException
	{
		defaultSStmCG(node, question);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public void inSCallStmCG(SCallStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public void outSCallStmCG(SCallStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ANotImplementedStmCG} node from {@link ANotImplementedStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedStmCG} node
	*/
	public void caseANotImplementedStmCG(ANotImplementedStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANotImplementedStmCG(node, question);


		outANotImplementedStmCG(node, question);

	}


	/**
	* Called by the {@link ANotImplementedStmCG} node from {@link ANotImplementedStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedStmCG} node
	*/
	public void inANotImplementedStmCG(ANotImplementedStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ANotImplementedStmCG} node from {@link ANotImplementedStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedStmCG} node
	*/
	public void outANotImplementedStmCG(ANotImplementedStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AForIndexStmCG} node from {@link AForIndexStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStmCG} node
	*/
	public void caseAForIndexStmCG(AForIndexStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAForIndexStmCG(node, question);

		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			node.getFrom().apply(this, question);
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			node.getTo().apply(this, question);
		}
		if(node.getBy() != null && !_visitedNodes.contains(node.getBy())) 
		{
			node.getBy().apply(this, question);
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outAForIndexStmCG(node, question);

	}


	/**
	* Called by the {@link AForIndexStmCG} node from {@link AForIndexStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStmCG} node
	*/
	public void inAForIndexStmCG(AForIndexStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AForIndexStmCG} node from {@link AForIndexStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStmCG} node
	*/
	public void outAForIndexStmCG(AForIndexStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AForAllStmCG} node from {@link AForAllStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStmCG} node
	*/
	public void caseAForAllStmCG(AForAllStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAForAllStmCG(node, question);

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			node.getPattern().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outAForAllStmCG(node, question);

	}


	/**
	* Called by the {@link AForAllStmCG} node from {@link AForAllStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStmCG} node
	*/
	public void inAForAllStmCG(AForAllStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AForAllStmCG} node from {@link AForAllStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStmCG} node
	*/
	public void outAForAllStmCG(AForAllStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AWhileStmCG} node from {@link AWhileStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStmCG} node
	*/
	public void caseAWhileStmCG(AWhileStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAWhileStmCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outAWhileStmCG(node, question);

	}


	/**
	* Called by the {@link AWhileStmCG} node from {@link AWhileStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStmCG} node
	*/
	public void inAWhileStmCG(AWhileStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AWhileStmCG} node from {@link AWhileStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStmCG} node
	*/
	public void outAWhileStmCG(AWhileStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStStmCG} node from {@link ALetBeStStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStmCG} node
	*/
	public void caseALetBeStStmCG(ALetBeStStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALetBeStStmCG(node, question);

		if(node.getHeader() != null && !_visitedNodes.contains(node.getHeader())) 
		{
			node.getHeader().apply(this, question);
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			node.getStatement().apply(this, question);
		}

		outALetBeStStmCG(node, question);

	}


	/**
	* Called by the {@link ALetBeStStmCG} node from {@link ALetBeStStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStmCG} node
	*/
	public void inALetBeStStmCG(ALetBeStStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStStmCG} node from {@link ALetBeStStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStmCG} node
	*/
	public void outALetBeStStmCG(ALetBeStStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AThrowStmCG} node from {@link AThrowStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AThrowStmCG} node
	*/
	public void caseAThrowStmCG(AThrowStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAThrowStmCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAThrowStmCG(node, question);

	}


	/**
	* Called by the {@link AThrowStmCG} node from {@link AThrowStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AThrowStmCG} node
	*/
	public void inAThrowStmCG(AThrowStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AThrowStmCG} node from {@link AThrowStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AThrowStmCG} node
	*/
	public void outAThrowStmCG(AThrowStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AForLoopStmCG} node from {@link AForLoopStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForLoopStmCG} node
	*/
	public void caseAForLoopStmCG(AForLoopStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAForLoopStmCG(node, question);

		if(node.getInit() != null && !_visitedNodes.contains(node.getInit())) 
		{
			node.getInit().apply(this, question);
		}
		if(node.getCond() != null && !_visitedNodes.contains(node.getCond())) 
		{
			node.getCond().apply(this, question);
		}
		if(node.getInc() != null && !_visitedNodes.contains(node.getInc())) 
		{
			node.getInc().apply(this, question);
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outAForLoopStmCG(node, question);

	}


	/**
	* Called by the {@link AForLoopStmCG} node from {@link AForLoopStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForLoopStmCG} node
	*/
	public void inAForLoopStmCG(AForLoopStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AForLoopStmCG} node from {@link AForLoopStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForLoopStmCG} node
	*/
	public void outAForLoopStmCG(AForLoopStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AIncrementStmCG} node from {@link AIncrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIncrementStmCG} node
	*/
	public void caseAIncrementStmCG(AIncrementStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIncrementStmCG(node, question);

		if(node.getVar() != null && !_visitedNodes.contains(node.getVar())) 
		{
			node.getVar().apply(this, question);
		}

		outAIncrementStmCG(node, question);

	}


	/**
	* Called by the {@link AIncrementStmCG} node from {@link AIncrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIncrementStmCG} node
	*/
	public void inAIncrementStmCG(AIncrementStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AIncrementStmCG} node from {@link AIncrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIncrementStmCG} node
	*/
	public void outAIncrementStmCG(AIncrementStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ADecrementStmCG} node from {@link ADecrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ADecrementStmCG} node
	*/
	public void caseADecrementStmCG(ADecrementStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADecrementStmCG(node, question);

		if(node.getVar() != null && !_visitedNodes.contains(node.getVar())) 
		{
			node.getVar().apply(this, question);
		}

		outADecrementStmCG(node, question);

	}


	/**
	* Called by the {@link ADecrementStmCG} node from {@link ADecrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ADecrementStmCG} node
	*/
	public void inADecrementStmCG(ADecrementStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ADecrementStmCG} node from {@link ADecrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ADecrementStmCG} node
	*/
	public void outADecrementStmCG(ADecrementStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ARaiseErrorStmCG} node from {@link ARaiseErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ARaiseErrorStmCG} node
	*/
	public void caseARaiseErrorStmCG(ARaiseErrorStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARaiseErrorStmCG(node, question);

		if(node.getError() != null && !_visitedNodes.contains(node.getError())) 
		{
			node.getError().apply(this, question);
		}

		outARaiseErrorStmCG(node, question);

	}


	/**
	* Called by the {@link ARaiseErrorStmCG} node from {@link ARaiseErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ARaiseErrorStmCG} node
	*/
	public void inARaiseErrorStmCG(ARaiseErrorStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ARaiseErrorStmCG} node from {@link ARaiseErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ARaiseErrorStmCG} node
	*/
	public void outARaiseErrorStmCG(ARaiseErrorStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ACasesStmCG} node from {@link ACasesStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStmCG} node
	*/
	public void caseACasesStmCG(ACasesStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACasesStmCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		{
			List<ACaseAltStmStmCG> copy = new ArrayList<ACaseAltStmStmCG>(node.getCases());
			for( ACaseAltStmStmCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getOthers() != null && !_visitedNodes.contains(node.getOthers())) 
		{
			node.getOthers().apply(this, question);
		}

		outACasesStmCG(node, question);

	}


	/**
	* Called by the {@link ACasesStmCG} node from {@link ACasesStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStmCG} node
	*/
	public void inACasesStmCG(ACasesStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ACasesStmCG} node from {@link ACasesStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStmCG} node
	*/
	public void outACasesStmCG(ACasesStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public void defaultInSAltStmStmCG(SAltStmStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public void defaultOutSAltStmStmCG(SAltStmStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public void defaultSAltStmStmCG(SAltStmStmCG node, Q question) throws AnalysisException
	{
		defaultSStmCG(node, question);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public void inSAltStmStmCG(SAltStmStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public void outSAltStmStmCG(SAltStmStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AErrorStmCG} node from {@link AErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStmCG} node
	*/
	public void caseAErrorStmCG(AErrorStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAErrorStmCG(node, question);


		outAErrorStmCG(node, question);

	}


	/**
	* Called by the {@link AErrorStmCG} node from {@link AErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStmCG} node
	*/
	public void inAErrorStmCG(AErrorStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AErrorStmCG} node from {@link AErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStmCG} node
	*/
	public void outAErrorStmCG(AErrorStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AContinueStmCG} node from {@link AContinueStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AContinueStmCG} node
	*/
	public void caseAContinueStmCG(AContinueStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAContinueStmCG(node, question);


		outAContinueStmCG(node, question);

	}


	/**
	* Called by the {@link AContinueStmCG} node from {@link AContinueStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AContinueStmCG} node
	*/
	public void inAContinueStmCG(AContinueStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AContinueStmCG} node from {@link AContinueStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AContinueStmCG} node
	*/
	public void outAContinueStmCG(AContinueStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ABreakStmCG} node from {@link ABreakStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABreakStmCG} node
	*/
	public void caseABreakStmCG(ABreakStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABreakStmCG(node, question);


		outABreakStmCG(node, question);

	}


	/**
	* Called by the {@link ABreakStmCG} node from {@link ABreakStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABreakStmCG} node
	*/
	public void inABreakStmCG(ABreakStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ABreakStmCG} node from {@link ABreakStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABreakStmCG} node
	*/
	public void outABreakStmCG(ABreakStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AStartStmCG} node from {@link AStartStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartStmCG} node
	*/
	public void caseAStartStmCG(AStartStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAStartStmCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAStartStmCG(node, question);

	}


	/**
	* Called by the {@link AStartStmCG} node from {@link AStartStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartStmCG} node
	*/
	public void inAStartStmCG(AStartStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AStartStmCG} node from {@link AStartStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartStmCG} node
	*/
	public void outAStartStmCG(AStartStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AStartlistStmCG} node from {@link AStartlistStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartlistStmCG} node
	*/
	public void caseAStartlistStmCG(AStartlistStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAStartlistStmCG(node, question);

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAStartlistStmCG(node, question);

	}


	/**
	* Called by the {@link AStartlistStmCG} node from {@link AStartlistStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartlistStmCG} node
	*/
	public void inAStartlistStmCG(AStartlistStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AStartlistStmCG} node from {@link AStartlistStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartlistStmCG} node
	*/
	public void outAStartlistStmCG(AStartlistStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link ATryStmCG} node from {@link ATryStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ATryStmCG} node
	*/
	public void caseATryStmCG(ATryStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATryStmCG(node, question);

		if(node.getStm() != null && !_visitedNodes.contains(node.getStm())) 
		{
			node.getStm().apply(this, question);
		}
		{
			List<ACatchClauseDeclCG> copy = new ArrayList<ACatchClauseDeclCG>(node.getCatchClauses());
			for( ACatchClauseDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getFinally() != null && !_visitedNodes.contains(node.getFinally())) 
		{
			node.getFinally().apply(this, question);
		}

		outATryStmCG(node, question);

	}


	/**
	* Called by the {@link ATryStmCG} node from {@link ATryStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ATryStmCG} node
	*/
	public void inATryStmCG(ATryStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link ATryStmCG} node from {@link ATryStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ATryStmCG} node
	*/
	public void outATryStmCG(ATryStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link APeriodicStmCG} node from {@link APeriodicStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStmCG} node
	*/
	public void caseAPeriodicStmCG(APeriodicStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPeriodicStmCG(node, question);

		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAPeriodicStmCG(node, question);

	}


	/**
	* Called by the {@link APeriodicStmCG} node from {@link APeriodicStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStmCG} node
	*/
	public void inAPeriodicStmCG(APeriodicStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link APeriodicStmCG} node from {@link APeriodicStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStmCG} node
	*/
	public void outAPeriodicStmCG(APeriodicStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link AStackDeclStmCG} node from {@link AStackDeclStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStackDeclStmCG} node
	*/
	public void caseAStackDeclStmCG(AStackDeclStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAStackDeclStmCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAStackDeclStmCG(node, question);

	}


	/**
	* Called by the {@link AStackDeclStmCG} node from {@link AStackDeclStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStackDeclStmCG} node
	*/
	public void inAStackDeclStmCG(AStackDeclStmCG node, Q question) throws AnalysisException
	{
		defaultInSStmCG(node, question);
	}


	/**
	* Called by the {@link AStackDeclStmCG} node from {@link AStackDeclStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStackDeclStmCG} node
	*/
	public void outAStackDeclStmCG(AStackDeclStmCG node, Q question) throws AnalysisException
	{
		defaultOutSStmCG(node, question);
	}


	/**
	* Called by the {@link APlainCallStmCG} node from {@link APlainCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APlainCallStmCG} node
	*/
	public void caseAPlainCallStmCG(APlainCallStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPlainCallStmCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getClassType() != null && !_visitedNodes.contains(node.getClassType())) 
		{
			node.getClassType().apply(this, question);
		}

		outAPlainCallStmCG(node, question);

	}


	/**
	* Called by the {@link APlainCallStmCG} node from {@link APlainCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APlainCallStmCG} node
	*/
	public void inAPlainCallStmCG(APlainCallStmCG node, Q question) throws AnalysisException
	{
		defaultInSCallStmCG(node, question);
	}


	/**
	* Called by the {@link APlainCallStmCG} node from {@link APlainCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APlainCallStmCG} node
	*/
	public void outAPlainCallStmCG(APlainCallStmCG node, Q question) throws AnalysisException
	{
		defaultOutSCallStmCG(node, question);
	}


	/**
	* Called by the {@link ASuperCallStmCG} node from {@link ASuperCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperCallStmCG} node
	*/
	public void caseASuperCallStmCG(ASuperCallStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASuperCallStmCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outASuperCallStmCG(node, question);

	}


	/**
	* Called by the {@link ASuperCallStmCG} node from {@link ASuperCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperCallStmCG} node
	*/
	public void inASuperCallStmCG(ASuperCallStmCG node, Q question) throws AnalysisException
	{
		defaultInSCallStmCG(node, question);
	}


	/**
	* Called by the {@link ASuperCallStmCG} node from {@link ASuperCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperCallStmCG} node
	*/
	public void outASuperCallStmCG(ASuperCallStmCG node, Q question) throws AnalysisException
	{
		defaultOutSCallStmCG(node, question);
	}


	/**
	* Called by the {@link ACaseAltStmStmCG} node from {@link ACaseAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltStmStmCG} node
	*/
	public void caseACaseAltStmStmCG(ACaseAltStmStmCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACaseAltStmStmCG(node, question);

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			node.getPattern().apply(this, question);
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			node.getResult().apply(this, question);
		}
		if(node.getPatternType() != null && !_visitedNodes.contains(node.getPatternType())) 
		{
			node.getPatternType().apply(this, question);
		}

		outACaseAltStmStmCG(node, question);

	}


	/**
	* Called by the {@link ACaseAltStmStmCG} node from {@link ACaseAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltStmStmCG} node
	*/
	public void inACaseAltStmStmCG(ACaseAltStmStmCG node, Q question) throws AnalysisException
	{
		defaultInSAltStmStmCG(node, question);
	}


	/**
	* Called by the {@link ACaseAltStmStmCG} node from {@link ACaseAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltStmStmCG} node
	*/
	public void outACaseAltStmStmCG(ACaseAltStmStmCG node, Q question) throws AnalysisException
	{
		defaultOutSAltStmStmCG(node, question);
	}


	/**
	* Called by the {@link AHeaderLetBeStCG} node from {@link AHeaderLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeaderLetBeStCG} node
	*/
	public void caseAHeaderLetBeStCG(AHeaderLetBeStCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAHeaderLetBeStCG(node, question);

		if(node.getBinding() != null && !_visitedNodes.contains(node.getBinding())) 
		{
			node.getBinding().apply(this, question);
		}
		if(node.getSuchThat() != null && !_visitedNodes.contains(node.getSuchThat())) 
		{
			node.getSuchThat().apply(this, question);
		}

		outAHeaderLetBeStCG(node, question);

	}


	/**
	* Called by the {@link AHeaderLetBeStCG} node from {@link AHeaderLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeaderLetBeStCG} node
	*/
	public void inAHeaderLetBeStCG(AHeaderLetBeStCG node, Q question) throws AnalysisException
	{
		defaultInSLetBeStCG(node, question);
	}


	/**
	* Called by the {@link AHeaderLetBeStCG} node from {@link AHeaderLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeaderLetBeStCG} node
	*/
	public void outAHeaderLetBeStCG(AHeaderLetBeStCG node, Q question) throws AnalysisException
	{
		defaultOutSLetBeStCG(node, question);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public void defaultInSUnaryExpCG(SUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public void defaultOutSUnaryExpCG(SUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public void defaultSUnaryExpCG(SUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public void inSUnaryExpCG(SUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public void outSUnaryExpCG(SUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public void defaultInSBinaryExpCG(SBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public void defaultOutSBinaryExpCG(SBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public void defaultSBinaryExpCG(SBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public void inSBinaryExpCG(SBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public void outSBinaryExpCG(SBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AFieldExpCG} node from {@link AFieldExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExpCG} node
	*/
	public void caseAFieldExpCG(AFieldExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFieldExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			node.getObject().apply(this, question);
		}

		outAFieldExpCG(node, question);

	}


	/**
	* Called by the {@link AFieldExpCG} node from {@link AFieldExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExpCG} node
	*/
	public void inAFieldExpCG(AFieldExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AFieldExpCG} node from {@link AFieldExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExpCG} node
	*/
	public void outAFieldExpCG(AFieldExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AApplyExpCG} node from {@link AApplyExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpCG} node
	*/
	public void caseAApplyExpCG(AApplyExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAApplyExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getRoot() != null && !_visitedNodes.contains(node.getRoot())) 
		{
			node.getRoot().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAApplyExpCG(node, question);

	}


	/**
	* Called by the {@link AApplyExpCG} node from {@link AApplyExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpCG} node
	*/
	public void inAApplyExpCG(AApplyExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AApplyExpCG} node from {@link AApplyExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpCG} node
	*/
	public void outAApplyExpCG(AApplyExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ANewExpCG} node from {@link ANewExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewExpCG} node
	*/
	public void caseANewExpCG(ANewExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANewExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getName() != null && !_visitedNodes.contains(node.getName())) 
		{
			node.getName().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outANewExpCG(node, question);

	}


	/**
	* Called by the {@link ANewExpCG} node from {@link ANewExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewExpCG} node
	*/
	public void inANewExpCG(ANewExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ANewExpCG} node from {@link ANewExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewExpCG} node
	*/
	public void outANewExpCG(ANewExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public void defaultInSVarExpCG(SVarExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public void defaultOutSVarExpCG(SVarExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public void defaultSVarExpCG(SVarExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public void inSVarExpCG(SVarExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public void outSVarExpCG(SVarExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AInstanceofExpCG} node from {@link AInstanceofExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceofExpCG} node
	*/
	public void caseAInstanceofExpCG(AInstanceofExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAInstanceofExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getCheckedType() != null && !_visitedNodes.contains(node.getCheckedType())) 
		{
			node.getCheckedType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAInstanceofExpCG(node, question);

	}


	/**
	* Called by the {@link AInstanceofExpCG} node from {@link AInstanceofExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceofExpCG} node
	*/
	public void inAInstanceofExpCG(AInstanceofExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AInstanceofExpCG} node from {@link AInstanceofExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceofExpCG} node
	*/
	public void outAInstanceofExpCG(AInstanceofExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public void defaultInSIsExpCG(SIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public void defaultOutSIsExpCG(SIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public void defaultSIsExpCG(SIsExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public void inSIsExpCG(SIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public void outSIsExpCG(SIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public void defaultInSLiteralExpCG(SLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public void defaultOutSLiteralExpCG(SLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public void defaultSLiteralExpCG(SLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public void inSLiteralExpCG(SLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public void outSLiteralExpCG(SLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ASelfExpCG} node from {@link ASelfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExpCG} node
	*/
	public void caseASelfExpCG(ASelfExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASelfExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outASelfExpCG(node, question);

	}


	/**
	* Called by the {@link ASelfExpCG} node from {@link ASelfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExpCG} node
	*/
	public void inASelfExpCG(ASelfExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ASelfExpCG} node from {@link ASelfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExpCG} node
	*/
	public void outASelfExpCG(ASelfExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ANullExpCG} node from {@link ANullExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullExpCG} node
	*/
	public void caseANullExpCG(ANullExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANullExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outANullExpCG(node, question);

	}


	/**
	* Called by the {@link ANullExpCG} node from {@link ANullExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullExpCG} node
	*/
	public void inANullExpCG(ANullExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ANullExpCG} node from {@link ANullExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullExpCG} node
	*/
	public void outANullExpCG(ANullExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ALetDefExpCG} node from {@link ALetDefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExpCG} node
	*/
	public void caseALetDefExpCG(ALetDefExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALetDefExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<AVarDeclCG> copy = new ArrayList<AVarDeclCG>(node.getLocalDefs());
			for( AVarDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outALetDefExpCG(node, question);

	}


	/**
	* Called by the {@link ALetDefExpCG} node from {@link ALetDefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExpCG} node
	*/
	public void inALetDefExpCG(ALetDefExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ALetDefExpCG} node from {@link ALetDefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExpCG} node
	*/
	public void outALetDefExpCG(ALetDefExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AMethodInstantiationExpCG} node from {@link AMethodInstantiationExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodInstantiationExpCG} node
	*/
	public void caseAMethodInstantiationExpCG(AMethodInstantiationExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMethodInstantiationExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getFunc() != null && !_visitedNodes.contains(node.getFunc())) 
		{
			node.getFunc().apply(this, question);
		}
		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getActualTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAMethodInstantiationExpCG(node, question);

	}


	/**
	* Called by the {@link AMethodInstantiationExpCG} node from {@link AMethodInstantiationExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodInstantiationExpCG} node
	*/
	public void inAMethodInstantiationExpCG(AMethodInstantiationExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AMethodInstantiationExpCG} node from {@link AMethodInstantiationExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodInstantiationExpCG} node
	*/
	public void outAMethodInstantiationExpCG(AMethodInstantiationExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleExpCG} node from {@link ATupleExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExpCG} node
	*/
	public void caseATupleExpCG(ATupleExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATupleExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getTupleType() != null && !_visitedNodes.contains(node.getTupleType())) 
		{
			node.getTupleType().apply(this, question);
		}

		outATupleExpCG(node, question);

	}


	/**
	* Called by the {@link ATupleExpCG} node from {@link ATupleExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExpCG} node
	*/
	public void inATupleExpCG(ATupleExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleExpCG} node from {@link ATupleExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExpCG} node
	*/
	public void outATupleExpCG(ATupleExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AFieldNumberExpCG} node from {@link AFieldNumberExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExpCG} node
	*/
	public void caseAFieldNumberExpCG(AFieldNumberExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFieldNumberExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getTuple() != null && !_visitedNodes.contains(node.getTuple())) 
		{
			node.getTuple().apply(this, question);
		}

		outAFieldNumberExpCG(node, question);

	}


	/**
	* Called by the {@link AFieldNumberExpCG} node from {@link AFieldNumberExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExpCG} node
	*/
	public void inAFieldNumberExpCG(AFieldNumberExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AFieldNumberExpCG} node from {@link AFieldNumberExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExpCG} node
	*/
	public void outAFieldNumberExpCG(AFieldNumberExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleSizeExpCG} node from {@link ATupleSizeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleSizeExpCG} node
	*/
	public void caseATupleSizeExpCG(ATupleSizeExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATupleSizeExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getTuple() != null && !_visitedNodes.contains(node.getTuple())) 
		{
			node.getTuple().apply(this, question);
		}

		outATupleSizeExpCG(node, question);

	}


	/**
	* Called by the {@link ATupleSizeExpCG} node from {@link ATupleSizeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleSizeExpCG} node
	*/
	public void inATupleSizeExpCG(ATupleSizeExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleSizeExpCG} node from {@link ATupleSizeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleSizeExpCG} node
	*/
	public void outATupleSizeExpCG(ATupleSizeExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ATernaryIfExpCG} node from {@link ATernaryIfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATernaryIfExpCG} node
	*/
	public void caseATernaryIfExpCG(ATernaryIfExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATernaryIfExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getCondition() != null && !_visitedNodes.contains(node.getCondition())) 
		{
			node.getCondition().apply(this, question);
		}
		if(node.getTrueValue() != null && !_visitedNodes.contains(node.getTrueValue())) 
		{
			node.getTrueValue().apply(this, question);
		}
		if(node.getFalseValue() != null && !_visitedNodes.contains(node.getFalseValue())) 
		{
			node.getFalseValue().apply(this, question);
		}

		outATernaryIfExpCG(node, question);

	}


	/**
	* Called by the {@link ATernaryIfExpCG} node from {@link ATernaryIfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATernaryIfExpCG} node
	*/
	public void inATernaryIfExpCG(ATernaryIfExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ATernaryIfExpCG} node from {@link ATernaryIfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATernaryIfExpCG} node
	*/
	public void outATernaryIfExpCG(ATernaryIfExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AMapletExpCG} node from {@link AMapletExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExpCG} node
	*/
	public void caseAMapletExpCG(AMapletExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapletExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAMapletExpCG(node, question);

	}


	/**
	* Called by the {@link AMapletExpCG} node from {@link AMapletExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExpCG} node
	*/
	public void inAMapletExpCG(AMapletExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AMapletExpCG} node from {@link AMapletExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExpCG} node
	*/
	public void outAMapletExpCG(AMapletExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStExpCG} node from {@link ALetBeStExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExpCG} node
	*/
	public void caseALetBeStExpCG(ALetBeStExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALetBeStExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getHeader() != null && !_visitedNodes.contains(node.getHeader())) 
		{
			node.getHeader().apply(this, question);
		}
		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			node.getValue().apply(this, question);
		}

		outALetBeStExpCG(node, question);

	}


	/**
	* Called by the {@link ALetBeStExpCG} node from {@link ALetBeStExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExpCG} node
	*/
	public void inALetBeStExpCG(ALetBeStExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStExpCG} node from {@link ALetBeStExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExpCG} node
	*/
	public void outALetBeStExpCG(ALetBeStExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public void defaultInSSeqExpCG(SSeqExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public void defaultOutSSeqExpCG(SSeqExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public void defaultSSeqExpCG(SSeqExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public void inSSeqExpCG(SSeqExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public void outSSeqExpCG(SSeqExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public void defaultInSSetExpCG(SSetExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public void defaultOutSSetExpCG(SSetExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public void defaultSSetExpCG(SSetExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public void inSSetExpCG(SSetExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public void outSSetExpCG(SSetExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public void defaultInSMapExpCG(SMapExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public void defaultOutSMapExpCG(SMapExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public void defaultSMapExpCG(SMapExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public void inSMapExpCG(SMapExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public void outSMapExpCG(SMapExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AMkBasicExpCG} node from {@link AMkBasicExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExpCG} node
	*/
	public void caseAMkBasicExpCG(AMkBasicExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMkBasicExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getArg() != null && !_visitedNodes.contains(node.getArg())) 
		{
			node.getArg().apply(this, question);
		}

		outAMkBasicExpCG(node, question);

	}


	/**
	* Called by the {@link AMkBasicExpCG} node from {@link AMkBasicExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExpCG} node
	*/
	public void inAMkBasicExpCG(AMkBasicExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AMkBasicExpCG} node from {@link AMkBasicExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExpCG} node
	*/
	public void outAMkBasicExpCG(AMkBasicExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ARecordModExpCG} node from {@link ARecordModExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModExpCG} node
	*/
	public void caseARecordModExpCG(ARecordModExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARecordModExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getRec() != null && !_visitedNodes.contains(node.getRec())) 
		{
			node.getRec().apply(this, question);
		}
		if(node.getRecType() != null && !_visitedNodes.contains(node.getRecType())) 
		{
			node.getRecType().apply(this, question);
		}
		{
			List<ARecordModifierCG> copy = new ArrayList<ARecordModifierCG>(node.getModifiers());
			for( ARecordModifierCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outARecordModExpCG(node, question);

	}


	/**
	* Called by the {@link ARecordModExpCG} node from {@link ARecordModExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModExpCG} node
	*/
	public void inARecordModExpCG(ARecordModExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ARecordModExpCG} node from {@link ARecordModExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModExpCG} node
	*/
	public void outARecordModExpCG(ARecordModExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public void defaultInSQuantifierExpCG(SQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public void defaultOutSQuantifierExpCG(SQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public void defaultSQuantifierExpCG(SQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public void inSQuantifierExpCG(SQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public void outSQuantifierExpCG(SQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link APreIncExpCG} node from {@link APreIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreIncExpCG} node
	*/
	public void caseAPreIncExpCG(APreIncExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPreIncExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAPreIncExpCG(node, question);

	}


	/**
	* Called by the {@link APreIncExpCG} node from {@link APreIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreIncExpCG} node
	*/
	public void inAPreIncExpCG(APreIncExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link APreIncExpCG} node from {@link APreIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreIncExpCG} node
	*/
	public void outAPreIncExpCG(APreIncExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link APreDecExpCG} node from {@link APreDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreDecExpCG} node
	*/
	public void caseAPreDecExpCG(APreDecExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPreDecExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAPreDecExpCG(node, question);

	}


	/**
	* Called by the {@link APreDecExpCG} node from {@link APreDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreDecExpCG} node
	*/
	public void inAPreDecExpCG(APreDecExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link APreDecExpCG} node from {@link APreDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreDecExpCG} node
	*/
	public void outAPreDecExpCG(APreDecExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link APostIncExpCG} node from {@link APostIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostIncExpCG} node
	*/
	public void caseAPostIncExpCG(APostIncExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPostIncExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAPostIncExpCG(node, question);

	}


	/**
	* Called by the {@link APostIncExpCG} node from {@link APostIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostIncExpCG} node
	*/
	public void inAPostIncExpCG(APostIncExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link APostIncExpCG} node from {@link APostIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostIncExpCG} node
	*/
	public void outAPostIncExpCG(APostIncExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link APostDecExpCG} node from {@link APostDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostDecExpCG} node
	*/
	public void caseAPostDecExpCG(APostDecExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPostDecExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAPostDecExpCG(node, question);

	}


	/**
	* Called by the {@link APostDecExpCG} node from {@link APostDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostDecExpCG} node
	*/
	public void inAPostDecExpCG(APostDecExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link APostDecExpCG} node from {@link APostDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostDecExpCG} node
	*/
	public void outAPostDecExpCG(APostDecExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ADeRefExpCG} node from {@link ADeRefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADeRefExpCG} node
	*/
	public void caseADeRefExpCG(ADeRefExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADeRefExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outADeRefExpCG(node, question);

	}


	/**
	* Called by the {@link ADeRefExpCG} node from {@link ADeRefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADeRefExpCG} node
	*/
	public void inADeRefExpCG(ADeRefExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ADeRefExpCG} node from {@link ADeRefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADeRefExpCG} node
	*/
	public void outADeRefExpCG(ADeRefExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public void defaultInSRuntimeErrorExpCG(SRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public void defaultOutSRuntimeErrorExpCG(SRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public void defaultSRuntimeErrorExpCG(SRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public void inSRuntimeErrorExpCG(SRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public void outSRuntimeErrorExpCG(SRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AExternalExpCG} node from {@link AExternalExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalExpCG} node
	*/
	public void caseAExternalExpCG(AExternalExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAExternalExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAExternalExpCG(node, question);

	}


	/**
	* Called by the {@link AExternalExpCG} node from {@link AExternalExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalExpCG} node
	*/
	public void inAExternalExpCG(AExternalExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AExternalExpCG} node from {@link AExternalExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalExpCG} node
	*/
	public void outAExternalExpCG(AExternalExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ATypeArgExpCG} node from {@link ATypeArgExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeArgExpCG} node
	*/
	public void caseATypeArgExpCG(ATypeArgExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATypeArgExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outATypeArgExpCG(node, question);

	}


	/**
	* Called by the {@link ATypeArgExpCG} node from {@link ATypeArgExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeArgExpCG} node
	*/
	public void inATypeArgExpCG(ATypeArgExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ATypeArgExpCG} node from {@link ATypeArgExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeArgExpCG} node
	*/
	public void outATypeArgExpCG(ATypeArgExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ALambdaExpCG} node from {@link ALambdaExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExpCG} node
	*/
	public void caseALambdaExpCG(ALambdaExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALambdaExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<AFormalParamLocalParamCG> copy = new ArrayList<AFormalParamLocalParamCG>(node.getParams());
			for( AFormalParamLocalParamCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outALambdaExpCG(node, question);

	}


	/**
	* Called by the {@link ALambdaExpCG} node from {@link ALambdaExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExpCG} node
	*/
	public void inALambdaExpCG(ALambdaExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ALambdaExpCG} node from {@link ALambdaExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExpCG} node
	*/
	public void outALambdaExpCG(ALambdaExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AAnonymousClassExpCG} node from {@link AAnonymousClassExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAnonymousClassExpCG} node
	*/
	public void caseAAnonymousClassExpCG(AAnonymousClassExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAnonymousClassExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethods());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAAnonymousClassExpCG(node, question);

	}


	/**
	* Called by the {@link AAnonymousClassExpCG} node from {@link AAnonymousClassExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAnonymousClassExpCG} node
	*/
	public void inAAnonymousClassExpCG(AAnonymousClassExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AAnonymousClassExpCG} node from {@link AAnonymousClassExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAnonymousClassExpCG} node
	*/
	public void outAAnonymousClassExpCG(AAnonymousClassExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ANotImplementedExpCG} node from {@link ANotImplementedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedExpCG} node
	*/
	public void caseANotImplementedExpCG(ANotImplementedExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANotImplementedExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outANotImplementedExpCG(node, question);

	}


	/**
	* Called by the {@link ANotImplementedExpCG} node from {@link ANotImplementedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedExpCG} node
	*/
	public void inANotImplementedExpCG(ANotImplementedExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ANotImplementedExpCG} node from {@link ANotImplementedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedExpCG} node
	*/
	public void outANotImplementedExpCG(ANotImplementedExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AUndefinedExpCG} node from {@link AUndefinedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExpCG} node
	*/
	public void caseAUndefinedExpCG(AUndefinedExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAUndefinedExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAUndefinedExpCG(node, question);

	}


	/**
	* Called by the {@link AUndefinedExpCG} node from {@link AUndefinedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExpCG} node
	*/
	public void inAUndefinedExpCG(AUndefinedExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AUndefinedExpCG} node from {@link AUndefinedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExpCG} node
	*/
	public void outAUndefinedExpCG(AUndefinedExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AThreadIdExpCG} node from {@link AThreadIdExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExpCG} node
	*/
	public void caseAThreadIdExpCG(AThreadIdExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAThreadIdExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAThreadIdExpCG(node, question);

	}


	/**
	* Called by the {@link AThreadIdExpCG} node from {@link AThreadIdExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExpCG} node
	*/
	public void inAThreadIdExpCG(AThreadIdExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AThreadIdExpCG} node from {@link AThreadIdExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExpCG} node
	*/
	public void outAThreadIdExpCG(AThreadIdExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleCompatibilityExpCG} node from {@link ATupleCompatibilityExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleCompatibilityExpCG} node
	*/
	public void caseATupleCompatibilityExpCG(ATupleCompatibilityExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATupleCompatibilityExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getTuple() != null && !_visitedNodes.contains(node.getTuple())) 
		{
			node.getTuple().apply(this, question);
		}
		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outATupleCompatibilityExpCG(node, question);

	}


	/**
	* Called by the {@link ATupleCompatibilityExpCG} node from {@link ATupleCompatibilityExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleCompatibilityExpCG} node
	*/
	public void inATupleCompatibilityExpCG(ATupleCompatibilityExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleCompatibilityExpCG} node from {@link ATupleCompatibilityExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleCompatibilityExpCG} node
	*/
	public void outATupleCompatibilityExpCG(ATupleCompatibilityExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ACasesExpCG} node from {@link ACasesExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExpCG} node
	*/
	public void caseACasesExpCG(ACasesExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACasesExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		{
			List<ACaseAltExpExpCG> copy = new ArrayList<ACaseAltExpExpCG>(node.getCases());
			for( ACaseAltExpExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getOthers() != null && !_visitedNodes.contains(node.getOthers())) 
		{
			node.getOthers().apply(this, question);
		}

		outACasesExpCG(node, question);

	}


	/**
	* Called by the {@link ACasesExpCG} node from {@link ACasesExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExpCG} node
	*/
	public void inACasesExpCG(ACasesExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ACasesExpCG} node from {@link ACasesExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExpCG} node
	*/
	public void outACasesExpCG(ACasesExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public void defaultInSAltExpExpCG(SAltExpExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public void defaultOutSAltExpExpCG(SAltExpExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public void defaultSAltExpExpCG(SAltExpExpCG node, Q question) throws AnalysisException
	{
		defaultSExpCG(node, question);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public void inSAltExpExpCG(SAltExpExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public void outSAltExpExpCG(SAltExpExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ASubSeqExpCG} node from {@link ASubSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubSeqExpCG} node
	*/
	public void caseASubSeqExpCG(ASubSeqExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASubSeqExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getSeq() != null && !_visitedNodes.contains(node.getSeq())) 
		{
			node.getSeq().apply(this, question);
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			node.getFrom().apply(this, question);
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			node.getTo().apply(this, question);
		}

		outASubSeqExpCG(node, question);

	}


	/**
	* Called by the {@link ASubSeqExpCG} node from {@link ASubSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubSeqExpCG} node
	*/
	public void inASubSeqExpCG(ASubSeqExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ASubSeqExpCG} node from {@link ASubSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubSeqExpCG} node
	*/
	public void outASubSeqExpCG(ASubSeqExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AHistoryExpCG} node from {@link AHistoryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExpCG} node
	*/
	public void caseAHistoryExpCG(AHistoryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAHistoryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getSentinelType() != null && !_visitedNodes.contains(node.getSentinelType())) 
		{
			node.getSentinelType().apply(this, question);
		}

		outAHistoryExpCG(node, question);

	}


	/**
	* Called by the {@link AHistoryExpCG} node from {@link AHistoryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExpCG} node
	*/
	public void inAHistoryExpCG(AHistoryExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AHistoryExpCG} node from {@link AHistoryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExpCG} node
	*/
	public void outAHistoryExpCG(AHistoryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ATimeExpCG} node from {@link ATimeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExpCG} node
	*/
	public void caseATimeExpCG(ATimeExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATimeExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outATimeExpCG(node, question);

	}


	/**
	* Called by the {@link ATimeExpCG} node from {@link ATimeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExpCG} node
	*/
	public void inATimeExpCG(ATimeExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link ATimeExpCG} node from {@link ATimeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExpCG} node
	*/
	public void outATimeExpCG(ATimeExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link AAssignExpExpCG} node from {@link AAssignExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignExpExpCG} node
	*/
	public void caseAAssignExpExpCG(AAssignExpExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAssignExpExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			node.getTarget().apply(this, question);
		}
		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			node.getValue().apply(this, question);
		}

		outAAssignExpExpCG(node, question);

	}


	/**
	* Called by the {@link AAssignExpExpCG} node from {@link AAssignExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignExpExpCG} node
	*/
	public void inAAssignExpExpCG(AAssignExpExpCG node, Q question) throws AnalysisException
	{
		defaultInSExpCG(node, question);
	}


	/**
	* Called by the {@link AAssignExpExpCG} node from {@link AAssignExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignExpExpCG} node
	*/
	public void outAAssignExpExpCG(AAssignExpExpCG node, Q question) throws AnalysisException
	{
		defaultOutSExpCG(node, question);
	}


	/**
	* Called by the {@link ARecordModifierCG} node from {@link ARecordModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifierCG} node
	*/
	public void caseARecordModifierCG(ARecordModifierCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARecordModifierCG(node, question);

		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			node.getValue().apply(this, question);
		}

		outARecordModifierCG(node, question);

	}


	/**
	* Called by the {@link ARecordModifierCG} node from {@link ARecordModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifierCG} node
	*/
	public void inARecordModifierCG(ARecordModifierCG node, Q question) throws AnalysisException
	{
		defaultInSModifierCG(node, question);
	}


	/**
	* Called by the {@link ARecordModifierCG} node from {@link ARecordModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifierCG} node
	*/
	public void outARecordModifierCG(ARecordModifierCG node, Q question) throws AnalysisException
	{
		defaultOutSModifierCG(node, question);
	}


	/**
	* Called by the {@link ABoolIsExpCG} node from {@link ABoolIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolIsExpCG} node
	*/
	public void caseABoolIsExpCG(ABoolIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABoolIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outABoolIsExpCG(node, question);

	}


	/**
	* Called by the {@link ABoolIsExpCG} node from {@link ABoolIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolIsExpCG} node
	*/
	public void inABoolIsExpCG(ABoolIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ABoolIsExpCG} node from {@link ABoolIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolIsExpCG} node
	*/
	public void outABoolIsExpCG(ABoolIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ANatIsExpCG} node from {@link ANatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatIsExpCG} node
	*/
	public void caseANatIsExpCG(ANatIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANatIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outANatIsExpCG(node, question);

	}


	/**
	* Called by the {@link ANatIsExpCG} node from {@link ANatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatIsExpCG} node
	*/
	public void inANatIsExpCG(ANatIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ANatIsExpCG} node from {@link ANatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatIsExpCG} node
	*/
	public void outANatIsExpCG(ANatIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ANat1IsExpCG} node from {@link ANat1IsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1IsExpCG} node
	*/
	public void caseANat1IsExpCG(ANat1IsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANat1IsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outANat1IsExpCG(node, question);

	}


	/**
	* Called by the {@link ANat1IsExpCG} node from {@link ANat1IsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1IsExpCG} node
	*/
	public void inANat1IsExpCG(ANat1IsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ANat1IsExpCG} node from {@link ANat1IsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1IsExpCG} node
	*/
	public void outANat1IsExpCG(ANat1IsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link AIntIsExpCG} node from {@link AIntIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntIsExpCG} node
	*/
	public void caseAIntIsExpCG(AIntIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIntIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAIntIsExpCG(node, question);

	}


	/**
	* Called by the {@link AIntIsExpCG} node from {@link AIntIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntIsExpCG} node
	*/
	public void inAIntIsExpCG(AIntIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link AIntIsExpCG} node from {@link AIntIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntIsExpCG} node
	*/
	public void outAIntIsExpCG(AIntIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ARatIsExpCG} node from {@link ARatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatIsExpCG} node
	*/
	public void caseARatIsExpCG(ARatIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARatIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outARatIsExpCG(node, question);

	}


	/**
	* Called by the {@link ARatIsExpCG} node from {@link ARatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatIsExpCG} node
	*/
	public void inARatIsExpCG(ARatIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ARatIsExpCG} node from {@link ARatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatIsExpCG} node
	*/
	public void outARatIsExpCG(ARatIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ARealIsExpCG} node from {@link ARealIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealIsExpCG} node
	*/
	public void caseARealIsExpCG(ARealIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARealIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outARealIsExpCG(node, question);

	}


	/**
	* Called by the {@link ARealIsExpCG} node from {@link ARealIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealIsExpCG} node
	*/
	public void inARealIsExpCG(ARealIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ARealIsExpCG} node from {@link ARealIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealIsExpCG} node
	*/
	public void outARealIsExpCG(ARealIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ACharIsExpCG} node from {@link ACharIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharIsExpCG} node
	*/
	public void caseACharIsExpCG(ACharIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACharIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outACharIsExpCG(node, question);

	}


	/**
	* Called by the {@link ACharIsExpCG} node from {@link ACharIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharIsExpCG} node
	*/
	public void inACharIsExpCG(ACharIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ACharIsExpCG} node from {@link ACharIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharIsExpCG} node
	*/
	public void outACharIsExpCG(ACharIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ATokenIsExpCG} node from {@link ATokenIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenIsExpCG} node
	*/
	public void caseATokenIsExpCG(ATokenIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATokenIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outATokenIsExpCG(node, question);

	}


	/**
	* Called by the {@link ATokenIsExpCG} node from {@link ATokenIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenIsExpCG} node
	*/
	public void inATokenIsExpCG(ATokenIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ATokenIsExpCG} node from {@link ATokenIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenIsExpCG} node
	*/
	public void outATokenIsExpCG(ATokenIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleIsExpCG} node from {@link ATupleIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleIsExpCG} node
	*/
	public void caseATupleIsExpCG(ATupleIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATupleIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		if(node.getCheckedType() != null && !_visitedNodes.contains(node.getCheckedType())) 
		{
			node.getCheckedType().apply(this, question);
		}

		outATupleIsExpCG(node, question);

	}


	/**
	* Called by the {@link ATupleIsExpCG} node from {@link ATupleIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleIsExpCG} node
	*/
	public void inATupleIsExpCG(ATupleIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ATupleIsExpCG} node from {@link ATupleIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleIsExpCG} node
	*/
	public void outATupleIsExpCG(ATupleIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link AGeneralIsExpCG} node from {@link AGeneralIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGeneralIsExpCG} node
	*/
	public void caseAGeneralIsExpCG(AGeneralIsExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAGeneralIsExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}
		if(node.getCheckedType() != null && !_visitedNodes.contains(node.getCheckedType())) 
		{
			node.getCheckedType().apply(this, question);
		}

		outAGeneralIsExpCG(node, question);

	}


	/**
	* Called by the {@link AGeneralIsExpCG} node from {@link AGeneralIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGeneralIsExpCG} node
	*/
	public void inAGeneralIsExpCG(AGeneralIsExpCG node, Q question) throws AnalysisException
	{
		defaultInSIsExpCG(node, question);
	}


	/**
	* Called by the {@link AGeneralIsExpCG} node from {@link AGeneralIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGeneralIsExpCG} node
	*/
	public void outAGeneralIsExpCG(AGeneralIsExpCG node, Q question) throws AnalysisException
	{
		defaultOutSIsExpCG(node, question);
	}


	/**
	* Called by the {@link ACaseAltExpExpCG} node from {@link ACaseAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltExpExpCG} node
	*/
	public void caseACaseAltExpExpCG(ACaseAltExpExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACaseAltExpExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			node.getPattern().apply(this, question);
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			node.getResult().apply(this, question);
		}
		if(node.getPatternType() != null && !_visitedNodes.contains(node.getPatternType())) 
		{
			node.getPatternType().apply(this, question);
		}

		outACaseAltExpExpCG(node, question);

	}


	/**
	* Called by the {@link ACaseAltExpExpCG} node from {@link ACaseAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltExpExpCG} node
	*/
	public void inACaseAltExpExpCG(ACaseAltExpExpCG node, Q question) throws AnalysisException
	{
		defaultInSAltExpExpCG(node, question);
	}


	/**
	* Called by the {@link ACaseAltExpExpCG} node from {@link ACaseAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltExpExpCG} node
	*/
	public void outACaseAltExpExpCG(ACaseAltExpExpCG node, Q question) throws AnalysisException
	{
		defaultOutSAltExpExpCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStNoBindingRuntimeErrorExpCG} node from {@link ALetBeStNoBindingRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStNoBindingRuntimeErrorExpCG} node
	*/
	public void caseALetBeStNoBindingRuntimeErrorExpCG(ALetBeStNoBindingRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALetBeStNoBindingRuntimeErrorExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outALetBeStNoBindingRuntimeErrorExpCG(node, question);

	}


	/**
	* Called by the {@link ALetBeStNoBindingRuntimeErrorExpCG} node from {@link ALetBeStNoBindingRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStNoBindingRuntimeErrorExpCG} node
	*/
	public void inALetBeStNoBindingRuntimeErrorExpCG(ALetBeStNoBindingRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultInSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStNoBindingRuntimeErrorExpCG} node from {@link ALetBeStNoBindingRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStNoBindingRuntimeErrorExpCG} node
	*/
	public void outALetBeStNoBindingRuntimeErrorExpCG(ALetBeStNoBindingRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultOutSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link APatternMatchRuntimeErrorExpCG} node from {@link APatternMatchRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APatternMatchRuntimeErrorExpCG} node
	*/
	public void caseAPatternMatchRuntimeErrorExpCG(APatternMatchRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPatternMatchRuntimeErrorExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAPatternMatchRuntimeErrorExpCG(node, question);

	}


	/**
	* Called by the {@link APatternMatchRuntimeErrorExpCG} node from {@link APatternMatchRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APatternMatchRuntimeErrorExpCG} node
	*/
	public void inAPatternMatchRuntimeErrorExpCG(APatternMatchRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultInSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link APatternMatchRuntimeErrorExpCG} node from {@link APatternMatchRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APatternMatchRuntimeErrorExpCG} node
	*/
	public void outAPatternMatchRuntimeErrorExpCG(APatternMatchRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultOutSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link AMissingMemberRuntimeErrorExpCG} node from {@link AMissingMemberRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMissingMemberRuntimeErrorExpCG} node
	*/
	public void caseAMissingMemberRuntimeErrorExpCG(AMissingMemberRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMissingMemberRuntimeErrorExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAMissingMemberRuntimeErrorExpCG(node, question);

	}


	/**
	* Called by the {@link AMissingMemberRuntimeErrorExpCG} node from {@link AMissingMemberRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMissingMemberRuntimeErrorExpCG} node
	*/
	public void inAMissingMemberRuntimeErrorExpCG(AMissingMemberRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultInSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link AMissingMemberRuntimeErrorExpCG} node from {@link AMissingMemberRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMissingMemberRuntimeErrorExpCG} node
	*/
	public void outAMissingMemberRuntimeErrorExpCG(AMissingMemberRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultOutSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link APreCondRuntimeErrorExpCG} node from {@link APreCondRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreCondRuntimeErrorExpCG} node
	*/
	public void caseAPreCondRuntimeErrorExpCG(APreCondRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPreCondRuntimeErrorExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAPreCondRuntimeErrorExpCG(node, question);

	}


	/**
	* Called by the {@link APreCondRuntimeErrorExpCG} node from {@link APreCondRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreCondRuntimeErrorExpCG} node
	*/
	public void inAPreCondRuntimeErrorExpCG(APreCondRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultInSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link APreCondRuntimeErrorExpCG} node from {@link APreCondRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreCondRuntimeErrorExpCG} node
	*/
	public void outAPreCondRuntimeErrorExpCG(APreCondRuntimeErrorExpCG node, Q question) throws AnalysisException
	{
		defaultOutSRuntimeErrorExpCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierVarExpCG} node from {@link AIdentifierVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierVarExpCG} node
	*/
	public void caseAIdentifierVarExpCG(AIdentifierVarExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIdentifierVarExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAIdentifierVarExpCG(node, question);

	}


	/**
	* Called by the {@link AIdentifierVarExpCG} node from {@link AIdentifierVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierVarExpCG} node
	*/
	public void inAIdentifierVarExpCG(AIdentifierVarExpCG node, Q question) throws AnalysisException
	{
		defaultInSVarExpCG(node, question);
	}


	/**
	* Called by the {@link AIdentifierVarExpCG} node from {@link AIdentifierVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierVarExpCG} node
	*/
	public void outAIdentifierVarExpCG(AIdentifierVarExpCG node, Q question) throws AnalysisException
	{
		defaultOutSVarExpCG(node, question);
	}


	/**
	* Called by the {@link AExplicitVarExpCG} node from {@link AExplicitVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitVarExpCG} node
	*/
	public void caseAExplicitVarExpCG(AExplicitVarExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAExplicitVarExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getClassType() != null && !_visitedNodes.contains(node.getClassType())) 
		{
			node.getClassType().apply(this, question);
		}

		outAExplicitVarExpCG(node, question);

	}


	/**
	* Called by the {@link AExplicitVarExpCG} node from {@link AExplicitVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitVarExpCG} node
	*/
	public void inAExplicitVarExpCG(AExplicitVarExpCG node, Q question) throws AnalysisException
	{
		defaultInSVarExpCG(node, question);
	}


	/**
	* Called by the {@link AExplicitVarExpCG} node from {@link AExplicitVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitVarExpCG} node
	*/
	public void outAExplicitVarExpCG(AExplicitVarExpCG node, Q question) throws AnalysisException
	{
		defaultOutSVarExpCG(node, question);
	}


	/**
	* Called by the {@link ASuperVarExpCG} node from {@link ASuperVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperVarExpCG} node
	*/
	public void caseASuperVarExpCG(ASuperVarExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASuperVarExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outASuperVarExpCG(node, question);

	}


	/**
	* Called by the {@link ASuperVarExpCG} node from {@link ASuperVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperVarExpCG} node
	*/
	public void inASuperVarExpCG(ASuperVarExpCG node, Q question) throws AnalysisException
	{
		defaultInSVarExpCG(node, question);
	}


	/**
	* Called by the {@link ASuperVarExpCG} node from {@link ASuperVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperVarExpCG} node
	*/
	public void outASuperVarExpCG(ASuperVarExpCG node, Q question) throws AnalysisException
	{
		defaultOutSVarExpCG(node, question);
	}


	/**
	* Called by the {@link AIntLiteralExpCG} node from {@link AIntLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExpCG} node
	*/
	public void caseAIntLiteralExpCG(AIntLiteralExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIntLiteralExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAIntLiteralExpCG(node, question);

	}


	/**
	* Called by the {@link AIntLiteralExpCG} node from {@link AIntLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExpCG} node
	*/
	public void inAIntLiteralExpCG(AIntLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link AIntLiteralExpCG} node from {@link AIntLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExpCG} node
	*/
	public void outAIntLiteralExpCG(AIntLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link ARealLiteralExpCG} node from {@link ARealLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExpCG} node
	*/
	public void caseARealLiteralExpCG(ARealLiteralExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARealLiteralExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outARealLiteralExpCG(node, question);

	}


	/**
	* Called by the {@link ARealLiteralExpCG} node from {@link ARealLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExpCG} node
	*/
	public void inARealLiteralExpCG(ARealLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link ARealLiteralExpCG} node from {@link ARealLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExpCG} node
	*/
	public void outARealLiteralExpCG(ARealLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link ABoolLiteralExpCG} node from {@link ABoolLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolLiteralExpCG} node
	*/
	public void caseABoolLiteralExpCG(ABoolLiteralExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABoolLiteralExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outABoolLiteralExpCG(node, question);

	}


	/**
	* Called by the {@link ABoolLiteralExpCG} node from {@link ABoolLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolLiteralExpCG} node
	*/
	public void inABoolLiteralExpCG(ABoolLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link ABoolLiteralExpCG} node from {@link ABoolLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolLiteralExpCG} node
	*/
	public void outABoolLiteralExpCG(ABoolLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link ACharLiteralExpCG} node from {@link ACharLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExpCG} node
	*/
	public void caseACharLiteralExpCG(ACharLiteralExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACharLiteralExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outACharLiteralExpCG(node, question);

	}


	/**
	* Called by the {@link ACharLiteralExpCG} node from {@link ACharLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExpCG} node
	*/
	public void inACharLiteralExpCG(ACharLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link ACharLiteralExpCG} node from {@link ACharLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExpCG} node
	*/
	public void outACharLiteralExpCG(ACharLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link AQuoteLiteralExpCG} node from {@link AQuoteLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExpCG} node
	*/
	public void caseAQuoteLiteralExpCG(AQuoteLiteralExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAQuoteLiteralExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAQuoteLiteralExpCG(node, question);

	}


	/**
	* Called by the {@link AQuoteLiteralExpCG} node from {@link AQuoteLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExpCG} node
	*/
	public void inAQuoteLiteralExpCG(AQuoteLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link AQuoteLiteralExpCG} node from {@link AQuoteLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExpCG} node
	*/
	public void outAQuoteLiteralExpCG(AQuoteLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link AStringLiteralExpCG} node from {@link AStringLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExpCG} node
	*/
	public void caseAStringLiteralExpCG(AStringLiteralExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAStringLiteralExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}

		outAStringLiteralExpCG(node, question);

	}


	/**
	* Called by the {@link AStringLiteralExpCG} node from {@link AStringLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExpCG} node
	*/
	public void inAStringLiteralExpCG(AStringLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultInSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link AStringLiteralExpCG} node from {@link AStringLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExpCG} node
	*/
	public void outAStringLiteralExpCG(AStringLiteralExpCG node, Q question) throws AnalysisException
	{
		defaultOutSLiteralExpCG(node, question);
	}


	/**
	* Called by the {@link AForAllQuantifierExpCG} node from {@link AForAllQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllQuantifierExpCG} node
	*/
	public void caseAForAllQuantifierExpCG(AForAllQuantifierExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAForAllQuantifierExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindList());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			node.getPredicate().apply(this, question);
		}

		outAForAllQuantifierExpCG(node, question);

	}


	/**
	* Called by the {@link AForAllQuantifierExpCG} node from {@link AForAllQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllQuantifierExpCG} node
	*/
	public void inAForAllQuantifierExpCG(AForAllQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultInSQuantifierExpCG(node, question);
	}


	/**
	* Called by the {@link AForAllQuantifierExpCG} node from {@link AForAllQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllQuantifierExpCG} node
	*/
	public void outAForAllQuantifierExpCG(AForAllQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultOutSQuantifierExpCG(node, question);
	}


	/**
	* Called by the {@link AExistsQuantifierExpCG} node from {@link AExistsQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExistsQuantifierExpCG} node
	*/
	public void caseAExistsQuantifierExpCG(AExistsQuantifierExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAExistsQuantifierExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindList());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			node.getPredicate().apply(this, question);
		}

		outAExistsQuantifierExpCG(node, question);

	}


	/**
	* Called by the {@link AExistsQuantifierExpCG} node from {@link AExistsQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExistsQuantifierExpCG} node
	*/
	public void inAExistsQuantifierExpCG(AExistsQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultInSQuantifierExpCG(node, question);
	}


	/**
	* Called by the {@link AExistsQuantifierExpCG} node from {@link AExistsQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExistsQuantifierExpCG} node
	*/
	public void outAExistsQuantifierExpCG(AExistsQuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultOutSQuantifierExpCG(node, question);
	}


	/**
	* Called by the {@link AExists1QuantifierExpCG} node from {@link AExists1QuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExists1QuantifierExpCG} node
	*/
	public void caseAExists1QuantifierExpCG(AExists1QuantifierExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAExists1QuantifierExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindList());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			node.getPredicate().apply(this, question);
		}

		outAExists1QuantifierExpCG(node, question);

	}


	/**
	* Called by the {@link AExists1QuantifierExpCG} node from {@link AExists1QuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExists1QuantifierExpCG} node
	*/
	public void inAExists1QuantifierExpCG(AExists1QuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultInSQuantifierExpCG(node, question);
	}


	/**
	* Called by the {@link AExists1QuantifierExpCG} node from {@link AExists1QuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExists1QuantifierExpCG} node
	*/
	public void outAExists1QuantifierExpCG(AExists1QuantifierExpCG node, Q question) throws AnalysisException
	{
		defaultOutSQuantifierExpCG(node, question);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public void defaultInSNumericBinaryExpCG(SNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public void defaultOutSNumericBinaryExpCG(SNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public void defaultSNumericBinaryExpCG(SNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public void inSNumericBinaryExpCG(SNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public void outSNumericBinaryExpCG(SNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public void defaultInSBoolBinaryExpCG(SBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public void defaultOutSBoolBinaryExpCG(SBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public void defaultSBoolBinaryExpCG(SBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public void inSBoolBinaryExpCG(SBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public void outSBoolBinaryExpCG(SBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAddrEqualsBinaryExpCG} node from {@link AAddrEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrEqualsBinaryExpCG} node
	*/
	public void caseAAddrEqualsBinaryExpCG(AAddrEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAddrEqualsBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAAddrEqualsBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AAddrEqualsBinaryExpCG} node from {@link AAddrEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrEqualsBinaryExpCG} node
	*/
	public void inAAddrEqualsBinaryExpCG(AAddrEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAddrEqualsBinaryExpCG} node from {@link AAddrEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrEqualsBinaryExpCG} node
	*/
	public void outAAddrEqualsBinaryExpCG(AAddrEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAddrNotEqualsBinaryExpCG} node from {@link AAddrNotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrNotEqualsBinaryExpCG} node
	*/
	public void caseAAddrNotEqualsBinaryExpCG(AAddrNotEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAddrNotEqualsBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAAddrNotEqualsBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AAddrNotEqualsBinaryExpCG} node from {@link AAddrNotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrNotEqualsBinaryExpCG} node
	*/
	public void inAAddrNotEqualsBinaryExpCG(AAddrNotEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAddrNotEqualsBinaryExpCG} node from {@link AAddrNotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrNotEqualsBinaryExpCG} node
	*/
	public void outAAddrNotEqualsBinaryExpCG(AAddrNotEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AEqualsBinaryExpCG} node from {@link AEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExpCG} node
	*/
	public void caseAEqualsBinaryExpCG(AEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAEqualsBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAEqualsBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AEqualsBinaryExpCG} node from {@link AEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExpCG} node
	*/
	public void inAEqualsBinaryExpCG(AEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AEqualsBinaryExpCG} node from {@link AEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExpCG} node
	*/
	public void outAEqualsBinaryExpCG(AEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ANotEqualsBinaryExpCG} node from {@link ANotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualsBinaryExpCG} node
	*/
	public void caseANotEqualsBinaryExpCG(ANotEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANotEqualsBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outANotEqualsBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ANotEqualsBinaryExpCG} node from {@link ANotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualsBinaryExpCG} node
	*/
	public void inANotEqualsBinaryExpCG(ANotEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ANotEqualsBinaryExpCG} node from {@link ANotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualsBinaryExpCG} node
	*/
	public void outANotEqualsBinaryExpCG(ANotEqualsBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASeqConcatBinaryExpCG} node from {@link ASeqConcatBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExpCG} node
	*/
	public void caseASeqConcatBinaryExpCG(ASeqConcatBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASeqConcatBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASeqConcatBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASeqConcatBinaryExpCG} node from {@link ASeqConcatBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExpCG} node
	*/
	public void inASeqConcatBinaryExpCG(ASeqConcatBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASeqConcatBinaryExpCG} node from {@link ASeqConcatBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExpCG} node
	*/
	public void outASeqConcatBinaryExpCG(ASeqConcatBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASeqModificationBinaryExpCG} node from {@link ASeqModificationBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqModificationBinaryExpCG} node
	*/
	public void caseASeqModificationBinaryExpCG(ASeqModificationBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASeqModificationBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASeqModificationBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASeqModificationBinaryExpCG} node from {@link ASeqModificationBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqModificationBinaryExpCG} node
	*/
	public void inASeqModificationBinaryExpCG(ASeqModificationBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASeqModificationBinaryExpCG} node from {@link ASeqModificationBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqModificationBinaryExpCG} node
	*/
	public void outASeqModificationBinaryExpCG(ASeqModificationBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AInSetBinaryExpCG} node from {@link AInSetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExpCG} node
	*/
	public void caseAInSetBinaryExpCG(AInSetBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAInSetBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAInSetBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AInSetBinaryExpCG} node from {@link AInSetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExpCG} node
	*/
	public void inAInSetBinaryExpCG(AInSetBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AInSetBinaryExpCG} node from {@link AInSetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExpCG} node
	*/
	public void outAInSetBinaryExpCG(AInSetBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetUnionBinaryExpCG} node from {@link ASetUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExpCG} node
	*/
	public void caseASetUnionBinaryExpCG(ASetUnionBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetUnionBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASetUnionBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASetUnionBinaryExpCG} node from {@link ASetUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExpCG} node
	*/
	public void inASetUnionBinaryExpCG(ASetUnionBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetUnionBinaryExpCG} node from {@link ASetUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExpCG} node
	*/
	public void outASetUnionBinaryExpCG(ASetUnionBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetIntersectBinaryExpCG} node from {@link ASetIntersectBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExpCG} node
	*/
	public void caseASetIntersectBinaryExpCG(ASetIntersectBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetIntersectBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASetIntersectBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASetIntersectBinaryExpCG} node from {@link ASetIntersectBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExpCG} node
	*/
	public void inASetIntersectBinaryExpCG(ASetIntersectBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetIntersectBinaryExpCG} node from {@link ASetIntersectBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExpCG} node
	*/
	public void outASetIntersectBinaryExpCG(ASetIntersectBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExpCG} node from {@link ASetDifferenceBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExpCG} node
	*/
	public void caseASetDifferenceBinaryExpCG(ASetDifferenceBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetDifferenceBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASetDifferenceBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASetDifferenceBinaryExpCG} node from {@link ASetDifferenceBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExpCG} node
	*/
	public void inASetDifferenceBinaryExpCG(ASetDifferenceBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExpCG} node from {@link ASetDifferenceBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExpCG} node
	*/
	public void outASetDifferenceBinaryExpCG(ASetDifferenceBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetSubsetBinaryExpCG} node from {@link ASetSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSubsetBinaryExpCG} node
	*/
	public void caseASetSubsetBinaryExpCG(ASetSubsetBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetSubsetBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASetSubsetBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASetSubsetBinaryExpCG} node from {@link ASetSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSubsetBinaryExpCG} node
	*/
	public void inASetSubsetBinaryExpCG(ASetSubsetBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetSubsetBinaryExpCG} node from {@link ASetSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSubsetBinaryExpCG} node
	*/
	public void outASetSubsetBinaryExpCG(ASetSubsetBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetProperSubsetBinaryExpCG} node from {@link ASetProperSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetProperSubsetBinaryExpCG} node
	*/
	public void caseASetProperSubsetBinaryExpCG(ASetProperSubsetBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetProperSubsetBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASetProperSubsetBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASetProperSubsetBinaryExpCG} node from {@link ASetProperSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetProperSubsetBinaryExpCG} node
	*/
	public void inASetProperSubsetBinaryExpCG(ASetProperSubsetBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASetProperSubsetBinaryExpCG} node from {@link ASetProperSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetProperSubsetBinaryExpCG} node
	*/
	public void outASetProperSubsetBinaryExpCG(ASetProperSubsetBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapUnionBinaryExpCG} node from {@link AMapUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExpCG} node
	*/
	public void caseAMapUnionBinaryExpCG(AMapUnionBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapUnionBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAMapUnionBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AMapUnionBinaryExpCG} node from {@link AMapUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExpCG} node
	*/
	public void inAMapUnionBinaryExpCG(AMapUnionBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapUnionBinaryExpCG} node from {@link AMapUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExpCG} node
	*/
	public void outAMapUnionBinaryExpCG(AMapUnionBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapOverrideBinaryExpCG} node from {@link AMapOverrideBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapOverrideBinaryExpCG} node
	*/
	public void caseAMapOverrideBinaryExpCG(AMapOverrideBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapOverrideBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAMapOverrideBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AMapOverrideBinaryExpCG} node from {@link AMapOverrideBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapOverrideBinaryExpCG} node
	*/
	public void inAMapOverrideBinaryExpCG(AMapOverrideBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapOverrideBinaryExpCG} node from {@link AMapOverrideBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapOverrideBinaryExpCG} node
	*/
	public void outAMapOverrideBinaryExpCG(AMapOverrideBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADomainResToBinaryExpCG} node from {@link ADomainResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExpCG} node
	*/
	public void caseADomainResToBinaryExpCG(ADomainResToBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADomainResToBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outADomainResToBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ADomainResToBinaryExpCG} node from {@link ADomainResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExpCG} node
	*/
	public void inADomainResToBinaryExpCG(ADomainResToBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADomainResToBinaryExpCG} node from {@link ADomainResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExpCG} node
	*/
	public void outADomainResToBinaryExpCG(ADomainResToBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADomainResByBinaryExpCG} node from {@link ADomainResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExpCG} node
	*/
	public void caseADomainResByBinaryExpCG(ADomainResByBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADomainResByBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outADomainResByBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ADomainResByBinaryExpCG} node from {@link ADomainResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExpCG} node
	*/
	public void inADomainResByBinaryExpCG(ADomainResByBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADomainResByBinaryExpCG} node from {@link ADomainResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExpCG} node
	*/
	public void outADomainResByBinaryExpCG(ADomainResByBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ARangeResToBinaryExpCG} node from {@link ARangeResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExpCG} node
	*/
	public void caseARangeResToBinaryExpCG(ARangeResToBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARangeResToBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outARangeResToBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ARangeResToBinaryExpCG} node from {@link ARangeResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExpCG} node
	*/
	public void inARangeResToBinaryExpCG(ARangeResToBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ARangeResToBinaryExpCG} node from {@link ARangeResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExpCG} node
	*/
	public void outARangeResToBinaryExpCG(ARangeResToBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ARangeResByBinaryExpCG} node from {@link ARangeResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExpCG} node
	*/
	public void caseARangeResByBinaryExpCG(ARangeResByBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARangeResByBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outARangeResByBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ARangeResByBinaryExpCG} node from {@link ARangeResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExpCG} node
	*/
	public void inARangeResByBinaryExpCG(ARangeResByBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ARangeResByBinaryExpCG} node from {@link ARangeResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExpCG} node
	*/
	public void outARangeResByBinaryExpCG(ARangeResByBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AIntDivNumericBinaryExpCG} node from {@link AIntDivNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntDivNumericBinaryExpCG} node
	*/
	public void caseAIntDivNumericBinaryExpCG(AIntDivNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIntDivNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAIntDivNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AIntDivNumericBinaryExpCG} node from {@link AIntDivNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntDivNumericBinaryExpCG} node
	*/
	public void inAIntDivNumericBinaryExpCG(AIntDivNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AIntDivNumericBinaryExpCG} node from {@link AIntDivNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntDivNumericBinaryExpCG} node
	*/
	public void outAIntDivNumericBinaryExpCG(AIntDivNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADivideNumericBinaryExpCG} node from {@link ADivideNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExpCG} node
	*/
	public void caseADivideNumericBinaryExpCG(ADivideNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADivideNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outADivideNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ADivideNumericBinaryExpCG} node from {@link ADivideNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExpCG} node
	*/
	public void inADivideNumericBinaryExpCG(ADivideNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADivideNumericBinaryExpCG} node from {@link ADivideNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExpCG} node
	*/
	public void outADivideNumericBinaryExpCG(ADivideNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExpCG} node from {@link AGreaterEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExpCG} node
	*/
	public void caseAGreaterEqualNumericBinaryExpCG(AGreaterEqualNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAGreaterEqualNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAGreaterEqualNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExpCG} node from {@link AGreaterEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExpCG} node
	*/
	public void inAGreaterEqualNumericBinaryExpCG(AGreaterEqualNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExpCG} node from {@link AGreaterEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExpCG} node
	*/
	public void outAGreaterEqualNumericBinaryExpCG(AGreaterEqualNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExpCG} node from {@link AGreaterNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExpCG} node
	*/
	public void caseAGreaterNumericBinaryExpCG(AGreaterNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAGreaterNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAGreaterNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AGreaterNumericBinaryExpCG} node from {@link AGreaterNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExpCG} node
	*/
	public void inAGreaterNumericBinaryExpCG(AGreaterNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExpCG} node from {@link AGreaterNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExpCG} node
	*/
	public void outAGreaterNumericBinaryExpCG(AGreaterNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExpCG} node from {@link ALessEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExpCG} node
	*/
	public void caseALessEqualNumericBinaryExpCG(ALessEqualNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALessEqualNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outALessEqualNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExpCG} node from {@link ALessEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExpCG} node
	*/
	public void inALessEqualNumericBinaryExpCG(ALessEqualNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExpCG} node from {@link ALessEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExpCG} node
	*/
	public void outALessEqualNumericBinaryExpCG(ALessEqualNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ALessNumericBinaryExpCG} node from {@link ALessNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExpCG} node
	*/
	public void caseALessNumericBinaryExpCG(ALessNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALessNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outALessNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ALessNumericBinaryExpCG} node from {@link ALessNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExpCG} node
	*/
	public void inALessNumericBinaryExpCG(ALessNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ALessNumericBinaryExpCG} node from {@link ALessNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExpCG} node
	*/
	public void outALessNumericBinaryExpCG(ALessNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AModNumericBinaryExpCG} node from {@link AModNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExpCG} node
	*/
	public void caseAModNumericBinaryExpCG(AModNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAModNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAModNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AModNumericBinaryExpCG} node from {@link AModNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExpCG} node
	*/
	public void inAModNumericBinaryExpCG(AModNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AModNumericBinaryExpCG} node from {@link AModNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExpCG} node
	*/
	public void outAModNumericBinaryExpCG(AModNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link APlusNumericBinaryExpCG} node from {@link APlusNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExpCG} node
	*/
	public void caseAPlusNumericBinaryExpCG(APlusNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPlusNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAPlusNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link APlusNumericBinaryExpCG} node from {@link APlusNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExpCG} node
	*/
	public void inAPlusNumericBinaryExpCG(APlusNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link APlusNumericBinaryExpCG} node from {@link APlusNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExpCG} node
	*/
	public void outAPlusNumericBinaryExpCG(APlusNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExpCG} node from {@link ASubtractNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExpCG} node
	*/
	public void caseASubtractNumericBinaryExpCG(ASubtractNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASubtractNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outASubtractNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASubtractNumericBinaryExpCG} node from {@link ASubtractNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExpCG} node
	*/
	public void inASubtractNumericBinaryExpCG(ASubtractNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExpCG} node from {@link ASubtractNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExpCG} node
	*/
	public void outASubtractNumericBinaryExpCG(ASubtractNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ARemNumericBinaryExpCG} node from {@link ARemNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExpCG} node
	*/
	public void caseARemNumericBinaryExpCG(ARemNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARemNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outARemNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ARemNumericBinaryExpCG} node from {@link ARemNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExpCG} node
	*/
	public void inARemNumericBinaryExpCG(ARemNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ARemNumericBinaryExpCG} node from {@link ARemNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExpCG} node
	*/
	public void outARemNumericBinaryExpCG(ARemNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ATimesNumericBinaryExpCG} node from {@link ATimesNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExpCG} node
	*/
	public void caseATimesNumericBinaryExpCG(ATimesNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATimesNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outATimesNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link ATimesNumericBinaryExpCG} node from {@link ATimesNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExpCG} node
	*/
	public void inATimesNumericBinaryExpCG(ATimesNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link ATimesNumericBinaryExpCG} node from {@link ATimesNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExpCG} node
	*/
	public void outATimesNumericBinaryExpCG(ATimesNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link APowerNumericBinaryExpCG} node from {@link APowerNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerNumericBinaryExpCG} node
	*/
	public void caseAPowerNumericBinaryExpCG(APowerNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPowerNumericBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAPowerNumericBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link APowerNumericBinaryExpCG} node from {@link APowerNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerNumericBinaryExpCG} node
	*/
	public void inAPowerNumericBinaryExpCG(APowerNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link APowerNumericBinaryExpCG} node from {@link APowerNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerNumericBinaryExpCG} node
	*/
	public void outAPowerNumericBinaryExpCG(APowerNumericBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AOrBoolBinaryExpCG} node from {@link AOrBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AOrBoolBinaryExpCG} node
	*/
	public void caseAOrBoolBinaryExpCG(AOrBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAOrBoolBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAOrBoolBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AOrBoolBinaryExpCG} node from {@link AOrBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AOrBoolBinaryExpCG} node
	*/
	public void inAOrBoolBinaryExpCG(AOrBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBoolBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AOrBoolBinaryExpCG} node from {@link AOrBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AOrBoolBinaryExpCG} node
	*/
	public void outAOrBoolBinaryExpCG(AOrBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBoolBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAndBoolBinaryExpCG} node from {@link AAndBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAndBoolBinaryExpCG} node
	*/
	public void caseAAndBoolBinaryExpCG(AAndBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAndBoolBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAAndBoolBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AAndBoolBinaryExpCG} node from {@link AAndBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAndBoolBinaryExpCG} node
	*/
	public void inAAndBoolBinaryExpCG(AAndBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBoolBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAndBoolBinaryExpCG} node from {@link AAndBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAndBoolBinaryExpCG} node
	*/
	public void outAAndBoolBinaryExpCG(AAndBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBoolBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AXorBoolBinaryExpCG} node from {@link AXorBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AXorBoolBinaryExpCG} node
	*/
	public void caseAXorBoolBinaryExpCG(AXorBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAXorBoolBinaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			node.getLeft().apply(this, question);
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			node.getRight().apply(this, question);
		}

		outAXorBoolBinaryExpCG(node, question);

	}


	/**
	* Called by the {@link AXorBoolBinaryExpCG} node from {@link AXorBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AXorBoolBinaryExpCG} node
	*/
	public void inAXorBoolBinaryExpCG(AXorBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSBoolBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link AXorBoolBinaryExpCG} node from {@link AXorBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AXorBoolBinaryExpCG} node
	*/
	public void outAXorBoolBinaryExpCG(AXorBoolBinaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSBoolBinaryExpCG(node, question);
	}


	/**
	* Called by the {@link APlusUnaryExpCG} node from {@link APlusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusUnaryExpCG} node
	*/
	public void caseAPlusUnaryExpCG(APlusUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPlusUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAPlusUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link APlusUnaryExpCG} node from {@link APlusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusUnaryExpCG} node
	*/
	public void inAPlusUnaryExpCG(APlusUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link APlusUnaryExpCG} node from {@link APlusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusUnaryExpCG} node
	*/
	public void outAPlusUnaryExpCG(APlusUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMinusUnaryExpCG} node from {@link AMinusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnaryExpCG} node
	*/
	public void caseAMinusUnaryExpCG(AMinusUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMinusUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAMinusUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AMinusUnaryExpCG} node from {@link AMinusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnaryExpCG} node
	*/
	public void inAMinusUnaryExpCG(AMinusUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMinusUnaryExpCG} node from {@link AMinusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnaryExpCG} node
	*/
	public void outAMinusUnaryExpCG(AMinusUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ACastUnaryExpCG} node from {@link ACastUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACastUnaryExpCG} node
	*/
	public void caseACastUnaryExpCG(ACastUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACastUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outACastUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ACastUnaryExpCG} node from {@link ACastUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACastUnaryExpCG} node
	*/
	public void inACastUnaryExpCG(ACastUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ACastUnaryExpCG} node from {@link ACastUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACastUnaryExpCG} node
	*/
	public void outACastUnaryExpCG(ACastUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AIsolationUnaryExpCG} node from {@link AIsolationUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIsolationUnaryExpCG} node
	*/
	public void caseAIsolationUnaryExpCG(AIsolationUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIsolationUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAIsolationUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AIsolationUnaryExpCG} node from {@link AIsolationUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIsolationUnaryExpCG} node
	*/
	public void inAIsolationUnaryExpCG(AIsolationUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AIsolationUnaryExpCG} node from {@link AIsolationUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIsolationUnaryExpCG} node
	*/
	public void outAIsolationUnaryExpCG(AIsolationUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ALenUnaryExpCG} node from {@link ALenUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExpCG} node
	*/
	public void caseALenUnaryExpCG(ALenUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALenUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outALenUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ALenUnaryExpCG} node from {@link ALenUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExpCG} node
	*/
	public void inALenUnaryExpCG(ALenUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ALenUnaryExpCG} node from {@link ALenUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExpCG} node
	*/
	public void outALenUnaryExpCG(ALenUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ACardUnaryExpCG} node from {@link ACardUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACardUnaryExpCG} node
	*/
	public void caseACardUnaryExpCG(ACardUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACardUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outACardUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ACardUnaryExpCG} node from {@link ACardUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACardUnaryExpCG} node
	*/
	public void inACardUnaryExpCG(ACardUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ACardUnaryExpCG} node from {@link ACardUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACardUnaryExpCG} node
	*/
	public void outACardUnaryExpCG(ACardUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AElemsUnaryExpCG} node from {@link AElemsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AElemsUnaryExpCG} node
	*/
	public void caseAElemsUnaryExpCG(AElemsUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAElemsUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAElemsUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AElemsUnaryExpCG} node from {@link AElemsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AElemsUnaryExpCG} node
	*/
	public void inAElemsUnaryExpCG(AElemsUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AElemsUnaryExpCG} node from {@link AElemsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AElemsUnaryExpCG} node
	*/
	public void outAElemsUnaryExpCG(AElemsUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AIndicesUnaryExpCG} node from {@link AIndicesUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExpCG} node
	*/
	public void caseAIndicesUnaryExpCG(AIndicesUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIndicesUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAIndicesUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AIndicesUnaryExpCG} node from {@link AIndicesUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExpCG} node
	*/
	public void inAIndicesUnaryExpCG(AIndicesUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AIndicesUnaryExpCG} node from {@link AIndicesUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExpCG} node
	*/
	public void outAIndicesUnaryExpCG(AIndicesUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AHeadUnaryExpCG} node from {@link AHeadUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExpCG} node
	*/
	public void caseAHeadUnaryExpCG(AHeadUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAHeadUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAHeadUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AHeadUnaryExpCG} node from {@link AHeadUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExpCG} node
	*/
	public void inAHeadUnaryExpCG(AHeadUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AHeadUnaryExpCG} node from {@link AHeadUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExpCG} node
	*/
	public void outAHeadUnaryExpCG(AHeadUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ATailUnaryExpCG} node from {@link ATailUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExpCG} node
	*/
	public void caseATailUnaryExpCG(ATailUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATailUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outATailUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ATailUnaryExpCG} node from {@link ATailUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExpCG} node
	*/
	public void inATailUnaryExpCG(ATailUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ATailUnaryExpCG} node from {@link ATailUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExpCG} node
	*/
	public void outATailUnaryExpCG(ATailUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AReverseUnaryExpCG} node from {@link AReverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExpCG} node
	*/
	public void caseAReverseUnaryExpCG(AReverseUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAReverseUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAReverseUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AReverseUnaryExpCG} node from {@link AReverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExpCG} node
	*/
	public void inAReverseUnaryExpCG(AReverseUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AReverseUnaryExpCG} node from {@link AReverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExpCG} node
	*/
	public void outAReverseUnaryExpCG(AReverseUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AFloorUnaryExpCG} node from {@link AFloorUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExpCG} node
	*/
	public void caseAFloorUnaryExpCG(AFloorUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAFloorUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAFloorUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AFloorUnaryExpCG} node from {@link AFloorUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExpCG} node
	*/
	public void inAFloorUnaryExpCG(AFloorUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AFloorUnaryExpCG} node from {@link AFloorUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExpCG} node
	*/
	public void outAFloorUnaryExpCG(AFloorUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAbsUnaryExpCG} node from {@link AAbsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnaryExpCG} node
	*/
	public void caseAAbsUnaryExpCG(AAbsUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAAbsUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAAbsUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AAbsUnaryExpCG} node from {@link AAbsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnaryExpCG} node
	*/
	public void inAAbsUnaryExpCG(AAbsUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AAbsUnaryExpCG} node from {@link AAbsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnaryExpCG} node
	*/
	public void outAAbsUnaryExpCG(AAbsUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ANotUnaryExpCG} node from {@link ANotUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExpCG} node
	*/
	public void caseANotUnaryExpCG(ANotUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANotUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outANotUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ANotUnaryExpCG} node from {@link ANotUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExpCG} node
	*/
	public void inANotUnaryExpCG(ANotUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ANotUnaryExpCG} node from {@link ANotUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExpCG} node
	*/
	public void outANotUnaryExpCG(ANotUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistConcatUnaryExpCG} node from {@link ADistConcatUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExpCG} node
	*/
	public void caseADistConcatUnaryExpCG(ADistConcatUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADistConcatUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outADistConcatUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ADistConcatUnaryExpCG} node from {@link ADistConcatUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExpCG} node
	*/
	public void inADistConcatUnaryExpCG(ADistConcatUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistConcatUnaryExpCG} node from {@link ADistConcatUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExpCG} node
	*/
	public void outADistConcatUnaryExpCG(ADistConcatUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistUnionUnaryExpCG} node from {@link ADistUnionUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExpCG} node
	*/
	public void caseADistUnionUnaryExpCG(ADistUnionUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADistUnionUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outADistUnionUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ADistUnionUnaryExpCG} node from {@link ADistUnionUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExpCG} node
	*/
	public void inADistUnionUnaryExpCG(ADistUnionUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistUnionUnaryExpCG} node from {@link ADistUnionUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExpCG} node
	*/
	public void outADistUnionUnaryExpCG(ADistUnionUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistIntersectUnaryExpCG} node from {@link ADistIntersectUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExpCG} node
	*/
	public void caseADistIntersectUnaryExpCG(ADistIntersectUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADistIntersectUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outADistIntersectUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ADistIntersectUnaryExpCG} node from {@link ADistIntersectUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExpCG} node
	*/
	public void inADistIntersectUnaryExpCG(ADistIntersectUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistIntersectUnaryExpCG} node from {@link ADistIntersectUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExpCG} node
	*/
	public void outADistIntersectUnaryExpCG(ADistIntersectUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link APowerSetUnaryExpCG} node from {@link APowerSetUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExpCG} node
	*/
	public void caseAPowerSetUnaryExpCG(APowerSetUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAPowerSetUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAPowerSetUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link APowerSetUnaryExpCG} node from {@link APowerSetUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExpCG} node
	*/
	public void inAPowerSetUnaryExpCG(APowerSetUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link APowerSetUnaryExpCG} node from {@link APowerSetUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExpCG} node
	*/
	public void outAPowerSetUnaryExpCG(APowerSetUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapDomainUnaryExpCG} node from {@link AMapDomainUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExpCG} node
	*/
	public void caseAMapDomainUnaryExpCG(AMapDomainUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapDomainUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAMapDomainUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AMapDomainUnaryExpCG} node from {@link AMapDomainUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExpCG} node
	*/
	public void inAMapDomainUnaryExpCG(AMapDomainUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapDomainUnaryExpCG} node from {@link AMapDomainUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExpCG} node
	*/
	public void outAMapDomainUnaryExpCG(AMapDomainUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapRangeUnaryExpCG} node from {@link AMapRangeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExpCG} node
	*/
	public void caseAMapRangeUnaryExpCG(AMapRangeUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapRangeUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAMapRangeUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AMapRangeUnaryExpCG} node from {@link AMapRangeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExpCG} node
	*/
	public void inAMapRangeUnaryExpCG(AMapRangeUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapRangeUnaryExpCG} node from {@link AMapRangeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExpCG} node
	*/
	public void outAMapRangeUnaryExpCG(AMapRangeUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistMergeUnaryExpCG} node from {@link ADistMergeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExpCG} node
	*/
	public void caseADistMergeUnaryExpCG(ADistMergeUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inADistMergeUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outADistMergeUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ADistMergeUnaryExpCG} node from {@link ADistMergeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExpCG} node
	*/
	public void inADistMergeUnaryExpCG(ADistMergeUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ADistMergeUnaryExpCG} node from {@link ADistMergeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExpCG} node
	*/
	public void outADistMergeUnaryExpCG(ADistMergeUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapInverseUnaryExpCG} node from {@link AMapInverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExpCG} node
	*/
	public void caseAMapInverseUnaryExpCG(AMapInverseUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapInverseUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAMapInverseUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AMapInverseUnaryExpCG} node from {@link AMapInverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExpCG} node
	*/
	public void inAMapInverseUnaryExpCG(AMapInverseUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AMapInverseUnaryExpCG} node from {@link AMapInverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExpCG} node
	*/
	public void outAMapInverseUnaryExpCG(AMapInverseUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASeqToStringUnaryExpCG} node from {@link ASeqToStringUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqToStringUnaryExpCG} node
	*/
	public void caseASeqToStringUnaryExpCG(ASeqToStringUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASeqToStringUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outASeqToStringUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link ASeqToStringUnaryExpCG} node from {@link ASeqToStringUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqToStringUnaryExpCG} node
	*/
	public void inASeqToStringUnaryExpCG(ASeqToStringUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link ASeqToStringUnaryExpCG} node from {@link ASeqToStringUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqToStringUnaryExpCG} node
	*/
	public void outASeqToStringUnaryExpCG(ASeqToStringUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AStringToSeqUnaryExpCG} node from {@link AStringToSeqUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringToSeqUnaryExpCG} node
	*/
	public void caseAStringToSeqUnaryExpCG(AStringToSeqUnaryExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAStringToSeqUnaryExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			node.getExp().apply(this, question);
		}

		outAStringToSeqUnaryExpCG(node, question);

	}


	/**
	* Called by the {@link AStringToSeqUnaryExpCG} node from {@link AStringToSeqUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringToSeqUnaryExpCG} node
	*/
	public void inAStringToSeqUnaryExpCG(AStringToSeqUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultInSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AStringToSeqUnaryExpCG} node from {@link AStringToSeqUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringToSeqUnaryExpCG} node
	*/
	public void outAStringToSeqUnaryExpCG(AStringToSeqUnaryExpCG node, Q question) throws AnalysisException
	{
		defaultOutSUnaryExpCG(node, question);
	}


	/**
	* Called by the {@link AEnumSeqExpCG} node from {@link AEnumSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSeqExpCG} node
	*/
	public void caseAEnumSeqExpCG(AEnumSeqExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAEnumSeqExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getMembers());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAEnumSeqExpCG(node, question);

	}


	/**
	* Called by the {@link AEnumSeqExpCG} node from {@link AEnumSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSeqExpCG} node
	*/
	public void inAEnumSeqExpCG(AEnumSeqExpCG node, Q question) throws AnalysisException
	{
		defaultInSSeqExpCG(node, question);
	}


	/**
	* Called by the {@link AEnumSeqExpCG} node from {@link AEnumSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSeqExpCG} node
	*/
	public void outAEnumSeqExpCG(AEnumSeqExpCG node, Q question) throws AnalysisException
	{
		defaultOutSSeqExpCG(node, question);
	}


	/**
	* Called by the {@link ACompSeqExpCG} node from {@link ACompSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSeqExpCG} node
	*/
	public void caseACompSeqExpCG(ACompSeqExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACompSeqExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			node.getFirst().apply(this, question);
		}
		if(node.getSetBind() != null && !_visitedNodes.contains(node.getSetBind())) 
		{
			node.getSetBind().apply(this, question);
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			node.getSet().apply(this, question);
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			node.getPredicate().apply(this, question);
		}

		outACompSeqExpCG(node, question);

	}


	/**
	* Called by the {@link ACompSeqExpCG} node from {@link ACompSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSeqExpCG} node
	*/
	public void inACompSeqExpCG(ACompSeqExpCG node, Q question) throws AnalysisException
	{
		defaultInSSeqExpCG(node, question);
	}


	/**
	* Called by the {@link ACompSeqExpCG} node from {@link ACompSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSeqExpCG} node
	*/
	public void outACompSeqExpCG(ACompSeqExpCG node, Q question) throws AnalysisException
	{
		defaultOutSSeqExpCG(node, question);
	}


	/**
	* Called by the {@link AEnumSetExpCG} node from {@link AEnumSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSetExpCG} node
	*/
	public void caseAEnumSetExpCG(AEnumSetExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAEnumSetExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getMembers());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAEnumSetExpCG(node, question);

	}


	/**
	* Called by the {@link AEnumSetExpCG} node from {@link AEnumSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSetExpCG} node
	*/
	public void inAEnumSetExpCG(AEnumSetExpCG node, Q question) throws AnalysisException
	{
		defaultInSSetExpCG(node, question);
	}


	/**
	* Called by the {@link AEnumSetExpCG} node from {@link AEnumSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSetExpCG} node
	*/
	public void outAEnumSetExpCG(AEnumSetExpCG node, Q question) throws AnalysisException
	{
		defaultOutSSetExpCG(node, question);
	}


	/**
	* Called by the {@link ACompSetExpCG} node from {@link ACompSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSetExpCG} node
	*/
	public void caseACompSetExpCG(ACompSetExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACompSetExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			node.getFirst().apply(this, question);
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindings());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			node.getPredicate().apply(this, question);
		}

		outACompSetExpCG(node, question);

	}


	/**
	* Called by the {@link ACompSetExpCG} node from {@link ACompSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSetExpCG} node
	*/
	public void inACompSetExpCG(ACompSetExpCG node, Q question) throws AnalysisException
	{
		defaultInSSetExpCG(node, question);
	}


	/**
	* Called by the {@link ACompSetExpCG} node from {@link ACompSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSetExpCG} node
	*/
	public void outACompSetExpCG(ACompSetExpCG node, Q question) throws AnalysisException
	{
		defaultOutSSetExpCG(node, question);
	}


	/**
	* Called by the {@link ARangeSetExpCG} node from {@link ARangeSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeSetExpCG} node
	*/
	public void caseARangeSetExpCG(ARangeSetExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARangeSetExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			node.getFirst().apply(this, question);
		}
		if(node.getLast() != null && !_visitedNodes.contains(node.getLast())) 
		{
			node.getLast().apply(this, question);
		}

		outARangeSetExpCG(node, question);

	}


	/**
	* Called by the {@link ARangeSetExpCG} node from {@link ARangeSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeSetExpCG} node
	*/
	public void inARangeSetExpCG(ARangeSetExpCG node, Q question) throws AnalysisException
	{
		defaultInSSetExpCG(node, question);
	}


	/**
	* Called by the {@link ARangeSetExpCG} node from {@link ARangeSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeSetExpCG} node
	*/
	public void outARangeSetExpCG(ARangeSetExpCG node, Q question) throws AnalysisException
	{
		defaultOutSSetExpCG(node, question);
	}


	/**
	* Called by the {@link AEnumMapExpCG} node from {@link AEnumMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumMapExpCG} node
	*/
	public void caseAEnumMapExpCG(AEnumMapExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAEnumMapExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		{
			List<AMapletExpCG> copy = new ArrayList<AMapletExpCG>(node.getMembers());
			for( AMapletExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAEnumMapExpCG(node, question);

	}


	/**
	* Called by the {@link AEnumMapExpCG} node from {@link AEnumMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumMapExpCG} node
	*/
	public void inAEnumMapExpCG(AEnumMapExpCG node, Q question) throws AnalysisException
	{
		defaultInSMapExpCG(node, question);
	}


	/**
	* Called by the {@link AEnumMapExpCG} node from {@link AEnumMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumMapExpCG} node
	*/
	public void outAEnumMapExpCG(AEnumMapExpCG node, Q question) throws AnalysisException
	{
		defaultOutSMapExpCG(node, question);
	}


	/**
	* Called by the {@link ACompMapExpCG} node from {@link ACompMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompMapExpCG} node
	*/
	public void caseACompMapExpCG(ACompMapExpCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACompMapExpCG(node, question);

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			node.getType().apply(this, question);
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			node.getFirst().apply(this, question);
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindings());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			node.getPredicate().apply(this, question);
		}

		outACompMapExpCG(node, question);

	}


	/**
	* Called by the {@link ACompMapExpCG} node from {@link ACompMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompMapExpCG} node
	*/
	public void inACompMapExpCG(ACompMapExpCG node, Q question) throws AnalysisException
	{
		defaultInSMapExpCG(node, question);
	}


	/**
	* Called by the {@link ACompMapExpCG} node from {@link ACompMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompMapExpCG} node
	*/
	public void outACompMapExpCG(ACompMapExpCG node, Q question) throws AnalysisException
	{
		defaultOutSMapExpCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public void defaultInSBasicTypeCG(SBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public void defaultOutSBasicTypeCG(SBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public void defaultSBasicTypeCG(SBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public void inSBasicTypeCG(SBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public void outSBasicTypeCG(SBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AObjectTypeCG} node from {@link AObjectTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AObjectTypeCG} node
	*/
	public void caseAObjectTypeCG(AObjectTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAObjectTypeCG(node, question);


		outAObjectTypeCG(node, question);

	}


	/**
	* Called by the {@link AObjectTypeCG} node from {@link AObjectTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AObjectTypeCG} node
	*/
	public void inAObjectTypeCG(AObjectTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AObjectTypeCG} node from {@link AObjectTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AObjectTypeCG} node
	*/
	public void outAObjectTypeCG(AObjectTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AVoidTypeCG} node from {@link AVoidTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AVoidTypeCG} node
	*/
	public void caseAVoidTypeCG(AVoidTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAVoidTypeCG(node, question);


		outAVoidTypeCG(node, question);

	}


	/**
	* Called by the {@link AVoidTypeCG} node from {@link AVoidTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AVoidTypeCG} node
	*/
	public void inAVoidTypeCG(AVoidTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AVoidTypeCG} node from {@link AVoidTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AVoidTypeCG} node
	*/
	public void outAVoidTypeCG(AVoidTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AClassTypeCG} node from {@link AClassTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassTypeCG} node
	*/
	public void caseAClassTypeCG(AClassTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAClassTypeCG(node, question);

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAClassTypeCG(node, question);

	}


	/**
	* Called by the {@link AClassTypeCG} node from {@link AClassTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassTypeCG} node
	*/
	public void inAClassTypeCG(AClassTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AClassTypeCG} node from {@link AClassTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassTypeCG} node
	*/
	public void outAClassTypeCG(AClassTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AExternalTypeCG} node from {@link AExternalTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalTypeCG} node
	*/
	public void caseAExternalTypeCG(AExternalTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAExternalTypeCG(node, question);

		if(node.getInfo() != null && !_visitedNodes.contains(node.getInfo())) 
		{
			node.getInfo().apply(this, question);
		}

		outAExternalTypeCG(node, question);

	}


	/**
	* Called by the {@link AExternalTypeCG} node from {@link AExternalTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalTypeCG} node
	*/
	public void inAExternalTypeCG(AExternalTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AExternalTypeCG} node from {@link AExternalTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalTypeCG} node
	*/
	public void outAExternalTypeCG(AExternalTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link ARecordTypeCG} node from {@link ARecordTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordTypeCG} node
	*/
	public void caseARecordTypeCG(ARecordTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARecordTypeCG(node, question);

		if(node.getName() != null && !_visitedNodes.contains(node.getName())) 
		{
			node.getName().apply(this, question);
		}

		outARecordTypeCG(node, question);

	}


	/**
	* Called by the {@link ARecordTypeCG} node from {@link ARecordTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordTypeCG} node
	*/
	public void inARecordTypeCG(ARecordTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link ARecordTypeCG} node from {@link ARecordTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordTypeCG} node
	*/
	public void outARecordTypeCG(ARecordTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AStringTypeCG} node from {@link AStringTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringTypeCG} node
	*/
	public void caseAStringTypeCG(AStringTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAStringTypeCG(node, question);


		outAStringTypeCG(node, question);

	}


	/**
	* Called by the {@link AStringTypeCG} node from {@link AStringTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringTypeCG} node
	*/
	public void inAStringTypeCG(AStringTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AStringTypeCG} node from {@link AStringTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringTypeCG} node
	*/
	public void outAStringTypeCG(AStringTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link ATemplateTypeCG} node from {@link ATemplateTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATemplateTypeCG} node
	*/
	public void caseATemplateTypeCG(ATemplateTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATemplateTypeCG(node, question);


		outATemplateTypeCG(node, question);

	}


	/**
	* Called by the {@link ATemplateTypeCG} node from {@link ATemplateTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATemplateTypeCG} node
	*/
	public void inATemplateTypeCG(ATemplateTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link ATemplateTypeCG} node from {@link ATemplateTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATemplateTypeCG} node
	*/
	public void outATemplateTypeCG(ATemplateTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link ATupleTypeCG} node from {@link ATupleTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleTypeCG} node
	*/
	public void caseATupleTypeCG(ATupleTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATupleTypeCG(node, question);

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outATupleTypeCG(node, question);

	}


	/**
	* Called by the {@link ATupleTypeCG} node from {@link ATupleTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleTypeCG} node
	*/
	public void inATupleTypeCG(ATupleTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link ATupleTypeCG} node from {@link ATupleTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleTypeCG} node
	*/
	public void outATupleTypeCG(ATupleTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AMethodTypeCG} node from {@link AMethodTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodTypeCG} node
	*/
	public void caseAMethodTypeCG(AMethodTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMethodTypeCG(node, question);

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getParams());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			node.getResult().apply(this, question);
		}

		outAMethodTypeCG(node, question);

	}


	/**
	* Called by the {@link AMethodTypeCG} node from {@link AMethodTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodTypeCG} node
	*/
	public void inAMethodTypeCG(AMethodTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AMethodTypeCG} node from {@link AMethodTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodTypeCG} node
	*/
	public void outAMethodTypeCG(AMethodTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public void defaultInSMapTypeCG(SMapTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public void defaultOutSMapTypeCG(SMapTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public void defaultSMapTypeCG(SMapTypeCG node, Q question) throws AnalysisException
	{
		defaultSTypeCG(node, question);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public void inSMapTypeCG(SMapTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public void outSMapTypeCG(SMapTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public void defaultInSSetTypeCG(SSetTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public void defaultOutSSetTypeCG(SSetTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public void defaultSSetTypeCG(SSetTypeCG node, Q question) throws AnalysisException
	{
		defaultSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public void inSSetTypeCG(SSetTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public void outSSetTypeCG(SSetTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public void defaultInSSeqTypeCG(SSeqTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public void defaultOutSSeqTypeCG(SSeqTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public void defaultSSeqTypeCG(SSeqTypeCG node, Q question) throws AnalysisException
	{
		defaultSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public void inSSeqTypeCG(SSeqTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public void outSSeqTypeCG(SSeqTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public void defaultInSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public void defaultOutSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public void defaultSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public void inSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public void outSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AErrorTypeCG} node from {@link AErrorTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorTypeCG} node
	*/
	public void caseAErrorTypeCG(AErrorTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAErrorTypeCG(node, question);


		outAErrorTypeCG(node, question);

	}


	/**
	* Called by the {@link AErrorTypeCG} node from {@link AErrorTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorTypeCG} node
	*/
	public void inAErrorTypeCG(AErrorTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AErrorTypeCG} node from {@link AErrorTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorTypeCG} node
	*/
	public void outAErrorTypeCG(AErrorTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AInterfaceTypeCG} node from {@link AInterfaceTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceTypeCG} node
	*/
	public void caseAInterfaceTypeCG(AInterfaceTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAInterfaceTypeCG(node, question);

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAInterfaceTypeCG(node, question);

	}


	/**
	* Called by the {@link AInterfaceTypeCG} node from {@link AInterfaceTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceTypeCG} node
	*/
	public void inAInterfaceTypeCG(AInterfaceTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AInterfaceTypeCG} node from {@link AInterfaceTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceTypeCG} node
	*/
	public void outAInterfaceTypeCG(AInterfaceTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AUnionTypeCG} node from {@link AUnionTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnionTypeCG} node
	*/
	public void caseAUnionTypeCG(AUnionTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAUnionTypeCG(node, question);

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAUnionTypeCG(node, question);

	}


	/**
	* Called by the {@link AUnionTypeCG} node from {@link AUnionTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnionTypeCG} node
	*/
	public void inAUnionTypeCG(AUnionTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AUnionTypeCG} node from {@link AUnionTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnionTypeCG} node
	*/
	public void outAUnionTypeCG(AUnionTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AQuoteTypeCG} node from {@link AQuoteTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteTypeCG} node
	*/
	public void caseAQuoteTypeCG(AQuoteTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAQuoteTypeCG(node, question);


		outAQuoteTypeCG(node, question);

	}


	/**
	* Called by the {@link AQuoteTypeCG} node from {@link AQuoteTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteTypeCG} node
	*/
	public void inAQuoteTypeCG(AQuoteTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AQuoteTypeCG} node from {@link AQuoteTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteTypeCG} node
	*/
	public void outAQuoteTypeCG(AQuoteTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link AUnknownTypeCG} node from {@link AUnknownTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownTypeCG} node
	*/
	public void caseAUnknownTypeCG(AUnknownTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAUnknownTypeCG(node, question);


		outAUnknownTypeCG(node, question);

	}


	/**
	* Called by the {@link AUnknownTypeCG} node from {@link AUnknownTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownTypeCG} node
	*/
	public void inAUnknownTypeCG(AUnknownTypeCG node, Q question) throws AnalysisException
	{
		defaultInSTypeCG(node, question);
	}


	/**
	* Called by the {@link AUnknownTypeCG} node from {@link AUnknownTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownTypeCG} node
	*/
	public void outAUnknownTypeCG(AUnknownTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSTypeCG(node, question);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public void defaultInPExternalType(PExternalType node, Q question) throws AnalysisException
	{
		defaultInINode(node, question);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public void defaultOutPExternalType(PExternalType node, Q question) throws AnalysisException
	{
		defaultOutINode(node, question);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public void defaultPExternalType(PExternalType node, Q question) throws AnalysisException
	{
		defaultINode(node, question);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public void inPExternalType(PExternalType node, Q question) throws AnalysisException
	{
		defaultInINode(node, question);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public void outPExternalType(PExternalType node, Q question) throws AnalysisException
	{
		defaultOutINode(node, question);
	}


	/**
	* Called by the {@link AInfoExternalType} node from {@link AInfoExternalType#apply(IAnalysis)}.
	* @param node the calling {@link AInfoExternalType} node
	*/
	public void caseAInfoExternalType(AInfoExternalType node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAInfoExternalType(node, question);


		outAInfoExternalType(node, question);

	}


	/**
	* Called by the {@link AInfoExternalType} node from {@link AInfoExternalType#apply(IAnalysis)}.
	* @param node the calling {@link AInfoExternalType} node
	*/
	public void inAInfoExternalType(AInfoExternalType node, Q question) throws AnalysisException
	{
		defaultInPExternalType(node, question);
	}


	/**
	* Called by the {@link AInfoExternalType} node from {@link AInfoExternalType#apply(IAnalysis)}.
	* @param node the calling {@link AInfoExternalType} node
	*/
	public void outAInfoExternalType(AInfoExternalType node, Q question) throws AnalysisException
	{
		defaultOutPExternalType(node, question);
	}


	/**
	* Called by the {@link AIntBasicTypeWrappersTypeCG} node from {@link AIntBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntBasicTypeWrappersTypeCG} node
	*/
	public void caseAIntBasicTypeWrappersTypeCG(AIntBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIntBasicTypeWrappersTypeCG(node, question);


		outAIntBasicTypeWrappersTypeCG(node, question);

	}


	/**
	* Called by the {@link AIntBasicTypeWrappersTypeCG} node from {@link AIntBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntBasicTypeWrappersTypeCG} node
	*/
	public void inAIntBasicTypeWrappersTypeCG(AIntBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link AIntBasicTypeWrappersTypeCG} node from {@link AIntBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntBasicTypeWrappersTypeCG} node
	*/
	public void outAIntBasicTypeWrappersTypeCG(AIntBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ANat1BasicTypeWrappersTypeCG} node from {@link ANat1BasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1BasicTypeWrappersTypeCG} node
	*/
	public void caseANat1BasicTypeWrappersTypeCG(ANat1BasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANat1BasicTypeWrappersTypeCG(node, question);


		outANat1BasicTypeWrappersTypeCG(node, question);

	}


	/**
	* Called by the {@link ANat1BasicTypeWrappersTypeCG} node from {@link ANat1BasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1BasicTypeWrappersTypeCG} node
	*/
	public void inANat1BasicTypeWrappersTypeCG(ANat1BasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ANat1BasicTypeWrappersTypeCG} node from {@link ANat1BasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1BasicTypeWrappersTypeCG} node
	*/
	public void outANat1BasicTypeWrappersTypeCG(ANat1BasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ANatBasicTypeWrappersTypeCG} node from {@link ANatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatBasicTypeWrappersTypeCG} node
	*/
	public void caseANatBasicTypeWrappersTypeCG(ANatBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANatBasicTypeWrappersTypeCG(node, question);


		outANatBasicTypeWrappersTypeCG(node, question);

	}


	/**
	* Called by the {@link ANatBasicTypeWrappersTypeCG} node from {@link ANatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatBasicTypeWrappersTypeCG} node
	*/
	public void inANatBasicTypeWrappersTypeCG(ANatBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ANatBasicTypeWrappersTypeCG} node from {@link ANatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatBasicTypeWrappersTypeCG} node
	*/
	public void outANatBasicTypeWrappersTypeCG(ANatBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ARatBasicTypeWrappersTypeCG} node from {@link ARatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatBasicTypeWrappersTypeCG} node
	*/
	public void caseARatBasicTypeWrappersTypeCG(ARatBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARatBasicTypeWrappersTypeCG(node, question);


		outARatBasicTypeWrappersTypeCG(node, question);

	}


	/**
	* Called by the {@link ARatBasicTypeWrappersTypeCG} node from {@link ARatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatBasicTypeWrappersTypeCG} node
	*/
	public void inARatBasicTypeWrappersTypeCG(ARatBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ARatBasicTypeWrappersTypeCG} node from {@link ARatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatBasicTypeWrappersTypeCG} node
	*/
	public void outARatBasicTypeWrappersTypeCG(ARatBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ARealBasicTypeWrappersTypeCG} node from {@link ARealBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealBasicTypeWrappersTypeCG} node
	*/
	public void caseARealBasicTypeWrappersTypeCG(ARealBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARealBasicTypeWrappersTypeCG(node, question);


		outARealBasicTypeWrappersTypeCG(node, question);

	}


	/**
	* Called by the {@link ARealBasicTypeWrappersTypeCG} node from {@link ARealBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealBasicTypeWrappersTypeCG} node
	*/
	public void inARealBasicTypeWrappersTypeCG(ARealBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ARealBasicTypeWrappersTypeCG} node from {@link ARealBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealBasicTypeWrappersTypeCG} node
	*/
	public void outARealBasicTypeWrappersTypeCG(ARealBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ACharBasicTypeWrappersTypeCG} node from {@link ACharBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeWrappersTypeCG} node
	*/
	public void caseACharBasicTypeWrappersTypeCG(ACharBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACharBasicTypeWrappersTypeCG(node, question);


		outACharBasicTypeWrappersTypeCG(node, question);

	}


	/**
	* Called by the {@link ACharBasicTypeWrappersTypeCG} node from {@link ACharBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeWrappersTypeCG} node
	*/
	public void inACharBasicTypeWrappersTypeCG(ACharBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ACharBasicTypeWrappersTypeCG} node from {@link ACharBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeWrappersTypeCG} node
	*/
	public void outACharBasicTypeWrappersTypeCG(ACharBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ABoolBasicTypeWrappersTypeCG} node from {@link ABoolBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeWrappersTypeCG} node
	*/
	public void caseABoolBasicTypeWrappersTypeCG(ABoolBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABoolBasicTypeWrappersTypeCG(node, question);


		outABoolBasicTypeWrappersTypeCG(node, question);

	}


	/**
	* Called by the {@link ABoolBasicTypeWrappersTypeCG} node from {@link ABoolBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeWrappersTypeCG} node
	*/
	public void inABoolBasicTypeWrappersTypeCG(ABoolBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ABoolBasicTypeWrappersTypeCG} node from {@link ABoolBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeWrappersTypeCG} node
	*/
	public void outABoolBasicTypeWrappersTypeCG(ABoolBasicTypeWrappersTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeWrappersTypeCG(node, question);
	}


	/**
	* Called by the {@link ASetSetTypeCG} node from {@link ASetSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSetTypeCG} node
	*/
	public void caseASetSetTypeCG(ASetSetTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASetSetTypeCG(node, question);

		if(node.getSetOf() != null && !_visitedNodes.contains(node.getSetOf())) 
		{
			node.getSetOf().apply(this, question);
		}

		outASetSetTypeCG(node, question);

	}


	/**
	* Called by the {@link ASetSetTypeCG} node from {@link ASetSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSetTypeCG} node
	*/
	public void inASetSetTypeCG(ASetSetTypeCG node, Q question) throws AnalysisException
	{
		defaultInSSetTypeCG(node, question);
	}


	/**
	* Called by the {@link ASetSetTypeCG} node from {@link ASetSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSetTypeCG} node
	*/
	public void outASetSetTypeCG(ASetSetTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSSetTypeCG(node, question);
	}


	/**
	* Called by the {@link ASeqSeqTypeCG} node from {@link ASeqSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqTypeCG} node
	*/
	public void caseASeqSeqTypeCG(ASeqSeqTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inASeqSeqTypeCG(node, question);

		if(node.getSeqOf() != null && !_visitedNodes.contains(node.getSeqOf())) 
		{
			node.getSeqOf().apply(this, question);
		}

		outASeqSeqTypeCG(node, question);

	}


	/**
	* Called by the {@link ASeqSeqTypeCG} node from {@link ASeqSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqTypeCG} node
	*/
	public void inASeqSeqTypeCG(ASeqSeqTypeCG node, Q question) throws AnalysisException
	{
		defaultInSSeqTypeCG(node, question);
	}


	/**
	* Called by the {@link ASeqSeqTypeCG} node from {@link ASeqSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqTypeCG} node
	*/
	public void outASeqSeqTypeCG(ASeqSeqTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSSeqTypeCG(node, question);
	}


	/**
	* Called by the {@link AMapMapTypeCG} node from {@link AMapMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapTypeCG} node
	*/
	public void caseAMapMapTypeCG(AMapMapTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAMapMapTypeCG(node, question);

		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			node.getFrom().apply(this, question);
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			node.getTo().apply(this, question);
		}

		outAMapMapTypeCG(node, question);

	}


	/**
	* Called by the {@link AMapMapTypeCG} node from {@link AMapMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapTypeCG} node
	*/
	public void inAMapMapTypeCG(AMapMapTypeCG node, Q question) throws AnalysisException
	{
		defaultInSMapTypeCG(node, question);
	}


	/**
	* Called by the {@link AMapMapTypeCG} node from {@link AMapMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapTypeCG} node
	*/
	public void outAMapMapTypeCG(AMapMapTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSMapTypeCG(node, question);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public void defaultInSNumericBasicTypeCG(SNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public void defaultOutSNumericBasicTypeCG(SNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public void defaultSNumericBasicTypeCG(SNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public void inSNumericBasicTypeCG(SNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public void outSNumericBasicTypeCG(SNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ACharBasicTypeCG} node from {@link ACharBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeCG} node
	*/
	public void caseACharBasicTypeCG(ACharBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inACharBasicTypeCG(node, question);


		outACharBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link ACharBasicTypeCG} node from {@link ACharBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeCG} node
	*/
	public void inACharBasicTypeCG(ACharBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ACharBasicTypeCG} node from {@link ACharBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeCG} node
	*/
	public void outACharBasicTypeCG(ACharBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ABoolBasicTypeCG} node from {@link ABoolBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeCG} node
	*/
	public void caseABoolBasicTypeCG(ABoolBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABoolBasicTypeCG(node, question);


		outABoolBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link ABoolBasicTypeCG} node from {@link ABoolBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeCG} node
	*/
	public void inABoolBasicTypeCG(ABoolBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ABoolBasicTypeCG} node from {@link ABoolBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeCG} node
	*/
	public void outABoolBasicTypeCG(ABoolBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ATokenBasicTypeCG} node from {@link ATokenBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicTypeCG} node
	*/
	public void caseATokenBasicTypeCG(ATokenBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATokenBasicTypeCG(node, question);


		outATokenBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link ATokenBasicTypeCG} node from {@link ATokenBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicTypeCG} node
	*/
	public void inATokenBasicTypeCG(ATokenBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ATokenBasicTypeCG} node from {@link ATokenBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicTypeCG} node
	*/
	public void outATokenBasicTypeCG(ATokenBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link AIntNumericBasicTypeCG} node from {@link AIntNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicTypeCG} node
	*/
	public void caseAIntNumericBasicTypeCG(AIntNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAIntNumericBasicTypeCG(node, question);


		outAIntNumericBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link AIntNumericBasicTypeCG} node from {@link AIntNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicTypeCG} node
	*/
	public void inAIntNumericBasicTypeCG(AIntNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link AIntNumericBasicTypeCG} node from {@link AIntNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicTypeCG} node
	*/
	public void outAIntNumericBasicTypeCG(AIntNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ANat1NumericBasicTypeCG} node from {@link ANat1NumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1NumericBasicTypeCG} node
	*/
	public void caseANat1NumericBasicTypeCG(ANat1NumericBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANat1NumericBasicTypeCG(node, question);


		outANat1NumericBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link ANat1NumericBasicTypeCG} node from {@link ANat1NumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1NumericBasicTypeCG} node
	*/
	public void inANat1NumericBasicTypeCG(ANat1NumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ANat1NumericBasicTypeCG} node from {@link ANat1NumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1NumericBasicTypeCG} node
	*/
	public void outANat1NumericBasicTypeCG(ANat1NumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ANatNumericBasicTypeCG} node from {@link ANatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicTypeCG} node
	*/
	public void caseANatNumericBasicTypeCG(ANatNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inANatNumericBasicTypeCG(node, question);


		outANatNumericBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link ANatNumericBasicTypeCG} node from {@link ANatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicTypeCG} node
	*/
	public void inANatNumericBasicTypeCG(ANatNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ANatNumericBasicTypeCG} node from {@link ANatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicTypeCG} node
	*/
	public void outANatNumericBasicTypeCG(ANatNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ARatNumericBasicTypeCG} node from {@link ARatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatNumericBasicTypeCG} node
	*/
	public void caseARatNumericBasicTypeCG(ARatNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARatNumericBasicTypeCG(node, question);


		outARatNumericBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link ARatNumericBasicTypeCG} node from {@link ARatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatNumericBasicTypeCG} node
	*/
	public void inARatNumericBasicTypeCG(ARatNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ARatNumericBasicTypeCG} node from {@link ARatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatNumericBasicTypeCG} node
	*/
	public void outARatNumericBasicTypeCG(ARatNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ARealNumericBasicTypeCG} node from {@link ARealNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicTypeCG} node
	*/
	public void caseARealNumericBasicTypeCG(ARealNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARealNumericBasicTypeCG(node, question);


		outARealNumericBasicTypeCG(node, question);

	}


	/**
	* Called by the {@link ARealNumericBasicTypeCG} node from {@link ARealNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicTypeCG} node
	*/
	public void inARealNumericBasicTypeCG(ARealNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultInSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ARealNumericBasicTypeCG} node from {@link ARealNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicTypeCG} node
	*/
	public void outARealNumericBasicTypeCG(ARealNumericBasicTypeCG node, Q question) throws AnalysisException
	{
		defaultOutSNumericBasicTypeCG(node, question);
	}


	/**
	* Called by the {@link ATraceDeclTermCG} node from {@link ATraceDeclTermCG#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDeclTermCG} node
	*/
	public void caseATraceDeclTermCG(ATraceDeclTermCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inATraceDeclTermCG(node, question);

		{
			List<STraceDeclCG> copy = new ArrayList<STraceDeclCG>(node.getTraceDecls());
			for( STraceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outATraceDeclTermCG(node, question);

	}


	/**
	* Called by the {@link ATraceDeclTermCG} node from {@link ATraceDeclTermCG#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDeclTermCG} node
	*/
	public void inATraceDeclTermCG(ATraceDeclTermCG node, Q question) throws AnalysisException
	{
		defaultInSTermCG(node, question);
	}


	/**
	* Called by the {@link ATraceDeclTermCG} node from {@link ATraceDeclTermCG#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDeclTermCG} node
	*/
	public void outATraceDeclTermCG(ATraceDeclTermCG node, Q question) throws AnalysisException
	{
		defaultOutSTermCG(node, question);
	}


	/**
	* Called by the {@link AInstanceTraceDeclCG} node from {@link AInstanceTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDeclCG} node
	*/
	public void caseAInstanceTraceDeclCG(AInstanceTraceDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAInstanceTraceDeclCG(node, question);


		outAInstanceTraceDeclCG(node, question);

	}


	/**
	* Called by the {@link AInstanceTraceDeclCG} node from {@link AInstanceTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDeclCG} node
	*/
	public void inAInstanceTraceDeclCG(AInstanceTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultInSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link AInstanceTraceDeclCG} node from {@link AInstanceTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDeclCG} node
	*/
	public void outAInstanceTraceDeclCG(AInstanceTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDeclCG} node from {@link ALetBeStBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDeclCG} node
	*/
	public void caseALetBeStBindingTraceDeclCG(ALetBeStBindingTraceDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALetBeStBindingTraceDeclCG(node, question);

		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			node.getBind().apply(this, question);
		}
		if(node.getStExp() != null && !_visitedNodes.contains(node.getStExp())) 
		{
			node.getStExp().apply(this, question);
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outALetBeStBindingTraceDeclCG(node, question);

	}


	/**
	* Called by the {@link ALetBeStBindingTraceDeclCG} node from {@link ALetBeStBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDeclCG} node
	*/
	public void inALetBeStBindingTraceDeclCG(ALetBeStBindingTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultInSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDeclCG} node from {@link ALetBeStBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDeclCG} node
	*/
	public void outALetBeStBindingTraceDeclCG(ALetBeStBindingTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link ALetDefBindingTraceDeclCG} node from {@link ALetDefBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDeclCG} node
	*/
	public void caseALetDefBindingTraceDeclCG(ALetDefBindingTraceDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inALetDefBindingTraceDeclCG(node, question);

		{
			List<SDeclCG> copy = new ArrayList<SDeclCG>(node.getLocalDecls());
			for( SDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			node.getBody().apply(this, question);
		}

		outALetDefBindingTraceDeclCG(node, question);

	}


	/**
	* Called by the {@link ALetDefBindingTraceDeclCG} node from {@link ALetDefBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDeclCG} node
	*/
	public void inALetDefBindingTraceDeclCG(ALetDefBindingTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultInSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link ALetDefBindingTraceDeclCG} node from {@link ALetDefBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDeclCG} node
	*/
	public void outALetDefBindingTraceDeclCG(ALetDefBindingTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link ARepeatTraceDeclCG} node from {@link ARepeatTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDeclCG} node
	*/
	public void caseARepeatTraceDeclCG(ARepeatTraceDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inARepeatTraceDeclCG(node, question);

		if(node.getCore() != null && !_visitedNodes.contains(node.getCore())) 
		{
			node.getCore().apply(this, question);
		}

		outARepeatTraceDeclCG(node, question);

	}


	/**
	* Called by the {@link ARepeatTraceDeclCG} node from {@link ARepeatTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDeclCG} node
	*/
	public void inARepeatTraceDeclCG(ARepeatTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultInSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link ARepeatTraceDeclCG} node from {@link ARepeatTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDeclCG} node
	*/
	public void outARepeatTraceDeclCG(ARepeatTraceDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSTraceDeclCG(node, question);
	}


	/**
	* Called by the {@link AApplyExpTraceCoreDeclCG} node from {@link AApplyExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpTraceCoreDeclCG} node
	*/
	public void caseAApplyExpTraceCoreDeclCG(AApplyExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAApplyExpTraceCoreDeclCG(node, question);

		if(node.getCallStm() != null && !_visitedNodes.contains(node.getCallStm())) 
		{
			node.getCallStm().apply(this, question);
		}

		outAApplyExpTraceCoreDeclCG(node, question);

	}


	/**
	* Called by the {@link AApplyExpTraceCoreDeclCG} node from {@link AApplyExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpTraceCoreDeclCG} node
	*/
	public void inAApplyExpTraceCoreDeclCG(AApplyExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultInSTraceCoreDeclCG(node, question);
	}


	/**
	* Called by the {@link AApplyExpTraceCoreDeclCG} node from {@link AApplyExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpTraceCoreDeclCG} node
	*/
	public void outAApplyExpTraceCoreDeclCG(AApplyExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSTraceCoreDeclCG(node, question);
	}


	/**
	* Called by the {@link ABracketedExpTraceCoreDeclCG} node from {@link ABracketedExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpTraceCoreDeclCG} node
	*/
	public void caseABracketedExpTraceCoreDeclCG(ABracketedExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inABracketedExpTraceCoreDeclCG(node, question);

		{
			List<ATraceDeclTermCG> copy = new ArrayList<ATraceDeclTermCG>(node.getTerms());
			for( ATraceDeclTermCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outABracketedExpTraceCoreDeclCG(node, question);

	}


	/**
	* Called by the {@link ABracketedExpTraceCoreDeclCG} node from {@link ABracketedExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpTraceCoreDeclCG} node
	*/
	public void inABracketedExpTraceCoreDeclCG(ABracketedExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultInSTraceCoreDeclCG(node, question);
	}


	/**
	* Called by the {@link ABracketedExpTraceCoreDeclCG} node from {@link ABracketedExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpTraceCoreDeclCG} node
	*/
	public void outABracketedExpTraceCoreDeclCG(ABracketedExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSTraceCoreDeclCG(node, question);
	}


	/**
	* Called by the {@link AConcurrentExpTraceCoreDeclCG} node from {@link AConcurrentExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpTraceCoreDeclCG} node
	*/
	public void caseAConcurrentExpTraceCoreDeclCG(AConcurrentExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		_visitedNodes.add(node);
		inAConcurrentExpTraceCoreDeclCG(node, question);

		{
			List<STraceDeclCG> copy = new ArrayList<STraceDeclCG>(node.getDecls());
			for( STraceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					e.apply(this, question);
				}
			}
		}

		outAConcurrentExpTraceCoreDeclCG(node, question);

	}


	/**
	* Called by the {@link AConcurrentExpTraceCoreDeclCG} node from {@link AConcurrentExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpTraceCoreDeclCG} node
	*/
	public void inAConcurrentExpTraceCoreDeclCG(AConcurrentExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultInSTraceCoreDeclCG(node, question);
	}


	/**
	* Called by the {@link AConcurrentExpTraceCoreDeclCG} node from {@link AConcurrentExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpTraceCoreDeclCG} node
	*/
	public void outAConcurrentExpTraceCoreDeclCG(AConcurrentExpTraceCoreDeclCG node, Q question) throws AnalysisException
	{
		defaultOutSTraceCoreDeclCG(node, question);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public void defaultOutINode(INode node, Q question) throws AnalysisException
	{
		//nothing to do
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public void defaultInINode(INode node, Q question) throws AnalysisException
	{
		//nothing to do
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public void defaultINode(INode node, Q question) throws AnalysisException
	{
		//nothing to do
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void defaultOutIToken(IToken node, Q question) throws AnalysisException
	{
		//nothing to do
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void defaultInIToken(IToken node, Q question) throws AnalysisException
	{
		//nothing to do
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void defaultIToken(IToken node, Q question) throws AnalysisException
	{
		//nothing to do
	}



}
