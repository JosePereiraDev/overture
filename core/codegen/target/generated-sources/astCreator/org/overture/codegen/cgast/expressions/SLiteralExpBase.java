/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.expressions;


import java.util.Map;
import org.overture.codegen.cgast.STypeCG;
import java.lang.Boolean;
import java.lang.Object;
import java.util.HashMap;
import org.overture.codegen.cgast.INode;
import java.lang.String;
import org.overture.codegen.ir.SourceNode;
import org.overture.codegen.cgast.SExpCGBase;
import org.overture.codegen.cgast.expressions.SLiteralExpCG;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public abstract class SLiteralExpBase extends SExpCGBase implements SLiteralExpCG
{
	private static final long serialVersionUID = 1L;


	/**
	* Creates a new {@code SLiteralExpBase TAG=#Literal} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	*/
	public SLiteralExpBase(SourceNode sourceNode_, STypeCG type_)
	{
		super(sourceNode_,null,type_);

	}


	/**
	 * Creates a new {@link SLiteralExpBase} node with no children.
	 */
	public SLiteralExpBase()
	{

	}


	/**
	* Creates a new {@code SLiteralExpBase} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	*/
	public SLiteralExpBase(SourceNode sourceNode_, Object tag_, STypeCG type_)
	{
		super(sourceNode_,tag_,type_);

	}


	/**
	 * Returns a deep clone of this {@link SLiteralExpBase} node.
	 * @return a deep clone of this {@link SLiteralExpBase} node
	 */
	@Override
	public abstract SLiteralExpCG clone();


	public String toString()
	{
		return super.toString();

	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof SLiteralExpBase)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		return fields;
	}


	/**
	 * Creates a deep clone of this {@link SLiteralExpBase} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link SLiteralExpBase} node
	 */
	@Override
	public abstract SLiteralExpCG clone(Map<INode,INode> oldToNewMap);

	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link SLiteralExpBase} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link SLiteralExpBase} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link SLiteralExpBase} node
	 */
	public void removeChild(INode child)
	{
		if (this._type == child) {
			this._type = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}



}
