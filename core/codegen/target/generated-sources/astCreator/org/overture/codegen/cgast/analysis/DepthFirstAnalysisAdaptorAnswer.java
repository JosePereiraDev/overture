/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.analysis;


import org.overture.codegen.cgast.types.AObjectTypeCG;
import org.overture.codegen.cgast.expressions.ASubtractNumericBinaryExpCG;
import org.overture.codegen.cgast.patterns.ARecordPatternCG;
import org.overture.codegen.cgast.expressions.AIsolationUnaryExpCG;
import org.overture.codegen.cgast.expressions.ANullExpCG;
import org.overture.codegen.cgast.expressions.ARealIsExpCG;
import org.overture.codegen.cgast.STraceCoreDeclCG;
import org.overture.codegen.cgast.types.ACharBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AForAllQuantifierExpCG;
import java.lang.Integer;
import org.overture.codegen.cgast.types.AErrorTypeCG;
import org.overture.codegen.cgast.expressions.ABoolLiteralExpCG;
import org.overture.codegen.cgast.statements.AAssignmentStmCG;
import org.overture.codegen.cgast.statements.ALocalAssignmentStmCG;
import java.lang.Long;
import org.overture.codegen.cgast.types.SBasicTypeCG;
import org.overture.codegen.cgast.patterns.ARealPatternCG;
import org.overture.codegen.cgast.traces.ABracketedExpTraceCoreDeclCG;
import org.overture.codegen.cgast.expressions.AAssignExpExpCG;
import org.overture.codegen.cgast.expressions.AMapOverrideBinaryExpCG;
import org.overture.codegen.cgast.statements.ACasesStmCG;
import org.overture.codegen.cgast.types.AStringTypeCG;
import org.overture.codegen.cgast.statements.AForLoopStmCG;
import org.overture.codegen.cgast.expressions.ADeRefExpCG;
import org.overture.codegen.cgast.expressions.ASetUnionBinaryExpCG;
import org.overture.codegen.cgast.expressions.ALetBeStNoBindingRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.AAndBoolBinaryExpCG;
import org.overture.codegen.cgast.expressions.AIntDivNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ADistIntersectUnaryExpCG;
import org.overture.codegen.cgast.traces.AConcurrentExpTraceCoreDeclCG;
import org.overture.codegen.cgast.statements.ASuperCallStmCG;
import org.overture.codegen.cgast.expressions.AStringLiteralExpCG;
import org.overture.codegen.cgast.expressions.ATypeArgExpCG;
import org.overture.codegen.cgast.expressions.ALessNumericBinaryExpCG;
import org.overture.codegen.cgast.declarations.ATypeDeclCG;
import org.overture.codegen.cgast.types.ARatNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.AAbsUnaryExpCG;
import org.overture.codegen.cgast.expressions.AFieldExpCG;
import org.overture.codegen.cgast.expressions.ARecordModExpCG;
import org.overture.codegen.cgast.types.ARealNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.ATupleIsExpCG;
import org.overture.codegen.cgast.expressions.AInSetBinaryExpCG;
import org.overture.codegen.cgast.SObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AModNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.AIfStmCG;
import org.overture.codegen.cgast.types.ABoolBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.types.ACharBasicTypeCG;
import org.overture.codegen.cgast.expressions.APreDecExpCG;
import org.overture.codegen.cgast.statements.APlainCallStmCG;
import org.overture.codegen.cgast.expressions.AGreaterEqualNumericBinaryExpCG;
import org.overture.codegen.cgast.types.SSeqTypeCG;
import org.overture.codegen.cgast.expressions.ASelfExpCG;
import org.overture.codegen.cgast.expressions.APowerSetUnaryExpCG;
import org.overture.codegen.cgast.expressions.ANotImplementedExpCG;
import org.overture.codegen.cgast.expressions.ADomainResByBinaryExpCG;
import org.overture.codegen.cgast.patterns.ACharPatternCG;
import org.overture.codegen.cgast.types.AInterfaceTypeCG;
import org.overture.codegen.cgast.expressions.SAltExpExpCG;
import org.overture.codegen.cgast.statements.ACallObjectStmCG;
import org.overture.codegen.cgast.statements.AFieldStateDesignatorCG;
import org.overture.codegen.cgast.utils.PExternalType;
import org.overture.codegen.cgast.expressions.APreIncExpCG;
import org.overture.codegen.cgast.expressions.SIsExpCG;
import org.overture.codegen.cgast.SStmCG;
import org.overture.codegen.cgast.expressions.AElemsUnaryExpCG;
import org.overture.codegen.cgast.statements.AForIndexStmCG;
import org.overture.codegen.cgast.expressions.AMapInverseUnaryExpCG;
import org.overture.codegen.cgast.traces.ATraceDeclTermCG;
import org.overture.codegen.cgast.declarations.AMutexSyncDeclCG;
import org.overture.codegen.cgast.expressions.SMapExpCG;
import org.overture.codegen.cgast.traces.AInstanceTraceDeclCG;
import org.overture.codegen.cgast.expressions.AEnumMapExpCG;
import org.overture.codegen.cgast.expressions.APowerNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.AEnumSetExpCG;
import org.overture.codegen.cgast.SLocalParamCG;
import org.overture.codegen.cgast.expressions.SSetExpCG;
import org.overture.codegen.cgast.expressions.ACharIsExpCG;
import org.overture.codegen.cgast.INode;
import org.overture.codegen.cgast.expressions.ACompMapExpCG;
import org.overture.codegen.cgast.expressions.ADistConcatUnaryExpCG;
import org.overture.codegen.cgast.statements.ACallObjectExpStmCG;
import org.overture.codegen.cgast.types.AVoidTypeCG;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import org.overture.codegen.cgast.types.AIntNumericBasicTypeCG;
import org.overture.codegen.cgast.types.ATokenBasicTypeCG;
import org.overture.codegen.cgast.expressions.AOrBoolBinaryExpCG;
import org.overture.codegen.cgast.types.ATemplateTypeCG;
import org.overture.codegen.cgast.declarations.AMethodDeclCG;
import org.overture.codegen.cgast.traces.ALetBeStBindingTraceDeclCG;
import org.overture.codegen.cgast.types.AExternalTypeCG;
import org.overture.codegen.cgast.types.ARealBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.APreCondRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.AExistsQuantifierExpCG;
import org.overture.codegen.cgast.patterns.AStringPatternCG;
import org.overture.codegen.cgast.expressions.ACompSetExpCG;
import org.overture.codegen.cgast.statements.ALetBeStStmCG;
import org.overture.codegen.cgast.statements.AStartlistStmCG;
import org.overture.codegen.cgast.patterns.ANullPatternCG;
import org.overture.codegen.cgast.expressions.ADistMergeUnaryExpCG;
import org.overture.codegen.cgast.types.ATupleTypeCG;
import org.overture.codegen.cgast.expressions.ADistUnionUnaryExpCG;
import org.overture.codegen.cgast.expressions.ATimeExpCG;
import org.overture.codegen.cgast.types.AIntBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.analysis.intf.IAnswer;
import org.overture.codegen.cgast.expressions.AMkBasicExpCG;
import org.overture.codegen.cgast.expressions.AQuoteLiteralExpCG;
import org.overture.codegen.cgast.expressions.AMapletExpCG;
import org.overture.codegen.cgast.utils.AHeaderLetBeStCG;
import org.overture.codegen.cgast.expressions.AExists1QuantifierExpCG;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.declarations.AVarDeclCG;
import org.overture.codegen.cgast.expressions.ADomainResToBinaryExpCG;
import org.overture.codegen.cgast.expressions.ARemNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ANat1IsExpCG;
import org.overture.codegen.cgast.expressions.AAddrNotEqualsBinaryExpCG;
import org.overture.codegen.cgast.expressions.AHistoryExpCG;
import org.overture.codegen.cgast.statements.SAltStmStmCG;
import org.overture.codegen.cgast.SBindCG;
import org.overture.codegen.cgast.statements.AWhileStmCG;
import java.lang.Boolean;
import org.overture.codegen.cgast.statements.AForAllStmCG;
import java.util.LinkedList;
import org.overture.codegen.cgast.expressions.ASetIntersectBinaryExpCG;
import org.overture.codegen.cgast.types.AClassTypeCG;
import org.overture.codegen.cgast.expressions.APlusUnaryExpCG;
import org.overture.codegen.cgast.expressions.AIndicesUnaryExpCG;
import org.overture.codegen.cgast.SLetBeStCG;
import org.overture.codegen.cgast.expressions.ATupleCompatibilityExpCG;
import org.overture.codegen.cgast.expressions.ARangeResToBinaryExpCG;
import org.overture.codegen.cgast.statements.AApplyObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.ASetProperSubsetBinaryExpCG;
import org.overture.codegen.cgast.expressions.ALessEqualNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ANotUnaryExpCG;
import org.overture.codegen.cgast.declarations.APersyncDeclCG;
import org.overture.codegen.cgast.expressions.AReverseUnaryExpCG;
import org.overture.codegen.cgast.name.ATypeNameCG;
import org.overture.codegen.cgast.types.AQuoteTypeCG;
import java.lang.Object;
import org.overture.codegen.cgast.expressions.AMethodInstantiationExpCG;
import org.overture.ast.types.PType;
import org.overture.codegen.cgast.expressions.ACharLiteralExpCG;
import org.overture.codegen.cgast.statements.AStackDeclStmCG;
import org.overture.codegen.cgast.expressions.SRuntimeErrorExpCG;
import org.overture.codegen.cgast.patterns.AQuotePatternCG;
import org.overture.codegen.cgast.types.SBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AMinusUnaryExpCG;
import org.overture.codegen.cgast.expressions.AMapDomainUnaryExpCG;
import org.overture.codegen.cgast.expressions.ARangeResByBinaryExpCG;
import org.overture.codegen.cgast.types.AMethodTypeCG;
import org.overture.codegen.cgast.declarations.AFormalParamLocalParamCG;
import org.overture.codegen.cgast.expressions.SQuantifierExpCG;
import org.overture.codegen.cgast.statements.AIncrementStmCG;
import org.overture.codegen.cgast.expressions.ADivideNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ASeqToStringUnaryExpCG;
import org.overture.codegen.cgast.expressions.APatternMatchRuntimeErrorExpCG;
import org.overture.codegen.cgast.statements.AIdentifierStateDesignatorCG;
import org.overture.codegen.cgast.declarations.ARecordDeclCG;
import org.overture.codegen.cgast.expressions.AAnonymousClassExpCG;
import org.overture.codegen.cgast.patterns.ATuplePatternCG;
import org.overture.codegen.cgast.expressions.ANewExpCG;
import org.overture.codegen.cgast.expressions.ACastUnaryExpCG;
import java.lang.Character;
import org.overture.codegen.cgast.expressions.SUnaryExpCG;
import org.overture.codegen.cgast.expressions.APostIncExpCG;
import org.overture.codegen.cgast.expressions.ANatIsExpCG;
import org.overture.codegen.cgast.expressions.AIntLiteralExpCG;
import org.overture.codegen.cgast.types.ANat1NumericBasicTypeCG;
import org.overture.codegen.cgast.statements.AFieldObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AUndefinedExpCG;
import org.overture.codegen.cgast.traces.AApplyExpTraceCoreDeclCG;
import org.overture.codegen.cgast.statements.AStartStmCG;
import org.overture.codegen.cgast.expressions.SBoolBinaryExpCG;
import org.overture.codegen.cgast.expressions.SLiteralExpCG;
import org.overture.codegen.cgast.statements.AIdentifierObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.ABoolIsExpCG;
import org.overture.codegen.cgast.expressions.AGeneralIsExpCG;
import org.overture.codegen.cgast.expressions.AStringToSeqUnaryExpCG;
import org.overture.codegen.cgast.PCG;
import org.overture.codegen.cgast.expressions.APostDecExpCG;
import org.overture.codegen.cgast.expressions.ATailUnaryExpCG;
import java.util.Set;
import org.overture.codegen.cgast.expressions.ASeqModificationBinaryExpCG;
import org.overture.codegen.cgast.types.SSetTypeCG;
import org.overture.codegen.cgast.statements.SCallStmCG;
import org.overture.codegen.cgast.statements.AContinueStmCG;
import org.overture.codegen.cgast.expressions.ACaseAltExpExpCG;
import org.overture.codegen.cgast.expressions.ASuperVarExpCG;
import org.overture.codegen.cgast.statements.AMapSeqStateDesignatorCG;
import org.overture.codegen.cgast.SMultipleBindCG;
import org.overture.codegen.cgast.expressions.AApplyExpCG;
import org.overture.codegen.cgast.expressions.ACompSeqExpCG;
import java.lang.Double;
import org.overture.codegen.cgast.expressions.ASubSeqExpCG;
import org.overture.codegen.cgast.SPatternCG;
import org.overture.codegen.cgast.expressions.ARecordModifierCG;
import org.overture.codegen.cgast.expressions.ACasesExpCG;
import org.overture.codegen.cgast.statements.AReturnStmCG;
import org.overture.codegen.cgast.types.AMapMapTypeCG;
import java.util.ArrayList;
import org.overture.codegen.cgast.expressions.ALetDefExpCG;
import org.overture.codegen.cgast.expressions.ASetSubsetBinaryExpCG;
import java.lang.String;
import org.overture.codegen.cgast.expressions.ATimesNumericBinaryExpCG;
import org.overture.codegen.ir.SourceNode;
import org.overture.codegen.cgast.statements.ANewObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AAddrEqualsBinaryExpCG;
import org.overture.codegen.cgast.statements.ACaseAltStmStmCG;
import org.overture.codegen.cgast.expressions.AExplicitVarExpCG;
import org.overture.codegen.cgast.types.SNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.AThreadIdExpCG;
import org.overture.codegen.cgast.expressions.AFieldNumberExpCG;
import org.overture.codegen.cgast.types.ABoolBasicTypeCG;
import org.overture.codegen.cgast.patterns.ABoolPatternCG;
import org.overture.codegen.cgast.types.ARecordTypeCG;
import org.overture.codegen.cgast.statements.ABreakStmCG;
import org.overture.codegen.cgast.statements.ALocalPatternAssignmentStmCG;
import org.overture.codegen.cgast.types.ASetSetTypeCG;
import org.overture.codegen.cgast.SExpCG;
import org.overture.codegen.cgast.types.SMapTypeCG;
import org.overture.codegen.cgast.patterns.ASetMultipleBindCG;
import org.overture.codegen.cgast.STraceDeclCG;
import org.overture.codegen.cgast.patterns.AIgnorePatternCG;
import org.overture.codegen.cgast.STypeCG;
import org.overture.codegen.cgast.expressions.ALetBeStExpCG;
import org.overture.codegen.cgast.name.ATokenNameCG;
import org.overture.codegen.cgast.expressions.AInstanceofExpCG;
import org.overture.codegen.cgast.SDeclCG;
import org.overture.codegen.cgast.expressions.AMapRangeUnaryExpCG;
import org.overture.codegen.cgast.expressions.ALenUnaryExpCG;
import org.overture.codegen.cgast.expressions.ACardUnaryExpCG;
import org.overture.codegen.cgast.declarations.AFuncDeclCG;
import org.overture.codegen.cgast.declarations.ACatchClauseDeclCG;
import org.overture.codegen.cgast.types.ANatNumericBasicTypeCG;
import org.overture.codegen.cgast.SStateDesignatorCG;
import org.overture.codegen.cgast.statements.ABlockStmCG;
import org.overture.codegen.cgast.statements.ASkipStmCG;
import org.overture.codegen.cgast.declarations.AFieldDeclCG;
import org.overture.codegen.cgast.expressions.AMissingMemberRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.ATupleExpCG;
import org.overture.codegen.cgast.expressions.ARealLiteralExpCG;
import org.overture.codegen.cgast.IToken;
import org.overture.codegen.cgast.statements.ANotImplementedStmCG;
import java.util.List;
import org.overture.codegen.cgast.patterns.AIntPatternCG;
import org.overture.codegen.cgast.expressions.ARatIsExpCG;
import org.overture.codegen.cgast.expressions.ASeqConcatBinaryExpCG;
import org.overture.codegen.cgast.expressions.AFloorUnaryExpCG;
import org.overture.codegen.cgast.statements.ADecrementStmCG;
import org.overture.codegen.cgast.expressions.ALambdaExpCG;
import org.overture.codegen.cgast.types.AUnionTypeCG;
import org.overture.codegen.cgast.expressions.SBinaryExpCG;
import org.overture.codegen.cgast.expressions.AGreaterNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.APeriodicStmCG;
import org.overture.codegen.cgast.expressions.SVarExpCG;
import org.overture.codegen.cgast.expressions.APlusNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.ARaiseErrorStmCG;
import org.overture.codegen.cgast.STermCG;
import org.overture.codegen.cgast.expressions.ATernaryIfExpCG;
import org.overture.codegen.cgast.expressions.SSeqExpCG;
import org.overture.codegen.cgast.expressions.AEnumSeqExpCG;
import org.overture.codegen.cgast.types.ANat1BasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.patterns.ASetBindCG;
import org.overture.codegen.cgast.declarations.AInterfaceDeclCG;
import org.overture.codegen.cgast.expressions.ATokenIsExpCG;
import org.overture.codegen.cgast.expressions.SNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.ATryStmCG;
import org.overture.codegen.cgast.traces.ARepeatTraceDeclCG;
import org.overture.codegen.cgast.traces.ALetDefBindingTraceDeclCG;
import org.overture.codegen.cgast.expressions.AExternalExpCG;
import org.overture.codegen.cgast.utils.AInfoExternalType;
import org.overture.codegen.cgast.patterns.AIdentifierPatternCG;
import org.overture.codegen.cgast.expressions.ANotEqualsBinaryExpCG;
import org.overture.codegen.cgast.statements.AAbstractBodyStmCG;
import org.overture.codegen.cgast.expressions.AHeadUnaryExpCG;
import org.overture.codegen.cgast.types.ASeqSeqTypeCG;
import org.overture.codegen.cgast.expressions.AMapUnionBinaryExpCG;
import org.overture.codegen.cgast.expressions.AIntIsExpCG;
import org.overture.codegen.cgast.SModifierCG;
import org.overture.codegen.cgast.declarations.ANamedTraceDeclCG;
import org.overture.codegen.cgast.statements.ASelfObjectDesignatorCG;
import org.overture.codegen.cgast.types.ANatBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AXorBoolBinaryExpCG;
import org.overture.codegen.cgast.statements.AElseIfStmCG;
import org.overture.codegen.cgast.types.AUnknownTypeCG;
import org.overture.codegen.cgast.declarations.AClassDeclCG;
import org.overture.codegen.cgast.statements.AThrowStmCG;
import org.overture.codegen.cgast.expressions.AEqualsBinaryExpCG;
import org.overture.codegen.cgast.expressions.ASetDifferenceBinaryExpCG;
import org.overture.codegen.cgast.declarations.AThreadDeclCG;
import org.overture.codegen.cgast.types.ARatBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.declarations.ANamedTypeDeclCG;
import org.overture.codegen.cgast.SNameCG;
import org.overture.codegen.cgast.expressions.AIdentifierVarExpCG;
import org.overture.codegen.cgast.statements.AErrorStmCG;
import org.overture.codegen.cgast.expressions.ARangeSetExpCG;
import org.overture.codegen.cgast.expressions.ATupleSizeExpCG;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
@SuppressWarnings({"all"})
public abstract class DepthFirstAnalysisAdaptorAnswer<A> implements IAnswer<A>
{
	private static final long serialVersionUID = 1L;

	protected Set<INode> _visitedNodes = new java.util.HashSet<INode>();
	final protected IAnswer<A> THIS;

	/**
	* Creates a new {@code DepthFirstAnalysisAdaptorAnswer} node with the given nodes as children.
	* The basic child nodes are removed from their previous parents.
	* @param visitedNodes_ the {@link Set} node for the {@code visitedNodes} child of this {@link DepthFirstAnalysisAdaptorAnswer} node
	* @param THIS_ the {@link IAnswer} <b>graph</a> node for the {@code THIS} child of this {@link DepthFirstAnalysisAdaptorAnswer} node.
	*  <i>The parent of this {@code THIS } will not be changed by adding it to this node.</i>
	*/
	public DepthFirstAnalysisAdaptorAnswer(Set<INode> visitedNodes_, IAnswer<A> THIS_)
	{
		super();
		this.setVisitedNodes(visitedNodes_);
		this.THIS = THIS_;

	}


	/**
	 * Creates a new {@link DepthFirstAnalysisAdaptorAnswer} node with no children.
	 */
	public DepthFirstAnalysisAdaptorAnswer()
	{
		this.THIS=this;

	}


	/**
	 * Sets the {@code _visitedNodes} child of this {@link DepthFirstAnalysisAdaptorAnswer} node.
	 * @param value the new {@code _visitedNodes} child of this {@link DepthFirstAnalysisAdaptorAnswer} node
	*/
	public void setVisitedNodes(Set<INode> value)
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A casePType(PType node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inPType(node));


		mergeReturns(retVal,outPType(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inPType(PType node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outPType(PType node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseSourceNode(SourceNode node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inSourceNode(node));


		mergeReturns(retVal,outSourceNode(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inSourceNode(SourceNode node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outSourceNode(SourceNode node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseBoolean(Boolean node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inBoolean(node));


		mergeReturns(retVal,outBoolean(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inBoolean(Boolean node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outBoolean(Boolean node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseLong(Long node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inLong(node));


		mergeReturns(retVal,outLong(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inLong(Long node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outLong(Long node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseInteger(Integer node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inInteger(node));


		mergeReturns(retVal,outInteger(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inInteger(Integer node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outInteger(Integer node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseDouble(Double node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inDouble(node));


		mergeReturns(retVal,outDouble(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inDouble(Double node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outDouble(Double node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseCharacter(Character node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inCharacter(node));


		mergeReturns(retVal,outCharacter(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inCharacter(Character node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outCharacter(Character node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseString(String node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inString(node));


		mergeReturns(retVal,outString(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inString(String node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outString(String node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseObject(Object node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inObject(node));


		mergeReturns(retVal,outObject(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inObject(Object node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outObject(Object node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public A defaultInPCG(PCG node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public A defaultOutPCG(PCG node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public A defaultPCG(PCG node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public A inPCG(PCG node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public A outPCG(PCG node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public A defaultInSPatternCG(SPatternCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public A defaultOutSPatternCG(SPatternCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public A defaultSPatternCG(SPatternCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public A inSPatternCG(SPatternCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public A outSPatternCG(SPatternCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public A defaultInSBindCG(SBindCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public A defaultOutSBindCG(SBindCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public A defaultSBindCG(SBindCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public A inSBindCG(SBindCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public A outSBindCG(SBindCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public A defaultInSMultipleBindCG(SMultipleBindCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public A defaultOutSMultipleBindCG(SMultipleBindCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public A defaultSMultipleBindCG(SMultipleBindCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public A inSMultipleBindCG(SMultipleBindCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public A outSMultipleBindCG(SMultipleBindCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public A defaultInSNameCG(SNameCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public A defaultOutSNameCG(SNameCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public A defaultSNameCG(SNameCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public A inSNameCG(SNameCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public A outSNameCG(SNameCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public A defaultInSDeclCG(SDeclCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public A defaultOutSDeclCG(SDeclCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public A defaultSDeclCG(SDeclCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public A inSDeclCG(SDeclCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public A outSDeclCG(SDeclCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public A defaultInSStateDesignatorCG(SStateDesignatorCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public A defaultOutSStateDesignatorCG(SStateDesignatorCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public A defaultSStateDesignatorCG(SStateDesignatorCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public A inSStateDesignatorCG(SStateDesignatorCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public A outSStateDesignatorCG(SStateDesignatorCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public A defaultInSObjectDesignatorCG(SObjectDesignatorCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public A defaultOutSObjectDesignatorCG(SObjectDesignatorCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public A defaultSObjectDesignatorCG(SObjectDesignatorCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public A inSObjectDesignatorCG(SObjectDesignatorCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public A outSObjectDesignatorCG(SObjectDesignatorCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public A defaultInSLocalParamCG(SLocalParamCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public A defaultOutSLocalParamCG(SLocalParamCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public A defaultSLocalParamCG(SLocalParamCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public A inSLocalParamCG(SLocalParamCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public A outSLocalParamCG(SLocalParamCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public A defaultInSStmCG(SStmCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public A defaultOutSStmCG(SStmCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public A defaultSStmCG(SStmCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public A inSStmCG(SStmCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public A outSStmCG(SStmCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public A defaultInSLetBeStCG(SLetBeStCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public A defaultOutSLetBeStCG(SLetBeStCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public A defaultSLetBeStCG(SLetBeStCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public A inSLetBeStCG(SLetBeStCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public A outSLetBeStCG(SLetBeStCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public A defaultInSExpCG(SExpCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public A defaultOutSExpCG(SExpCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public A defaultSExpCG(SExpCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public A inSExpCG(SExpCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public A outSExpCG(SExpCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public A defaultInSTypeCG(STypeCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public A defaultOutSTypeCG(STypeCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public A defaultSTypeCG(STypeCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public A inSTypeCG(STypeCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public A outSTypeCG(STypeCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public A defaultInSModifierCG(SModifierCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public A defaultOutSModifierCG(SModifierCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public A defaultSModifierCG(SModifierCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public A inSModifierCG(SModifierCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public A outSModifierCG(SModifierCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public A defaultInSTermCG(STermCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public A defaultOutSTermCG(STermCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public A defaultSTermCG(STermCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public A inSTermCG(STermCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public A outSTermCG(STermCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public A defaultInSTraceDeclCG(STraceDeclCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public A defaultOutSTraceDeclCG(STraceDeclCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public A defaultSTraceDeclCG(STraceDeclCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public A inSTraceDeclCG(STraceDeclCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public A outSTraceDeclCG(STraceDeclCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public A defaultInSTraceCoreDeclCG(STraceCoreDeclCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public A defaultOutSTraceCoreDeclCG(STraceCoreDeclCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public A defaultSTraceCoreDeclCG(STraceCoreDeclCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public A inSTraceCoreDeclCG(STraceCoreDeclCG node) throws AnalysisException
	{
		return defaultInPCG(node);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public A outSTraceCoreDeclCG(STraceCoreDeclCG node) throws AnalysisException
	{
		return defaultOutPCG(node);
	}


	/**
	* Called by the {@link AIdentifierPatternCG} node from {@link AIdentifierPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPatternCG} node
	*/
	public A caseAIdentifierPatternCG(AIdentifierPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIdentifierPatternCG(node));


		mergeReturns(retVal,outAIdentifierPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIdentifierPatternCG} node from {@link AIdentifierPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPatternCG} node
	*/
	public A inAIdentifierPatternCG(AIdentifierPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link AIdentifierPatternCG} node from {@link AIdentifierPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPatternCG} node
	*/
	public A outAIdentifierPatternCG(AIdentifierPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link AIgnorePatternCG} node from {@link AIgnorePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePatternCG} node
	*/
	public A caseAIgnorePatternCG(AIgnorePatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIgnorePatternCG(node));


		mergeReturns(retVal,outAIgnorePatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIgnorePatternCG} node from {@link AIgnorePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePatternCG} node
	*/
	public A inAIgnorePatternCG(AIgnorePatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link AIgnorePatternCG} node from {@link AIgnorePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePatternCG} node
	*/
	public A outAIgnorePatternCG(AIgnorePatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link ABoolPatternCG} node from {@link ABoolPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolPatternCG} node
	*/
	public A caseABoolPatternCG(ABoolPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABoolPatternCG(node));


		mergeReturns(retVal,outABoolPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABoolPatternCG} node from {@link ABoolPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolPatternCG} node
	*/
	public A inABoolPatternCG(ABoolPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link ABoolPatternCG} node from {@link ABoolPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolPatternCG} node
	*/
	public A outABoolPatternCG(ABoolPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link ACharPatternCG} node from {@link ACharPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharPatternCG} node
	*/
	public A caseACharPatternCG(ACharPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharPatternCG(node));


		mergeReturns(retVal,outACharPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharPatternCG} node from {@link ACharPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharPatternCG} node
	*/
	public A inACharPatternCG(ACharPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link ACharPatternCG} node from {@link ACharPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharPatternCG} node
	*/
	public A outACharPatternCG(ACharPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link AIntPatternCG} node from {@link AIntPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntPatternCG} node
	*/
	public A caseAIntPatternCG(AIntPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntPatternCG(node));


		mergeReturns(retVal,outAIntPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntPatternCG} node from {@link AIntPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntPatternCG} node
	*/
	public A inAIntPatternCG(AIntPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link AIntPatternCG} node from {@link AIntPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntPatternCG} node
	*/
	public A outAIntPatternCG(AIntPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link ANullPatternCG} node from {@link ANullPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullPatternCG} node
	*/
	public A caseANullPatternCG(ANullPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANullPatternCG(node));


		mergeReturns(retVal,outANullPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANullPatternCG} node from {@link ANullPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullPatternCG} node
	*/
	public A inANullPatternCG(ANullPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link ANullPatternCG} node from {@link ANullPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullPatternCG} node
	*/
	public A outANullPatternCG(ANullPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link AQuotePatternCG} node from {@link AQuotePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePatternCG} node
	*/
	public A caseAQuotePatternCG(AQuotePatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAQuotePatternCG(node));


		mergeReturns(retVal,outAQuotePatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AQuotePatternCG} node from {@link AQuotePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePatternCG} node
	*/
	public A inAQuotePatternCG(AQuotePatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link AQuotePatternCG} node from {@link AQuotePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePatternCG} node
	*/
	public A outAQuotePatternCG(AQuotePatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link ARealPatternCG} node from {@link ARealPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealPatternCG} node
	*/
	public A caseARealPatternCG(ARealPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealPatternCG(node));


		mergeReturns(retVal,outARealPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealPatternCG} node from {@link ARealPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealPatternCG} node
	*/
	public A inARealPatternCG(ARealPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link ARealPatternCG} node from {@link ARealPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealPatternCG} node
	*/
	public A outARealPatternCG(ARealPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link AStringPatternCG} node from {@link AStringPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringPatternCG} node
	*/
	public A caseAStringPatternCG(AStringPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStringPatternCG(node));


		mergeReturns(retVal,outAStringPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AStringPatternCG} node from {@link AStringPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringPatternCG} node
	*/
	public A inAStringPatternCG(AStringPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link AStringPatternCG} node from {@link AStringPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringPatternCG} node
	*/
	public A outAStringPatternCG(AStringPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link ATuplePatternCG} node from {@link ATuplePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePatternCG} node
	*/
	public A caseATuplePatternCG(ATuplePatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATuplePatternCG(node));

		{
			List<SPatternCG> copy = new ArrayList<SPatternCG>(node.getPatterns());
			for( SPatternCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATuplePatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATuplePatternCG} node from {@link ATuplePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePatternCG} node
	*/
	public A inATuplePatternCG(ATuplePatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link ATuplePatternCG} node from {@link ATuplePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePatternCG} node
	*/
	public A outATuplePatternCG(ATuplePatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link ARecordPatternCG} node from {@link ARecordPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPatternCG} node
	*/
	public A caseARecordPatternCG(ARecordPatternCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordPatternCG(node));

		{
			List<SPatternCG> copy = new ArrayList<SPatternCG>(node.getPatterns());
			for( SPatternCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outARecordPatternCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordPatternCG} node from {@link ARecordPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPatternCG} node
	*/
	public A inARecordPatternCG(ARecordPatternCG node) throws AnalysisException
	{
		return defaultInSPatternCG(node);
	}


	/**
	* Called by the {@link ARecordPatternCG} node from {@link ARecordPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPatternCG} node
	*/
	public A outARecordPatternCG(ARecordPatternCG node) throws AnalysisException
	{
		return defaultOutSPatternCG(node);
	}


	/**
	* Called by the {@link ASetBindCG} node from {@link ASetBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetBindCG} node
	*/
	public A caseASetBindCG(ASetBindCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetBindCG(node));

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			mergeReturns(retVal,node.getSet().apply(this));
		}

		mergeReturns(retVal,outASetBindCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetBindCG} node from {@link ASetBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetBindCG} node
	*/
	public A inASetBindCG(ASetBindCG node) throws AnalysisException
	{
		return defaultInSBindCG(node);
	}


	/**
	* Called by the {@link ASetBindCG} node from {@link ASetBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetBindCG} node
	*/
	public A outASetBindCG(ASetBindCG node) throws AnalysisException
	{
		return defaultOutSBindCG(node);
	}


	/**
	* Called by the {@link ASetMultipleBindCG} node from {@link ASetMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBindCG} node
	*/
	public A caseASetMultipleBindCG(ASetMultipleBindCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetMultipleBindCG(node));

		{
			List<SPatternCG> copy = new ArrayList<SPatternCG>(node.getPatterns());
			for( SPatternCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			mergeReturns(retVal,node.getSet().apply(this));
		}

		mergeReturns(retVal,outASetMultipleBindCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetMultipleBindCG} node from {@link ASetMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBindCG} node
	*/
	public A inASetMultipleBindCG(ASetMultipleBindCG node) throws AnalysisException
	{
		return defaultInSMultipleBindCG(node);
	}


	/**
	* Called by the {@link ASetMultipleBindCG} node from {@link ASetMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBindCG} node
	*/
	public A outASetMultipleBindCG(ASetMultipleBindCG node) throws AnalysisException
	{
		return defaultOutSMultipleBindCG(node);
	}


	/**
	* Called by the {@link ATypeNameCG} node from {@link ATypeNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeNameCG} node
	*/
	public A caseATypeNameCG(ATypeNameCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeNameCG(node));


		mergeReturns(retVal,outATypeNameCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeNameCG} node from {@link ATypeNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeNameCG} node
	*/
	public A inATypeNameCG(ATypeNameCG node) throws AnalysisException
	{
		return defaultInSNameCG(node);
	}


	/**
	* Called by the {@link ATypeNameCG} node from {@link ATypeNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeNameCG} node
	*/
	public A outATypeNameCG(ATypeNameCG node) throws AnalysisException
	{
		return defaultOutSNameCG(node);
	}


	/**
	* Called by the {@link ATokenNameCG} node from {@link ATokenNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenNameCG} node
	*/
	public A caseATokenNameCG(ATokenNameCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATokenNameCG(node));


		mergeReturns(retVal,outATokenNameCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATokenNameCG} node from {@link ATokenNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenNameCG} node
	*/
	public A inATokenNameCG(ATokenNameCG node) throws AnalysisException
	{
		return defaultInSNameCG(node);
	}


	/**
	* Called by the {@link ATokenNameCG} node from {@link ATokenNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenNameCG} node
	*/
	public A outATokenNameCG(ATokenNameCG node) throws AnalysisException
	{
		return defaultOutSNameCG(node);
	}


	/**
	* Called by the {@link AMethodDeclCG} node from {@link AMethodDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodDeclCG} node
	*/
	public A caseAMethodDeclCG(AMethodDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMethodDeclCG(node));

		if(node.getPreCond() != null && !_visitedNodes.contains(node.getPreCond())) 
		{
			mergeReturns(retVal,node.getPreCond().apply(this));
		}
		if(node.getPostCond() != null && !_visitedNodes.contains(node.getPostCond())) 
		{
			mergeReturns(retVal,node.getPostCond().apply(this));
		}
		if(node.getMethodType() != null && !_visitedNodes.contains(node.getMethodType())) 
		{
			mergeReturns(retVal,node.getMethodType().apply(this));
		}
		{
			List<AFormalParamLocalParamCG> copy = new ArrayList<AFormalParamLocalParamCG>(node.getFormalParams());
			for( AFormalParamLocalParamCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ATemplateTypeCG> copy = new ArrayList<ATemplateTypeCG>(node.getTemplateTypes());
			for( ATemplateTypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outAMethodDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMethodDeclCG} node from {@link AMethodDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodDeclCG} node
	*/
	public A inAMethodDeclCG(AMethodDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AMethodDeclCG} node from {@link AMethodDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodDeclCG} node
	*/
	public A outAMethodDeclCG(AMethodDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AFuncDeclCG} node from {@link AFuncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFuncDeclCG} node
	*/
	public A caseAFuncDeclCG(AFuncDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFuncDeclCG(node));

		if(node.getPreCond() != null && !_visitedNodes.contains(node.getPreCond())) 
		{
			mergeReturns(retVal,node.getPreCond().apply(this));
		}
		if(node.getPostCond() != null && !_visitedNodes.contains(node.getPostCond())) 
		{
			mergeReturns(retVal,node.getPostCond().apply(this));
		}
		if(node.getMethodType() != null && !_visitedNodes.contains(node.getMethodType())) 
		{
			mergeReturns(retVal,node.getMethodType().apply(this));
		}
		{
			List<AFormalParamLocalParamCG> copy = new ArrayList<AFormalParamLocalParamCG>(node.getFormalParams());
			for( AFormalParamLocalParamCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ATemplateTypeCG> copy = new ArrayList<ATemplateTypeCG>(node.getTemplateTypes());
			for( ATemplateTypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outAFuncDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFuncDeclCG} node from {@link AFuncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFuncDeclCG} node
	*/
	public A inAFuncDeclCG(AFuncDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AFuncDeclCG} node from {@link AFuncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFuncDeclCG} node
	*/
	public A outAFuncDeclCG(AFuncDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AFieldDeclCG} node from {@link AFieldDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldDeclCG} node
	*/
	public A caseAFieldDeclCG(AFieldDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldDeclCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getInitial() != null && !_visitedNodes.contains(node.getInitial())) 
		{
			mergeReturns(retVal,node.getInitial().apply(this));
		}

		mergeReturns(retVal,outAFieldDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldDeclCG} node from {@link AFieldDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldDeclCG} node
	*/
	public A inAFieldDeclCG(AFieldDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AFieldDeclCG} node from {@link AFieldDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldDeclCG} node
	*/
	public A outAFieldDeclCG(AFieldDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AClassDeclCG} node from {@link AClassDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassDeclCG} node
	*/
	public A caseAClassDeclCG(AClassDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAClassDeclCG(node));

		{
			List<AFieldDeclCG> copy = new ArrayList<AFieldDeclCG>(node.getFields());
			for( AFieldDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethods());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AFuncDeclCG> copy = new ArrayList<AFuncDeclCG>(node.getFunctions());
			for( AFuncDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ANamedTraceDeclCG> copy = new ArrayList<ANamedTraceDeclCG>(node.getTraces());
			for( ANamedTraceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getThread() != null && !_visitedNodes.contains(node.getThread())) 
		{
			mergeReturns(retVal,node.getThread().apply(this));
		}
		{
			List<AClassDeclCG> copy = new ArrayList<AClassDeclCG>(node.getInnerClasses());
			for( AClassDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AInterfaceDeclCG> copy = new ArrayList<AInterfaceDeclCG>(node.getInterfaces());
			for( AInterfaceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ATypeDeclCG> copy = new ArrayList<ATypeDeclCG>(node.getTypeDecls());
			for( ATypeDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<APersyncDeclCG> copy = new ArrayList<APersyncDeclCG>(node.getPerSyncs());
			for( APersyncDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AMutexSyncDeclCG> copy = new ArrayList<AMutexSyncDeclCG>(node.getMutexSyncs());
			for( AMutexSyncDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAClassDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AClassDeclCG} node from {@link AClassDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassDeclCG} node
	*/
	public A inAClassDeclCG(AClassDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AClassDeclCG} node from {@link AClassDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassDeclCG} node
	*/
	public A outAClassDeclCG(AClassDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AInterfaceDeclCG} node from {@link AInterfaceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceDeclCG} node
	*/
	public A caseAInterfaceDeclCG(AInterfaceDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInterfaceDeclCG(node));

		{
			List<ATemplateTypeCG> copy = new ArrayList<ATemplateTypeCG>(node.getTemplateTypes());
			for( ATemplateTypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AFieldDeclCG> copy = new ArrayList<AFieldDeclCG>(node.getFields());
			for( AFieldDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethodSignatures());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAInterfaceDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AInterfaceDeclCG} node from {@link AInterfaceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceDeclCG} node
	*/
	public A inAInterfaceDeclCG(AInterfaceDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AInterfaceDeclCG} node from {@link AInterfaceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceDeclCG} node
	*/
	public A outAInterfaceDeclCG(AInterfaceDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link ARecordDeclCG} node from {@link ARecordDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordDeclCG} node
	*/
	public A caseARecordDeclCG(ARecordDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordDeclCG(node));

		{
			List<AFieldDeclCG> copy = new ArrayList<AFieldDeclCG>(node.getFields());
			for( AFieldDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethods());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outARecordDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordDeclCG} node from {@link ARecordDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordDeclCG} node
	*/
	public A inARecordDeclCG(ARecordDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link ARecordDeclCG} node from {@link ARecordDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordDeclCG} node
	*/
	public A outARecordDeclCG(ARecordDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AThreadDeclCG} node from {@link AThreadDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDeclCG} node
	*/
	public A caseAThreadDeclCG(AThreadDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAThreadDeclCG(node));

		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}
		if(node.getStm() != null && !_visitedNodes.contains(node.getStm())) 
		{
			mergeReturns(retVal,node.getStm().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAThreadDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AThreadDeclCG} node from {@link AThreadDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDeclCG} node
	*/
	public A inAThreadDeclCG(AThreadDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AThreadDeclCG} node from {@link AThreadDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDeclCG} node
	*/
	public A outAThreadDeclCG(AThreadDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link ATypeDeclCG} node from {@link ATypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDeclCG} node
	*/
	public A caseATypeDeclCG(ATypeDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeDeclCG(node));

		if(node.getDecl() != null && !_visitedNodes.contains(node.getDecl())) 
		{
			mergeReturns(retVal,node.getDecl().apply(this));
		}

		mergeReturns(retVal,outATypeDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeDeclCG} node from {@link ATypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDeclCG} node
	*/
	public A inATypeDeclCG(ATypeDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link ATypeDeclCG} node from {@link ATypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDeclCG} node
	*/
	public A outATypeDeclCG(ATypeDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link ACatchClauseDeclCG} node from {@link ACatchClauseDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ACatchClauseDeclCG} node
	*/
	public A caseACatchClauseDeclCG(ACatchClauseDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACatchClauseDeclCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getStm() != null && !_visitedNodes.contains(node.getStm())) 
		{
			mergeReturns(retVal,node.getStm().apply(this));
		}

		mergeReturns(retVal,outACatchClauseDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACatchClauseDeclCG} node from {@link ACatchClauseDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ACatchClauseDeclCG} node
	*/
	public A inACatchClauseDeclCG(ACatchClauseDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link ACatchClauseDeclCG} node from {@link ACatchClauseDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ACatchClauseDeclCG} node
	*/
	public A outACatchClauseDeclCG(ACatchClauseDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link APersyncDeclCG} node from {@link APersyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link APersyncDeclCG} node
	*/
	public A caseAPersyncDeclCG(APersyncDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPersyncDeclCG(node));

		if(node.getPred() != null && !_visitedNodes.contains(node.getPred())) 
		{
			mergeReturns(retVal,node.getPred().apply(this));
		}

		mergeReturns(retVal,outAPersyncDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APersyncDeclCG} node from {@link APersyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link APersyncDeclCG} node
	*/
	public A inAPersyncDeclCG(APersyncDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link APersyncDeclCG} node from {@link APersyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link APersyncDeclCG} node
	*/
	public A outAPersyncDeclCG(APersyncDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AMutexSyncDeclCG} node from {@link AMutexSyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDeclCG} node
	*/
	public A caseAMutexSyncDeclCG(AMutexSyncDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMutexSyncDeclCG(node));

		{
			List<SNameCG> copy = new ArrayList<SNameCG>(node.getOpnames());
			for( SNameCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAMutexSyncDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMutexSyncDeclCG} node from {@link AMutexSyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDeclCG} node
	*/
	public A inAMutexSyncDeclCG(AMutexSyncDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AMutexSyncDeclCG} node from {@link AMutexSyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDeclCG} node
	*/
	public A outAMutexSyncDeclCG(AMutexSyncDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AVarDeclCG} node from {@link AVarDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AVarDeclCG} node
	*/
	public A caseAVarDeclCG(AVarDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAVarDeclCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAVarDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AVarDeclCG} node from {@link AVarDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AVarDeclCG} node
	*/
	public A inAVarDeclCG(AVarDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link AVarDeclCG} node from {@link AVarDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AVarDeclCG} node
	*/
	public A outAVarDeclCG(AVarDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link ANamedTypeDeclCG} node from {@link ANamedTypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTypeDeclCG} node
	*/
	public A caseANamedTypeDeclCG(ANamedTypeDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANamedTypeDeclCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outANamedTypeDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANamedTypeDeclCG} node from {@link ANamedTypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTypeDeclCG} node
	*/
	public A inANamedTypeDeclCG(ANamedTypeDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link ANamedTypeDeclCG} node from {@link ANamedTypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTypeDeclCG} node
	*/
	public A outANamedTypeDeclCG(ANamedTypeDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link ANamedTraceDeclCG} node from {@link ANamedTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDeclCG} node
	*/
	public A caseANamedTraceDeclCG(ANamedTraceDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANamedTraceDeclCG(node));

		{
			List<ATokenNameCG> copy = new ArrayList<ATokenNameCG>(node.getPathname());
			for( ATokenNameCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ATraceDeclTermCG> copy = new ArrayList<ATraceDeclTermCG>(node.getTerms());
			for( ATraceDeclTermCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANamedTraceDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANamedTraceDeclCG} node from {@link ANamedTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDeclCG} node
	*/
	public A inANamedTraceDeclCG(ANamedTraceDeclCG node) throws AnalysisException
	{
		return defaultInSDeclCG(node);
	}


	/**
	* Called by the {@link ANamedTraceDeclCG} node from {@link ANamedTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDeclCG} node
	*/
	public A outANamedTraceDeclCG(ANamedTraceDeclCG node) throws AnalysisException
	{
		return defaultOutSDeclCG(node);
	}


	/**
	* Called by the {@link AIdentifierStateDesignatorCG} node from {@link AIdentifierStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignatorCG} node
	*/
	public A caseAIdentifierStateDesignatorCG(AIdentifierStateDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIdentifierStateDesignatorCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAIdentifierStateDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIdentifierStateDesignatorCG} node from {@link AIdentifierStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignatorCG} node
	*/
	public A inAIdentifierStateDesignatorCG(AIdentifierStateDesignatorCG node) throws AnalysisException
	{
		return defaultInSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AIdentifierStateDesignatorCG} node from {@link AIdentifierStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignatorCG} node
	*/
	public A outAIdentifierStateDesignatorCG(AIdentifierStateDesignatorCG node) throws AnalysisException
	{
		return defaultOutSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AFieldStateDesignatorCG} node from {@link AFieldStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignatorCG} node
	*/
	public A caseAFieldStateDesignatorCG(AFieldStateDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldStateDesignatorCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}

		mergeReturns(retVal,outAFieldStateDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldStateDesignatorCG} node from {@link AFieldStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignatorCG} node
	*/
	public A inAFieldStateDesignatorCG(AFieldStateDesignatorCG node) throws AnalysisException
	{
		return defaultInSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AFieldStateDesignatorCG} node from {@link AFieldStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignatorCG} node
	*/
	public A outAFieldStateDesignatorCG(AFieldStateDesignatorCG node) throws AnalysisException
	{
		return defaultOutSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AMapSeqStateDesignatorCG} node from {@link AMapSeqStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignatorCG} node
	*/
	public A caseAMapSeqStateDesignatorCG(AMapSeqStateDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapSeqStateDesignatorCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getMapseq() != null && !_visitedNodes.contains(node.getMapseq())) 
		{
			mergeReturns(retVal,node.getMapseq().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAMapSeqStateDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapSeqStateDesignatorCG} node from {@link AMapSeqStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignatorCG} node
	*/
	public A inAMapSeqStateDesignatorCG(AMapSeqStateDesignatorCG node) throws AnalysisException
	{
		return defaultInSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AMapSeqStateDesignatorCG} node from {@link AMapSeqStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignatorCG} node
	*/
	public A outAMapSeqStateDesignatorCG(AMapSeqStateDesignatorCG node) throws AnalysisException
	{
		return defaultOutSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AApplyObjectDesignatorCG} node from {@link AApplyObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignatorCG} node
	*/
	public A caseAApplyObjectDesignatorCG(AApplyObjectDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAApplyObjectDesignatorCG(node));

		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAApplyObjectDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AApplyObjectDesignatorCG} node from {@link AApplyObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignatorCG} node
	*/
	public A inAApplyObjectDesignatorCG(AApplyObjectDesignatorCG node) throws AnalysisException
	{
		return defaultInSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AApplyObjectDesignatorCG} node from {@link AApplyObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignatorCG} node
	*/
	public A outAApplyObjectDesignatorCG(AApplyObjectDesignatorCG node) throws AnalysisException
	{
		return defaultOutSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AFieldObjectDesignatorCG} node from {@link AFieldObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignatorCG} node
	*/
	public A caseAFieldObjectDesignatorCG(AFieldObjectDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldObjectDesignatorCG(node));

		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}

		mergeReturns(retVal,outAFieldObjectDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldObjectDesignatorCG} node from {@link AFieldObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignatorCG} node
	*/
	public A inAFieldObjectDesignatorCG(AFieldObjectDesignatorCG node) throws AnalysisException
	{
		return defaultInSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AFieldObjectDesignatorCG} node from {@link AFieldObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignatorCG} node
	*/
	public A outAFieldObjectDesignatorCG(AFieldObjectDesignatorCG node) throws AnalysisException
	{
		return defaultOutSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AIdentifierObjectDesignatorCG} node from {@link AIdentifierObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignatorCG} node
	*/
	public A caseAIdentifierObjectDesignatorCG(AIdentifierObjectDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIdentifierObjectDesignatorCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAIdentifierObjectDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIdentifierObjectDesignatorCG} node from {@link AIdentifierObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignatorCG} node
	*/
	public A inAIdentifierObjectDesignatorCG(AIdentifierObjectDesignatorCG node) throws AnalysisException
	{
		return defaultInSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AIdentifierObjectDesignatorCG} node from {@link AIdentifierObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignatorCG} node
	*/
	public A outAIdentifierObjectDesignatorCG(AIdentifierObjectDesignatorCG node) throws AnalysisException
	{
		return defaultOutSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link ANewObjectDesignatorCG} node from {@link ANewObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignatorCG} node
	*/
	public A caseANewObjectDesignatorCG(ANewObjectDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANewObjectDesignatorCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outANewObjectDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANewObjectDesignatorCG} node from {@link ANewObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignatorCG} node
	*/
	public A inANewObjectDesignatorCG(ANewObjectDesignatorCG node) throws AnalysisException
	{
		return defaultInSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link ANewObjectDesignatorCG} node from {@link ANewObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignatorCG} node
	*/
	public A outANewObjectDesignatorCG(ANewObjectDesignatorCG node) throws AnalysisException
	{
		return defaultOutSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link ASelfObjectDesignatorCG} node from {@link ASelfObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignatorCG} node
	*/
	public A caseASelfObjectDesignatorCG(ASelfObjectDesignatorCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASelfObjectDesignatorCG(node));


		mergeReturns(retVal,outASelfObjectDesignatorCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASelfObjectDesignatorCG} node from {@link ASelfObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignatorCG} node
	*/
	public A inASelfObjectDesignatorCG(ASelfObjectDesignatorCG node) throws AnalysisException
	{
		return defaultInSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link ASelfObjectDesignatorCG} node from {@link ASelfObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignatorCG} node
	*/
	public A outASelfObjectDesignatorCG(ASelfObjectDesignatorCG node) throws AnalysisException
	{
		return defaultOutSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AFormalParamLocalParamCG} node from {@link AFormalParamLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link AFormalParamLocalParamCG} node
	*/
	public A caseAFormalParamLocalParamCG(AFormalParamLocalParamCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFormalParamLocalParamCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}

		mergeReturns(retVal,outAFormalParamLocalParamCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFormalParamLocalParamCG} node from {@link AFormalParamLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link AFormalParamLocalParamCG} node
	*/
	public A inAFormalParamLocalParamCG(AFormalParamLocalParamCG node) throws AnalysisException
	{
		return defaultInSLocalParamCG(node);
	}


	/**
	* Called by the {@link AFormalParamLocalParamCG} node from {@link AFormalParamLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link AFormalParamLocalParamCG} node
	*/
	public A outAFormalParamLocalParamCG(AFormalParamLocalParamCG node) throws AnalysisException
	{
		return defaultOutSLocalParamCG(node);
	}


	/**
	* Called by the {@link AIfStmCG} node from {@link AIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIfStmCG} node
	*/
	public A caseAIfStmCG(AIfStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIfStmCG(node));

		if(node.getIfExp() != null && !_visitedNodes.contains(node.getIfExp())) 
		{
			mergeReturns(retVal,node.getIfExp().apply(this));
		}
		if(node.getThenStm() != null && !_visitedNodes.contains(node.getThenStm())) 
		{
			mergeReturns(retVal,node.getThenStm().apply(this));
		}
		{
			List<AElseIfStmCG> copy = new ArrayList<AElseIfStmCG>(node.getElseIf());
			for( AElseIfStmCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getElseStm() != null && !_visitedNodes.contains(node.getElseStm())) 
		{
			mergeReturns(retVal,node.getElseStm().apply(this));
		}

		mergeReturns(retVal,outAIfStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIfStmCG} node from {@link AIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIfStmCG} node
	*/
	public A inAIfStmCG(AIfStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AIfStmCG} node from {@link AIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIfStmCG} node
	*/
	public A outAIfStmCG(AIfStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AElseIfStmCG} node from {@link AElseIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStmCG} node
	*/
	public A caseAElseIfStmCG(AElseIfStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAElseIfStmCG(node));

		if(node.getElseIf() != null && !_visitedNodes.contains(node.getElseIf())) 
		{
			mergeReturns(retVal,node.getElseIf().apply(this));
		}
		if(node.getThenStm() != null && !_visitedNodes.contains(node.getThenStm())) 
		{
			mergeReturns(retVal,node.getThenStm().apply(this));
		}

		mergeReturns(retVal,outAElseIfStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AElseIfStmCG} node from {@link AElseIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStmCG} node
	*/
	public A inAElseIfStmCG(AElseIfStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AElseIfStmCG} node from {@link AElseIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStmCG} node
	*/
	public A outAElseIfStmCG(AElseIfStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ASkipStmCG} node from {@link ASkipStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStmCG} node
	*/
	public A caseASkipStmCG(ASkipStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASkipStmCG(node));


		mergeReturns(retVal,outASkipStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASkipStmCG} node from {@link ASkipStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStmCG} node
	*/
	public A inASkipStmCG(ASkipStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ASkipStmCG} node from {@link ASkipStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStmCG} node
	*/
	public A outASkipStmCG(ASkipStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AReturnStmCG} node from {@link AReturnStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStmCG} node
	*/
	public A caseAReturnStmCG(AReturnStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAReturnStmCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAReturnStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AReturnStmCG} node from {@link AReturnStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStmCG} node
	*/
	public A inAReturnStmCG(AReturnStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AReturnStmCG} node from {@link AReturnStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStmCG} node
	*/
	public A outAReturnStmCG(AReturnStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AAbstractBodyStmCG} node from {@link AAbstractBodyStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbstractBodyStmCG} node
	*/
	public A caseAAbstractBodyStmCG(AAbstractBodyStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAbstractBodyStmCG(node));


		mergeReturns(retVal,outAAbstractBodyStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAbstractBodyStmCG} node from {@link AAbstractBodyStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbstractBodyStmCG} node
	*/
	public A inAAbstractBodyStmCG(AAbstractBodyStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AAbstractBodyStmCG} node from {@link AAbstractBodyStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbstractBodyStmCG} node
	*/
	public A outAAbstractBodyStmCG(AAbstractBodyStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AAssignmentStmCG} node from {@link AAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStmCG} node
	*/
	public A caseAAssignmentStmCG(AAssignmentStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAssignmentStmCG(node));

		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			mergeReturns(retVal,node.getTarget().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAAssignmentStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAssignmentStmCG} node from {@link AAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStmCG} node
	*/
	public A inAAssignmentStmCG(AAssignmentStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AAssignmentStmCG} node from {@link AAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStmCG} node
	*/
	public A outAAssignmentStmCG(AAssignmentStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ALocalAssignmentStmCG} node from {@link ALocalAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalAssignmentStmCG} node
	*/
	public A caseALocalAssignmentStmCG(ALocalAssignmentStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALocalAssignmentStmCG(node));

		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			mergeReturns(retVal,node.getTarget().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outALocalAssignmentStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALocalAssignmentStmCG} node from {@link ALocalAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalAssignmentStmCG} node
	*/
	public A inALocalAssignmentStmCG(ALocalAssignmentStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ALocalAssignmentStmCG} node from {@link ALocalAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalAssignmentStmCG} node
	*/
	public A outALocalAssignmentStmCG(ALocalAssignmentStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ALocalPatternAssignmentStmCG} node from {@link ALocalPatternAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalPatternAssignmentStmCG} node
	*/
	public A caseALocalPatternAssignmentStmCG(ALocalPatternAssignmentStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALocalPatternAssignmentStmCG(node));

		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			mergeReturns(retVal,node.getTarget().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getNextElementDecl() != null && !_visitedNodes.contains(node.getNextElementDecl())) 
		{
			mergeReturns(retVal,node.getNextElementDecl().apply(this));
		}

		mergeReturns(retVal,outALocalPatternAssignmentStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALocalPatternAssignmentStmCG} node from {@link ALocalPatternAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalPatternAssignmentStmCG} node
	*/
	public A inALocalPatternAssignmentStmCG(ALocalPatternAssignmentStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ALocalPatternAssignmentStmCG} node from {@link ALocalPatternAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalPatternAssignmentStmCG} node
	*/
	public A outALocalPatternAssignmentStmCG(ALocalPatternAssignmentStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ABlockStmCG} node from {@link ABlockStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABlockStmCG} node
	*/
	public A caseABlockStmCG(ABlockStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABlockStmCG(node));

		{
			List<AVarDeclCG> copy = new ArrayList<AVarDeclCG>(node.getLocalDefs());
			for( AVarDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<SStmCG> copy = new ArrayList<SStmCG>(node.getStatements());
			for( SStmCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outABlockStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABlockStmCG} node from {@link ABlockStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABlockStmCG} node
	*/
	public A inABlockStmCG(ABlockStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ABlockStmCG} node from {@link ABlockStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABlockStmCG} node
	*/
	public A outABlockStmCG(ABlockStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ACallObjectStmCG} node from {@link ACallObjectStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStmCG} node
	*/
	public A caseACallObjectStmCG(ACallObjectStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACallObjectStmCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getDesignator() != null && !_visitedNodes.contains(node.getDesignator())) 
		{
			mergeReturns(retVal,node.getDesignator().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outACallObjectStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACallObjectStmCG} node from {@link ACallObjectStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStmCG} node
	*/
	public A inACallObjectStmCG(ACallObjectStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ACallObjectStmCG} node from {@link ACallObjectStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStmCG} node
	*/
	public A outACallObjectStmCG(ACallObjectStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ACallObjectExpStmCG} node from {@link ACallObjectExpStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectExpStmCG} node
	*/
	public A caseACallObjectExpStmCG(ACallObjectExpStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACallObjectExpStmCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getObj() != null && !_visitedNodes.contains(node.getObj())) 
		{
			mergeReturns(retVal,node.getObj().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outACallObjectExpStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACallObjectExpStmCG} node from {@link ACallObjectExpStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectExpStmCG} node
	*/
	public A inACallObjectExpStmCG(ACallObjectExpStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ACallObjectExpStmCG} node from {@link ACallObjectExpStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectExpStmCG} node
	*/
	public A outACallObjectExpStmCG(ACallObjectExpStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public A defaultInSCallStmCG(SCallStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public A defaultOutSCallStmCG(SCallStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public A defaultSCallStmCG(SCallStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public A inSCallStmCG(SCallStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public A outSCallStmCG(SCallStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ANotImplementedStmCG} node from {@link ANotImplementedStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedStmCG} node
	*/
	public A caseANotImplementedStmCG(ANotImplementedStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotImplementedStmCG(node));


		mergeReturns(retVal,outANotImplementedStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotImplementedStmCG} node from {@link ANotImplementedStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedStmCG} node
	*/
	public A inANotImplementedStmCG(ANotImplementedStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ANotImplementedStmCG} node from {@link ANotImplementedStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedStmCG} node
	*/
	public A outANotImplementedStmCG(ANotImplementedStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AForIndexStmCG} node from {@link AForIndexStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStmCG} node
	*/
	public A caseAForIndexStmCG(AForIndexStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForIndexStmCG(node));

		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}
		if(node.getBy() != null && !_visitedNodes.contains(node.getBy())) 
		{
			mergeReturns(retVal,node.getBy().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outAForIndexStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AForIndexStmCG} node from {@link AForIndexStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStmCG} node
	*/
	public A inAForIndexStmCG(AForIndexStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AForIndexStmCG} node from {@link AForIndexStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStmCG} node
	*/
	public A outAForIndexStmCG(AForIndexStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AForAllStmCG} node from {@link AForAllStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStmCG} node
	*/
	public A caseAForAllStmCG(AForAllStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForAllStmCG(node));

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outAForAllStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AForAllStmCG} node from {@link AForAllStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStmCG} node
	*/
	public A inAForAllStmCG(AForAllStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AForAllStmCG} node from {@link AForAllStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStmCG} node
	*/
	public A outAForAllStmCG(AForAllStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AWhileStmCG} node from {@link AWhileStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStmCG} node
	*/
	public A caseAWhileStmCG(AWhileStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAWhileStmCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outAWhileStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AWhileStmCG} node from {@link AWhileStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStmCG} node
	*/
	public A inAWhileStmCG(AWhileStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AWhileStmCG} node from {@link AWhileStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStmCG} node
	*/
	public A outAWhileStmCG(AWhileStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ALetBeStStmCG} node from {@link ALetBeStStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStmCG} node
	*/
	public A caseALetBeStStmCG(ALetBeStStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetBeStStmCG(node));

		if(node.getHeader() != null && !_visitedNodes.contains(node.getHeader())) 
		{
			mergeReturns(retVal,node.getHeader().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}

		mergeReturns(retVal,outALetBeStStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetBeStStmCG} node from {@link ALetBeStStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStmCG} node
	*/
	public A inALetBeStStmCG(ALetBeStStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ALetBeStStmCG} node from {@link ALetBeStStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStmCG} node
	*/
	public A outALetBeStStmCG(ALetBeStStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AThrowStmCG} node from {@link AThrowStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AThrowStmCG} node
	*/
	public A caseAThrowStmCG(AThrowStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAThrowStmCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAThrowStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AThrowStmCG} node from {@link AThrowStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AThrowStmCG} node
	*/
	public A inAThrowStmCG(AThrowStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AThrowStmCG} node from {@link AThrowStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AThrowStmCG} node
	*/
	public A outAThrowStmCG(AThrowStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AForLoopStmCG} node from {@link AForLoopStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForLoopStmCG} node
	*/
	public A caseAForLoopStmCG(AForLoopStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForLoopStmCG(node));

		if(node.getInit() != null && !_visitedNodes.contains(node.getInit())) 
		{
			mergeReturns(retVal,node.getInit().apply(this));
		}
		if(node.getCond() != null && !_visitedNodes.contains(node.getCond())) 
		{
			mergeReturns(retVal,node.getCond().apply(this));
		}
		if(node.getInc() != null && !_visitedNodes.contains(node.getInc())) 
		{
			mergeReturns(retVal,node.getInc().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outAForLoopStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AForLoopStmCG} node from {@link AForLoopStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForLoopStmCG} node
	*/
	public A inAForLoopStmCG(AForLoopStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AForLoopStmCG} node from {@link AForLoopStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForLoopStmCG} node
	*/
	public A outAForLoopStmCG(AForLoopStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AIncrementStmCG} node from {@link AIncrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIncrementStmCG} node
	*/
	public A caseAIncrementStmCG(AIncrementStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIncrementStmCG(node));

		if(node.getVar() != null && !_visitedNodes.contains(node.getVar())) 
		{
			mergeReturns(retVal,node.getVar().apply(this));
		}

		mergeReturns(retVal,outAIncrementStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIncrementStmCG} node from {@link AIncrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIncrementStmCG} node
	*/
	public A inAIncrementStmCG(AIncrementStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AIncrementStmCG} node from {@link AIncrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIncrementStmCG} node
	*/
	public A outAIncrementStmCG(AIncrementStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ADecrementStmCG} node from {@link ADecrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ADecrementStmCG} node
	*/
	public A caseADecrementStmCG(ADecrementStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADecrementStmCG(node));

		if(node.getVar() != null && !_visitedNodes.contains(node.getVar())) 
		{
			mergeReturns(retVal,node.getVar().apply(this));
		}

		mergeReturns(retVal,outADecrementStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADecrementStmCG} node from {@link ADecrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ADecrementStmCG} node
	*/
	public A inADecrementStmCG(ADecrementStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ADecrementStmCG} node from {@link ADecrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ADecrementStmCG} node
	*/
	public A outADecrementStmCG(ADecrementStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ARaiseErrorStmCG} node from {@link ARaiseErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ARaiseErrorStmCG} node
	*/
	public A caseARaiseErrorStmCG(ARaiseErrorStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARaiseErrorStmCG(node));

		if(node.getError() != null && !_visitedNodes.contains(node.getError())) 
		{
			mergeReturns(retVal,node.getError().apply(this));
		}

		mergeReturns(retVal,outARaiseErrorStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARaiseErrorStmCG} node from {@link ARaiseErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ARaiseErrorStmCG} node
	*/
	public A inARaiseErrorStmCG(ARaiseErrorStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ARaiseErrorStmCG} node from {@link ARaiseErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ARaiseErrorStmCG} node
	*/
	public A outARaiseErrorStmCG(ARaiseErrorStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ACasesStmCG} node from {@link ACasesStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStmCG} node
	*/
	public A caseACasesStmCG(ACasesStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACasesStmCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		{
			List<ACaseAltStmStmCG> copy = new ArrayList<ACaseAltStmStmCG>(node.getCases());
			for( ACaseAltStmStmCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getOthers() != null && !_visitedNodes.contains(node.getOthers())) 
		{
			mergeReturns(retVal,node.getOthers().apply(this));
		}

		mergeReturns(retVal,outACasesStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACasesStmCG} node from {@link ACasesStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStmCG} node
	*/
	public A inACasesStmCG(ACasesStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ACasesStmCG} node from {@link ACasesStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStmCG} node
	*/
	public A outACasesStmCG(ACasesStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public A defaultInSAltStmStmCG(SAltStmStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public A defaultOutSAltStmStmCG(SAltStmStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public A defaultSAltStmStmCG(SAltStmStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public A inSAltStmStmCG(SAltStmStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public A outSAltStmStmCG(SAltStmStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AErrorStmCG} node from {@link AErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStmCG} node
	*/
	public A caseAErrorStmCG(AErrorStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAErrorStmCG(node));


		mergeReturns(retVal,outAErrorStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AErrorStmCG} node from {@link AErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStmCG} node
	*/
	public A inAErrorStmCG(AErrorStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AErrorStmCG} node from {@link AErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStmCG} node
	*/
	public A outAErrorStmCG(AErrorStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AContinueStmCG} node from {@link AContinueStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AContinueStmCG} node
	*/
	public A caseAContinueStmCG(AContinueStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAContinueStmCG(node));


		mergeReturns(retVal,outAContinueStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AContinueStmCG} node from {@link AContinueStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AContinueStmCG} node
	*/
	public A inAContinueStmCG(AContinueStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AContinueStmCG} node from {@link AContinueStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AContinueStmCG} node
	*/
	public A outAContinueStmCG(AContinueStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ABreakStmCG} node from {@link ABreakStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABreakStmCG} node
	*/
	public A caseABreakStmCG(ABreakStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABreakStmCG(node));


		mergeReturns(retVal,outABreakStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABreakStmCG} node from {@link ABreakStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABreakStmCG} node
	*/
	public A inABreakStmCG(ABreakStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ABreakStmCG} node from {@link ABreakStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABreakStmCG} node
	*/
	public A outABreakStmCG(ABreakStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AStartStmCG} node from {@link AStartStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartStmCG} node
	*/
	public A caseAStartStmCG(AStartStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStartStmCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAStartStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AStartStmCG} node from {@link AStartStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartStmCG} node
	*/
	public A inAStartStmCG(AStartStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AStartStmCG} node from {@link AStartStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartStmCG} node
	*/
	public A outAStartStmCG(AStartStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AStartlistStmCG} node from {@link AStartlistStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartlistStmCG} node
	*/
	public A caseAStartlistStmCG(AStartlistStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStartlistStmCG(node));

		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAStartlistStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AStartlistStmCG} node from {@link AStartlistStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartlistStmCG} node
	*/
	public A inAStartlistStmCG(AStartlistStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AStartlistStmCG} node from {@link AStartlistStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartlistStmCG} node
	*/
	public A outAStartlistStmCG(AStartlistStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link ATryStmCG} node from {@link ATryStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ATryStmCG} node
	*/
	public A caseATryStmCG(ATryStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATryStmCG(node));

		if(node.getStm() != null && !_visitedNodes.contains(node.getStm())) 
		{
			mergeReturns(retVal,node.getStm().apply(this));
		}
		{
			List<ACatchClauseDeclCG> copy = new ArrayList<ACatchClauseDeclCG>(node.getCatchClauses());
			for( ACatchClauseDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getFinally() != null && !_visitedNodes.contains(node.getFinally())) 
		{
			mergeReturns(retVal,node.getFinally().apply(this));
		}

		mergeReturns(retVal,outATryStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATryStmCG} node from {@link ATryStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ATryStmCG} node
	*/
	public A inATryStmCG(ATryStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link ATryStmCG} node from {@link ATryStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ATryStmCG} node
	*/
	public A outATryStmCG(ATryStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link APeriodicStmCG} node from {@link APeriodicStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStmCG} node
	*/
	public A caseAPeriodicStmCG(APeriodicStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPeriodicStmCG(node));

		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAPeriodicStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APeriodicStmCG} node from {@link APeriodicStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStmCG} node
	*/
	public A inAPeriodicStmCG(APeriodicStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link APeriodicStmCG} node from {@link APeriodicStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStmCG} node
	*/
	public A outAPeriodicStmCG(APeriodicStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link AStackDeclStmCG} node from {@link AStackDeclStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStackDeclStmCG} node
	*/
	public A caseAStackDeclStmCG(AStackDeclStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStackDeclStmCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAStackDeclStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AStackDeclStmCG} node from {@link AStackDeclStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStackDeclStmCG} node
	*/
	public A inAStackDeclStmCG(AStackDeclStmCG node) throws AnalysisException
	{
		return defaultInSStmCG(node);
	}


	/**
	* Called by the {@link AStackDeclStmCG} node from {@link AStackDeclStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStackDeclStmCG} node
	*/
	public A outAStackDeclStmCG(AStackDeclStmCG node) throws AnalysisException
	{
		return defaultOutSStmCG(node);
	}


	/**
	* Called by the {@link APlainCallStmCG} node from {@link APlainCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APlainCallStmCG} node
	*/
	public A caseAPlainCallStmCG(APlainCallStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPlainCallStmCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getClassType() != null && !_visitedNodes.contains(node.getClassType())) 
		{
			mergeReturns(retVal,node.getClassType().apply(this));
		}

		mergeReturns(retVal,outAPlainCallStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APlainCallStmCG} node from {@link APlainCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APlainCallStmCG} node
	*/
	public A inAPlainCallStmCG(APlainCallStmCG node) throws AnalysisException
	{
		return defaultInSCallStmCG(node);
	}


	/**
	* Called by the {@link APlainCallStmCG} node from {@link APlainCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APlainCallStmCG} node
	*/
	public A outAPlainCallStmCG(APlainCallStmCG node) throws AnalysisException
	{
		return defaultOutSCallStmCG(node);
	}


	/**
	* Called by the {@link ASuperCallStmCG} node from {@link ASuperCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperCallStmCG} node
	*/
	public A caseASuperCallStmCG(ASuperCallStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASuperCallStmCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outASuperCallStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASuperCallStmCG} node from {@link ASuperCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperCallStmCG} node
	*/
	public A inASuperCallStmCG(ASuperCallStmCG node) throws AnalysisException
	{
		return defaultInSCallStmCG(node);
	}


	/**
	* Called by the {@link ASuperCallStmCG} node from {@link ASuperCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperCallStmCG} node
	*/
	public A outASuperCallStmCG(ASuperCallStmCG node) throws AnalysisException
	{
		return defaultOutSCallStmCG(node);
	}


	/**
	* Called by the {@link ACaseAltStmStmCG} node from {@link ACaseAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltStmStmCG} node
	*/
	public A caseACaseAltStmStmCG(ACaseAltStmStmCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACaseAltStmStmCG(node));

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}
		if(node.getPatternType() != null && !_visitedNodes.contains(node.getPatternType())) 
		{
			mergeReturns(retVal,node.getPatternType().apply(this));
		}

		mergeReturns(retVal,outACaseAltStmStmCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACaseAltStmStmCG} node from {@link ACaseAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltStmStmCG} node
	*/
	public A inACaseAltStmStmCG(ACaseAltStmStmCG node) throws AnalysisException
	{
		return defaultInSAltStmStmCG(node);
	}


	/**
	* Called by the {@link ACaseAltStmStmCG} node from {@link ACaseAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltStmStmCG} node
	*/
	public A outACaseAltStmStmCG(ACaseAltStmStmCG node) throws AnalysisException
	{
		return defaultOutSAltStmStmCG(node);
	}


	/**
	* Called by the {@link AHeaderLetBeStCG} node from {@link AHeaderLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeaderLetBeStCG} node
	*/
	public A caseAHeaderLetBeStCG(AHeaderLetBeStCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAHeaderLetBeStCG(node));

		if(node.getBinding() != null && !_visitedNodes.contains(node.getBinding())) 
		{
			mergeReturns(retVal,node.getBinding().apply(this));
		}
		if(node.getSuchThat() != null && !_visitedNodes.contains(node.getSuchThat())) 
		{
			mergeReturns(retVal,node.getSuchThat().apply(this));
		}

		mergeReturns(retVal,outAHeaderLetBeStCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AHeaderLetBeStCG} node from {@link AHeaderLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeaderLetBeStCG} node
	*/
	public A inAHeaderLetBeStCG(AHeaderLetBeStCG node) throws AnalysisException
	{
		return defaultInSLetBeStCG(node);
	}


	/**
	* Called by the {@link AHeaderLetBeStCG} node from {@link AHeaderLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeaderLetBeStCG} node
	*/
	public A outAHeaderLetBeStCG(AHeaderLetBeStCG node) throws AnalysisException
	{
		return defaultOutSLetBeStCG(node);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public A defaultInSUnaryExpCG(SUnaryExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public A defaultOutSUnaryExpCG(SUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public A defaultSUnaryExpCG(SUnaryExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public A inSUnaryExpCG(SUnaryExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public A outSUnaryExpCG(SUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public A defaultInSBinaryExpCG(SBinaryExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public A defaultOutSBinaryExpCG(SBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public A defaultSBinaryExpCG(SBinaryExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public A inSBinaryExpCG(SBinaryExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public A outSBinaryExpCG(SBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AFieldExpCG} node from {@link AFieldExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExpCG} node
	*/
	public A caseAFieldExpCG(AFieldExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}

		mergeReturns(retVal,outAFieldExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldExpCG} node from {@link AFieldExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExpCG} node
	*/
	public A inAFieldExpCG(AFieldExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AFieldExpCG} node from {@link AFieldExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExpCG} node
	*/
	public A outAFieldExpCG(AFieldExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AApplyExpCG} node from {@link AApplyExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpCG} node
	*/
	public A caseAApplyExpCG(AApplyExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAApplyExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getRoot() != null && !_visitedNodes.contains(node.getRoot())) 
		{
			mergeReturns(retVal,node.getRoot().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAApplyExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AApplyExpCG} node from {@link AApplyExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpCG} node
	*/
	public A inAApplyExpCG(AApplyExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AApplyExpCG} node from {@link AApplyExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpCG} node
	*/
	public A outAApplyExpCG(AApplyExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ANewExpCG} node from {@link ANewExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewExpCG} node
	*/
	public A caseANewExpCG(ANewExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANewExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getName() != null && !_visitedNodes.contains(node.getName())) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANewExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANewExpCG} node from {@link ANewExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewExpCG} node
	*/
	public A inANewExpCG(ANewExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ANewExpCG} node from {@link ANewExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewExpCG} node
	*/
	public A outANewExpCG(ANewExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public A defaultInSVarExpCG(SVarExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public A defaultOutSVarExpCG(SVarExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public A defaultSVarExpCG(SVarExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public A inSVarExpCG(SVarExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public A outSVarExpCG(SVarExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AInstanceofExpCG} node from {@link AInstanceofExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceofExpCG} node
	*/
	public A caseAInstanceofExpCG(AInstanceofExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInstanceofExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getCheckedType() != null && !_visitedNodes.contains(node.getCheckedType())) 
		{
			mergeReturns(retVal,node.getCheckedType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAInstanceofExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AInstanceofExpCG} node from {@link AInstanceofExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceofExpCG} node
	*/
	public A inAInstanceofExpCG(AInstanceofExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AInstanceofExpCG} node from {@link AInstanceofExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceofExpCG} node
	*/
	public A outAInstanceofExpCG(AInstanceofExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public A defaultInSIsExpCG(SIsExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public A defaultOutSIsExpCG(SIsExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public A defaultSIsExpCG(SIsExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public A inSIsExpCG(SIsExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public A outSIsExpCG(SIsExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public A defaultInSLiteralExpCG(SLiteralExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public A defaultOutSLiteralExpCG(SLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public A defaultSLiteralExpCG(SLiteralExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public A inSLiteralExpCG(SLiteralExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public A outSLiteralExpCG(SLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ASelfExpCG} node from {@link ASelfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExpCG} node
	*/
	public A caseASelfExpCG(ASelfExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASelfExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outASelfExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASelfExpCG} node from {@link ASelfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExpCG} node
	*/
	public A inASelfExpCG(ASelfExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ASelfExpCG} node from {@link ASelfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExpCG} node
	*/
	public A outASelfExpCG(ASelfExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ANullExpCG} node from {@link ANullExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullExpCG} node
	*/
	public A caseANullExpCG(ANullExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANullExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outANullExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANullExpCG} node from {@link ANullExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullExpCG} node
	*/
	public A inANullExpCG(ANullExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ANullExpCG} node from {@link ANullExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullExpCG} node
	*/
	public A outANullExpCG(ANullExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ALetDefExpCG} node from {@link ALetDefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExpCG} node
	*/
	public A caseALetDefExpCG(ALetDefExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetDefExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AVarDeclCG> copy = new ArrayList<AVarDeclCG>(node.getLocalDefs());
			for( AVarDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outALetDefExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetDefExpCG} node from {@link ALetDefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExpCG} node
	*/
	public A inALetDefExpCG(ALetDefExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ALetDefExpCG} node from {@link ALetDefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExpCG} node
	*/
	public A outALetDefExpCG(ALetDefExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AMethodInstantiationExpCG} node from {@link AMethodInstantiationExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodInstantiationExpCG} node
	*/
	public A caseAMethodInstantiationExpCG(AMethodInstantiationExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMethodInstantiationExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFunc() != null && !_visitedNodes.contains(node.getFunc())) 
		{
			mergeReturns(retVal,node.getFunc().apply(this));
		}
		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getActualTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAMethodInstantiationExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMethodInstantiationExpCG} node from {@link AMethodInstantiationExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodInstantiationExpCG} node
	*/
	public A inAMethodInstantiationExpCG(AMethodInstantiationExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AMethodInstantiationExpCG} node from {@link AMethodInstantiationExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodInstantiationExpCG} node
	*/
	public A outAMethodInstantiationExpCG(AMethodInstantiationExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ATupleExpCG} node from {@link ATupleExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExpCG} node
	*/
	public A caseATupleExpCG(ATupleExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATupleExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getArgs());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getTupleType() != null && !_visitedNodes.contains(node.getTupleType())) 
		{
			mergeReturns(retVal,node.getTupleType().apply(this));
		}

		mergeReturns(retVal,outATupleExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATupleExpCG} node from {@link ATupleExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExpCG} node
	*/
	public A inATupleExpCG(ATupleExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ATupleExpCG} node from {@link ATupleExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExpCG} node
	*/
	public A outATupleExpCG(ATupleExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AFieldNumberExpCG} node from {@link AFieldNumberExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExpCG} node
	*/
	public A caseAFieldNumberExpCG(AFieldNumberExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldNumberExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTuple() != null && !_visitedNodes.contains(node.getTuple())) 
		{
			mergeReturns(retVal,node.getTuple().apply(this));
		}

		mergeReturns(retVal,outAFieldNumberExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldNumberExpCG} node from {@link AFieldNumberExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExpCG} node
	*/
	public A inAFieldNumberExpCG(AFieldNumberExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AFieldNumberExpCG} node from {@link AFieldNumberExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExpCG} node
	*/
	public A outAFieldNumberExpCG(AFieldNumberExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ATupleSizeExpCG} node from {@link ATupleSizeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleSizeExpCG} node
	*/
	public A caseATupleSizeExpCG(ATupleSizeExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATupleSizeExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTuple() != null && !_visitedNodes.contains(node.getTuple())) 
		{
			mergeReturns(retVal,node.getTuple().apply(this));
		}

		mergeReturns(retVal,outATupleSizeExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATupleSizeExpCG} node from {@link ATupleSizeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleSizeExpCG} node
	*/
	public A inATupleSizeExpCG(ATupleSizeExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ATupleSizeExpCG} node from {@link ATupleSizeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleSizeExpCG} node
	*/
	public A outATupleSizeExpCG(ATupleSizeExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ATernaryIfExpCG} node from {@link ATernaryIfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATernaryIfExpCG} node
	*/
	public A caseATernaryIfExpCG(ATernaryIfExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATernaryIfExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getCondition() != null && !_visitedNodes.contains(node.getCondition())) 
		{
			mergeReturns(retVal,node.getCondition().apply(this));
		}
		if(node.getTrueValue() != null && !_visitedNodes.contains(node.getTrueValue())) 
		{
			mergeReturns(retVal,node.getTrueValue().apply(this));
		}
		if(node.getFalseValue() != null && !_visitedNodes.contains(node.getFalseValue())) 
		{
			mergeReturns(retVal,node.getFalseValue().apply(this));
		}

		mergeReturns(retVal,outATernaryIfExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATernaryIfExpCG} node from {@link ATernaryIfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATernaryIfExpCG} node
	*/
	public A inATernaryIfExpCG(ATernaryIfExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ATernaryIfExpCG} node from {@link ATernaryIfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATernaryIfExpCG} node
	*/
	public A outATernaryIfExpCG(ATernaryIfExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AMapletExpCG} node from {@link AMapletExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExpCG} node
	*/
	public A caseAMapletExpCG(AMapletExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapletExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAMapletExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapletExpCG} node from {@link AMapletExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExpCG} node
	*/
	public A inAMapletExpCG(AMapletExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AMapletExpCG} node from {@link AMapletExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExpCG} node
	*/
	public A outAMapletExpCG(AMapletExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ALetBeStExpCG} node from {@link ALetBeStExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExpCG} node
	*/
	public A caseALetBeStExpCG(ALetBeStExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetBeStExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getHeader() != null && !_visitedNodes.contains(node.getHeader())) 
		{
			mergeReturns(retVal,node.getHeader().apply(this));
		}
		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outALetBeStExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetBeStExpCG} node from {@link ALetBeStExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExpCG} node
	*/
	public A inALetBeStExpCG(ALetBeStExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ALetBeStExpCG} node from {@link ALetBeStExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExpCG} node
	*/
	public A outALetBeStExpCG(ALetBeStExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public A defaultInSSeqExpCG(SSeqExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public A defaultOutSSeqExpCG(SSeqExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public A defaultSSeqExpCG(SSeqExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public A inSSeqExpCG(SSeqExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public A outSSeqExpCG(SSeqExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public A defaultInSSetExpCG(SSetExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public A defaultOutSSetExpCG(SSetExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public A defaultSSetExpCG(SSetExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public A inSSetExpCG(SSetExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public A outSSetExpCG(SSetExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public A defaultInSMapExpCG(SMapExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public A defaultOutSMapExpCG(SMapExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public A defaultSMapExpCG(SMapExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public A inSMapExpCG(SMapExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public A outSMapExpCG(SMapExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AMkBasicExpCG} node from {@link AMkBasicExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExpCG} node
	*/
	public A caseAMkBasicExpCG(AMkBasicExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMkBasicExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getArg() != null && !_visitedNodes.contains(node.getArg())) 
		{
			mergeReturns(retVal,node.getArg().apply(this));
		}

		mergeReturns(retVal,outAMkBasicExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMkBasicExpCG} node from {@link AMkBasicExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExpCG} node
	*/
	public A inAMkBasicExpCG(AMkBasicExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AMkBasicExpCG} node from {@link AMkBasicExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExpCG} node
	*/
	public A outAMkBasicExpCG(AMkBasicExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ARecordModExpCG} node from {@link ARecordModExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModExpCG} node
	*/
	public A caseARecordModExpCG(ARecordModExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordModExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getRec() != null && !_visitedNodes.contains(node.getRec())) 
		{
			mergeReturns(retVal,node.getRec().apply(this));
		}
		if(node.getRecType() != null && !_visitedNodes.contains(node.getRecType())) 
		{
			mergeReturns(retVal,node.getRecType().apply(this));
		}
		{
			List<ARecordModifierCG> copy = new ArrayList<ARecordModifierCG>(node.getModifiers());
			for( ARecordModifierCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outARecordModExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordModExpCG} node from {@link ARecordModExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModExpCG} node
	*/
	public A inARecordModExpCG(ARecordModExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ARecordModExpCG} node from {@link ARecordModExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModExpCG} node
	*/
	public A outARecordModExpCG(ARecordModExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public A defaultInSQuantifierExpCG(SQuantifierExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public A defaultOutSQuantifierExpCG(SQuantifierExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public A defaultSQuantifierExpCG(SQuantifierExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public A inSQuantifierExpCG(SQuantifierExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public A outSQuantifierExpCG(SQuantifierExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link APreIncExpCG} node from {@link APreIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreIncExpCG} node
	*/
	public A caseAPreIncExpCG(APreIncExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPreIncExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAPreIncExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APreIncExpCG} node from {@link APreIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreIncExpCG} node
	*/
	public A inAPreIncExpCG(APreIncExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link APreIncExpCG} node from {@link APreIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreIncExpCG} node
	*/
	public A outAPreIncExpCG(APreIncExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link APreDecExpCG} node from {@link APreDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreDecExpCG} node
	*/
	public A caseAPreDecExpCG(APreDecExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPreDecExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAPreDecExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APreDecExpCG} node from {@link APreDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreDecExpCG} node
	*/
	public A inAPreDecExpCG(APreDecExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link APreDecExpCG} node from {@link APreDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreDecExpCG} node
	*/
	public A outAPreDecExpCG(APreDecExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link APostIncExpCG} node from {@link APostIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostIncExpCG} node
	*/
	public A caseAPostIncExpCG(APostIncExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPostIncExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAPostIncExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APostIncExpCG} node from {@link APostIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostIncExpCG} node
	*/
	public A inAPostIncExpCG(APostIncExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link APostIncExpCG} node from {@link APostIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostIncExpCG} node
	*/
	public A outAPostIncExpCG(APostIncExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link APostDecExpCG} node from {@link APostDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostDecExpCG} node
	*/
	public A caseAPostDecExpCG(APostDecExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPostDecExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAPostDecExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APostDecExpCG} node from {@link APostDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostDecExpCG} node
	*/
	public A inAPostDecExpCG(APostDecExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link APostDecExpCG} node from {@link APostDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostDecExpCG} node
	*/
	public A outAPostDecExpCG(APostDecExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ADeRefExpCG} node from {@link ADeRefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADeRefExpCG} node
	*/
	public A caseADeRefExpCG(ADeRefExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADeRefExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADeRefExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADeRefExpCG} node from {@link ADeRefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADeRefExpCG} node
	*/
	public A inADeRefExpCG(ADeRefExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ADeRefExpCG} node from {@link ADeRefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADeRefExpCG} node
	*/
	public A outADeRefExpCG(ADeRefExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public A defaultInSRuntimeErrorExpCG(SRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public A defaultOutSRuntimeErrorExpCG(SRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public A defaultSRuntimeErrorExpCG(SRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public A inSRuntimeErrorExpCG(SRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public A outSRuntimeErrorExpCG(SRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AExternalExpCG} node from {@link AExternalExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalExpCG} node
	*/
	public A caseAExternalExpCG(AExternalExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExternalExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAExternalExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AExternalExpCG} node from {@link AExternalExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalExpCG} node
	*/
	public A inAExternalExpCG(AExternalExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AExternalExpCG} node from {@link AExternalExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalExpCG} node
	*/
	public A outAExternalExpCG(AExternalExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ATypeArgExpCG} node from {@link ATypeArgExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeArgExpCG} node
	*/
	public A caseATypeArgExpCG(ATypeArgExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeArgExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outATypeArgExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeArgExpCG} node from {@link ATypeArgExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeArgExpCG} node
	*/
	public A inATypeArgExpCG(ATypeArgExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ATypeArgExpCG} node from {@link ATypeArgExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeArgExpCG} node
	*/
	public A outATypeArgExpCG(ATypeArgExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ALambdaExpCG} node from {@link ALambdaExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExpCG} node
	*/
	public A caseALambdaExpCG(ALambdaExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALambdaExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AFormalParamLocalParamCG> copy = new ArrayList<AFormalParamLocalParamCG>(node.getParams());
			for( AFormalParamLocalParamCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outALambdaExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALambdaExpCG} node from {@link ALambdaExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExpCG} node
	*/
	public A inALambdaExpCG(ALambdaExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ALambdaExpCG} node from {@link ALambdaExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExpCG} node
	*/
	public A outALambdaExpCG(ALambdaExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AAnonymousClassExpCG} node from {@link AAnonymousClassExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAnonymousClassExpCG} node
	*/
	public A caseAAnonymousClassExpCG(AAnonymousClassExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAnonymousClassExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AMethodDeclCG> copy = new ArrayList<AMethodDeclCG>(node.getMethods());
			for( AMethodDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAAnonymousClassExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAnonymousClassExpCG} node from {@link AAnonymousClassExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAnonymousClassExpCG} node
	*/
	public A inAAnonymousClassExpCG(AAnonymousClassExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AAnonymousClassExpCG} node from {@link AAnonymousClassExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAnonymousClassExpCG} node
	*/
	public A outAAnonymousClassExpCG(AAnonymousClassExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ANotImplementedExpCG} node from {@link ANotImplementedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedExpCG} node
	*/
	public A caseANotImplementedExpCG(ANotImplementedExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotImplementedExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outANotImplementedExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotImplementedExpCG} node from {@link ANotImplementedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedExpCG} node
	*/
	public A inANotImplementedExpCG(ANotImplementedExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ANotImplementedExpCG} node from {@link ANotImplementedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedExpCG} node
	*/
	public A outANotImplementedExpCG(ANotImplementedExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AUndefinedExpCG} node from {@link AUndefinedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExpCG} node
	*/
	public A caseAUndefinedExpCG(AUndefinedExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUndefinedExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAUndefinedExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AUndefinedExpCG} node from {@link AUndefinedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExpCG} node
	*/
	public A inAUndefinedExpCG(AUndefinedExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AUndefinedExpCG} node from {@link AUndefinedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExpCG} node
	*/
	public A outAUndefinedExpCG(AUndefinedExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AThreadIdExpCG} node from {@link AThreadIdExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExpCG} node
	*/
	public A caseAThreadIdExpCG(AThreadIdExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAThreadIdExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAThreadIdExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AThreadIdExpCG} node from {@link AThreadIdExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExpCG} node
	*/
	public A inAThreadIdExpCG(AThreadIdExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AThreadIdExpCG} node from {@link AThreadIdExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExpCG} node
	*/
	public A outAThreadIdExpCG(AThreadIdExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ATupleCompatibilityExpCG} node from {@link ATupleCompatibilityExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleCompatibilityExpCG} node
	*/
	public A caseATupleCompatibilityExpCG(ATupleCompatibilityExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATupleCompatibilityExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTuple() != null && !_visitedNodes.contains(node.getTuple())) 
		{
			mergeReturns(retVal,node.getTuple().apply(this));
		}
		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATupleCompatibilityExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATupleCompatibilityExpCG} node from {@link ATupleCompatibilityExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleCompatibilityExpCG} node
	*/
	public A inATupleCompatibilityExpCG(ATupleCompatibilityExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ATupleCompatibilityExpCG} node from {@link ATupleCompatibilityExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleCompatibilityExpCG} node
	*/
	public A outATupleCompatibilityExpCG(ATupleCompatibilityExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ACasesExpCG} node from {@link ACasesExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExpCG} node
	*/
	public A caseACasesExpCG(ACasesExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACasesExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		{
			List<ACaseAltExpExpCG> copy = new ArrayList<ACaseAltExpExpCG>(node.getCases());
			for( ACaseAltExpExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getOthers() != null && !_visitedNodes.contains(node.getOthers())) 
		{
			mergeReturns(retVal,node.getOthers().apply(this));
		}

		mergeReturns(retVal,outACasesExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACasesExpCG} node from {@link ACasesExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExpCG} node
	*/
	public A inACasesExpCG(ACasesExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ACasesExpCG} node from {@link ACasesExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExpCG} node
	*/
	public A outACasesExpCG(ACasesExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public A defaultInSAltExpExpCG(SAltExpExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public A defaultOutSAltExpExpCG(SAltExpExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public A defaultSAltExpExpCG(SAltExpExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public A inSAltExpExpCG(SAltExpExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public A outSAltExpExpCG(SAltExpExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ASubSeqExpCG} node from {@link ASubSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubSeqExpCG} node
	*/
	public A caseASubSeqExpCG(ASubSeqExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASubSeqExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getSeq() != null && !_visitedNodes.contains(node.getSeq())) 
		{
			mergeReturns(retVal,node.getSeq().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}

		mergeReturns(retVal,outASubSeqExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASubSeqExpCG} node from {@link ASubSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubSeqExpCG} node
	*/
	public A inASubSeqExpCG(ASubSeqExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ASubSeqExpCG} node from {@link ASubSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubSeqExpCG} node
	*/
	public A outASubSeqExpCG(ASubSeqExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AHistoryExpCG} node from {@link AHistoryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExpCG} node
	*/
	public A caseAHistoryExpCG(AHistoryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAHistoryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getSentinelType() != null && !_visitedNodes.contains(node.getSentinelType())) 
		{
			mergeReturns(retVal,node.getSentinelType().apply(this));
		}

		mergeReturns(retVal,outAHistoryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AHistoryExpCG} node from {@link AHistoryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExpCG} node
	*/
	public A inAHistoryExpCG(AHistoryExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AHistoryExpCG} node from {@link AHistoryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExpCG} node
	*/
	public A outAHistoryExpCG(AHistoryExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ATimeExpCG} node from {@link ATimeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExpCG} node
	*/
	public A caseATimeExpCG(ATimeExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATimeExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outATimeExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATimeExpCG} node from {@link ATimeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExpCG} node
	*/
	public A inATimeExpCG(ATimeExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link ATimeExpCG} node from {@link ATimeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExpCG} node
	*/
	public A outATimeExpCG(ATimeExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link AAssignExpExpCG} node from {@link AAssignExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignExpExpCG} node
	*/
	public A caseAAssignExpExpCG(AAssignExpExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAssignExpExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			mergeReturns(retVal,node.getTarget().apply(this));
		}
		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAAssignExpExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAssignExpExpCG} node from {@link AAssignExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignExpExpCG} node
	*/
	public A inAAssignExpExpCG(AAssignExpExpCG node) throws AnalysisException
	{
		return defaultInSExpCG(node);
	}


	/**
	* Called by the {@link AAssignExpExpCG} node from {@link AAssignExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignExpExpCG} node
	*/
	public A outAAssignExpExpCG(AAssignExpExpCG node) throws AnalysisException
	{
		return defaultOutSExpCG(node);
	}


	/**
	* Called by the {@link ARecordModifierCG} node from {@link ARecordModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifierCG} node
	*/
	public A caseARecordModifierCG(ARecordModifierCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordModifierCG(node));

		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outARecordModifierCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordModifierCG} node from {@link ARecordModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifierCG} node
	*/
	public A inARecordModifierCG(ARecordModifierCG node) throws AnalysisException
	{
		return defaultInSModifierCG(node);
	}


	/**
	* Called by the {@link ARecordModifierCG} node from {@link ARecordModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifierCG} node
	*/
	public A outARecordModifierCG(ARecordModifierCG node) throws AnalysisException
	{
		return defaultOutSModifierCG(node);
	}


	/**
	* Called by the {@link ABoolIsExpCG} node from {@link ABoolIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolIsExpCG} node
	*/
	public A caseABoolIsExpCG(ABoolIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABoolIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outABoolIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABoolIsExpCG} node from {@link ABoolIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolIsExpCG} node
	*/
	public A inABoolIsExpCG(ABoolIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ABoolIsExpCG} node from {@link ABoolIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolIsExpCG} node
	*/
	public A outABoolIsExpCG(ABoolIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ANatIsExpCG} node from {@link ANatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatIsExpCG} node
	*/
	public A caseANatIsExpCG(ANatIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANatIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outANatIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANatIsExpCG} node from {@link ANatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatIsExpCG} node
	*/
	public A inANatIsExpCG(ANatIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ANatIsExpCG} node from {@link ANatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatIsExpCG} node
	*/
	public A outANatIsExpCG(ANatIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ANat1IsExpCG} node from {@link ANat1IsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1IsExpCG} node
	*/
	public A caseANat1IsExpCG(ANat1IsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANat1IsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outANat1IsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANat1IsExpCG} node from {@link ANat1IsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1IsExpCG} node
	*/
	public A inANat1IsExpCG(ANat1IsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ANat1IsExpCG} node from {@link ANat1IsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1IsExpCG} node
	*/
	public A outANat1IsExpCG(ANat1IsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link AIntIsExpCG} node from {@link AIntIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntIsExpCG} node
	*/
	public A caseAIntIsExpCG(AIntIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAIntIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntIsExpCG} node from {@link AIntIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntIsExpCG} node
	*/
	public A inAIntIsExpCG(AIntIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link AIntIsExpCG} node from {@link AIntIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntIsExpCG} node
	*/
	public A outAIntIsExpCG(AIntIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ARatIsExpCG} node from {@link ARatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatIsExpCG} node
	*/
	public A caseARatIsExpCG(ARatIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARatIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outARatIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARatIsExpCG} node from {@link ARatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatIsExpCG} node
	*/
	public A inARatIsExpCG(ARatIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ARatIsExpCG} node from {@link ARatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatIsExpCG} node
	*/
	public A outARatIsExpCG(ARatIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ARealIsExpCG} node from {@link ARealIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealIsExpCG} node
	*/
	public A caseARealIsExpCG(ARealIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outARealIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealIsExpCG} node from {@link ARealIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealIsExpCG} node
	*/
	public A inARealIsExpCG(ARealIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ARealIsExpCG} node from {@link ARealIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealIsExpCG} node
	*/
	public A outARealIsExpCG(ARealIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ACharIsExpCG} node from {@link ACharIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharIsExpCG} node
	*/
	public A caseACharIsExpCG(ACharIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outACharIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharIsExpCG} node from {@link ACharIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharIsExpCG} node
	*/
	public A inACharIsExpCG(ACharIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ACharIsExpCG} node from {@link ACharIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharIsExpCG} node
	*/
	public A outACharIsExpCG(ACharIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ATokenIsExpCG} node from {@link ATokenIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenIsExpCG} node
	*/
	public A caseATokenIsExpCG(ATokenIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATokenIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outATokenIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATokenIsExpCG} node from {@link ATokenIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenIsExpCG} node
	*/
	public A inATokenIsExpCG(ATokenIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ATokenIsExpCG} node from {@link ATokenIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenIsExpCG} node
	*/
	public A outATokenIsExpCG(ATokenIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ATupleIsExpCG} node from {@link ATupleIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleIsExpCG} node
	*/
	public A caseATupleIsExpCG(ATupleIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATupleIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getCheckedType() != null && !_visitedNodes.contains(node.getCheckedType())) 
		{
			mergeReturns(retVal,node.getCheckedType().apply(this));
		}

		mergeReturns(retVal,outATupleIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATupleIsExpCG} node from {@link ATupleIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleIsExpCG} node
	*/
	public A inATupleIsExpCG(ATupleIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link ATupleIsExpCG} node from {@link ATupleIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleIsExpCG} node
	*/
	public A outATupleIsExpCG(ATupleIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link AGeneralIsExpCG} node from {@link AGeneralIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGeneralIsExpCG} node
	*/
	public A caseAGeneralIsExpCG(AGeneralIsExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAGeneralIsExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getCheckedType() != null && !_visitedNodes.contains(node.getCheckedType())) 
		{
			mergeReturns(retVal,node.getCheckedType().apply(this));
		}

		mergeReturns(retVal,outAGeneralIsExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AGeneralIsExpCG} node from {@link AGeneralIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGeneralIsExpCG} node
	*/
	public A inAGeneralIsExpCG(AGeneralIsExpCG node) throws AnalysisException
	{
		return defaultInSIsExpCG(node);
	}


	/**
	* Called by the {@link AGeneralIsExpCG} node from {@link AGeneralIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGeneralIsExpCG} node
	*/
	public A outAGeneralIsExpCG(AGeneralIsExpCG node) throws AnalysisException
	{
		return defaultOutSIsExpCG(node);
	}


	/**
	* Called by the {@link ACaseAltExpExpCG} node from {@link ACaseAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltExpExpCG} node
	*/
	public A caseACaseAltExpExpCG(ACaseAltExpExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACaseAltExpExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}
		if(node.getPatternType() != null && !_visitedNodes.contains(node.getPatternType())) 
		{
			mergeReturns(retVal,node.getPatternType().apply(this));
		}

		mergeReturns(retVal,outACaseAltExpExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACaseAltExpExpCG} node from {@link ACaseAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltExpExpCG} node
	*/
	public A inACaseAltExpExpCG(ACaseAltExpExpCG node) throws AnalysisException
	{
		return defaultInSAltExpExpCG(node);
	}


	/**
	* Called by the {@link ACaseAltExpExpCG} node from {@link ACaseAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltExpExpCG} node
	*/
	public A outACaseAltExpExpCG(ACaseAltExpExpCG node) throws AnalysisException
	{
		return defaultOutSAltExpExpCG(node);
	}


	/**
	* Called by the {@link ALetBeStNoBindingRuntimeErrorExpCG} node from {@link ALetBeStNoBindingRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStNoBindingRuntimeErrorExpCG} node
	*/
	public A caseALetBeStNoBindingRuntimeErrorExpCG(ALetBeStNoBindingRuntimeErrorExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetBeStNoBindingRuntimeErrorExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outALetBeStNoBindingRuntimeErrorExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetBeStNoBindingRuntimeErrorExpCG} node from {@link ALetBeStNoBindingRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStNoBindingRuntimeErrorExpCG} node
	*/
	public A inALetBeStNoBindingRuntimeErrorExpCG(ALetBeStNoBindingRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultInSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link ALetBeStNoBindingRuntimeErrorExpCG} node from {@link ALetBeStNoBindingRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStNoBindingRuntimeErrorExpCG} node
	*/
	public A outALetBeStNoBindingRuntimeErrorExpCG(ALetBeStNoBindingRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultOutSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link APatternMatchRuntimeErrorExpCG} node from {@link APatternMatchRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APatternMatchRuntimeErrorExpCG} node
	*/
	public A caseAPatternMatchRuntimeErrorExpCG(APatternMatchRuntimeErrorExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPatternMatchRuntimeErrorExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAPatternMatchRuntimeErrorExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APatternMatchRuntimeErrorExpCG} node from {@link APatternMatchRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APatternMatchRuntimeErrorExpCG} node
	*/
	public A inAPatternMatchRuntimeErrorExpCG(APatternMatchRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultInSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link APatternMatchRuntimeErrorExpCG} node from {@link APatternMatchRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APatternMatchRuntimeErrorExpCG} node
	*/
	public A outAPatternMatchRuntimeErrorExpCG(APatternMatchRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultOutSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link AMissingMemberRuntimeErrorExpCG} node from {@link AMissingMemberRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMissingMemberRuntimeErrorExpCG} node
	*/
	public A caseAMissingMemberRuntimeErrorExpCG(AMissingMemberRuntimeErrorExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMissingMemberRuntimeErrorExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAMissingMemberRuntimeErrorExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMissingMemberRuntimeErrorExpCG} node from {@link AMissingMemberRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMissingMemberRuntimeErrorExpCG} node
	*/
	public A inAMissingMemberRuntimeErrorExpCG(AMissingMemberRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultInSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link AMissingMemberRuntimeErrorExpCG} node from {@link AMissingMemberRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMissingMemberRuntimeErrorExpCG} node
	*/
	public A outAMissingMemberRuntimeErrorExpCG(AMissingMemberRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultOutSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link APreCondRuntimeErrorExpCG} node from {@link APreCondRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreCondRuntimeErrorExpCG} node
	*/
	public A caseAPreCondRuntimeErrorExpCG(APreCondRuntimeErrorExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPreCondRuntimeErrorExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAPreCondRuntimeErrorExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APreCondRuntimeErrorExpCG} node from {@link APreCondRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreCondRuntimeErrorExpCG} node
	*/
	public A inAPreCondRuntimeErrorExpCG(APreCondRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultInSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link APreCondRuntimeErrorExpCG} node from {@link APreCondRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreCondRuntimeErrorExpCG} node
	*/
	public A outAPreCondRuntimeErrorExpCG(APreCondRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultOutSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link AIdentifierVarExpCG} node from {@link AIdentifierVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierVarExpCG} node
	*/
	public A caseAIdentifierVarExpCG(AIdentifierVarExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIdentifierVarExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAIdentifierVarExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIdentifierVarExpCG} node from {@link AIdentifierVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierVarExpCG} node
	*/
	public A inAIdentifierVarExpCG(AIdentifierVarExpCG node) throws AnalysisException
	{
		return defaultInSVarExpCG(node);
	}


	/**
	* Called by the {@link AIdentifierVarExpCG} node from {@link AIdentifierVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierVarExpCG} node
	*/
	public A outAIdentifierVarExpCG(AIdentifierVarExpCG node) throws AnalysisException
	{
		return defaultOutSVarExpCG(node);
	}


	/**
	* Called by the {@link AExplicitVarExpCG} node from {@link AExplicitVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitVarExpCG} node
	*/
	public A caseAExplicitVarExpCG(AExplicitVarExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExplicitVarExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getClassType() != null && !_visitedNodes.contains(node.getClassType())) 
		{
			mergeReturns(retVal,node.getClassType().apply(this));
		}

		mergeReturns(retVal,outAExplicitVarExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AExplicitVarExpCG} node from {@link AExplicitVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitVarExpCG} node
	*/
	public A inAExplicitVarExpCG(AExplicitVarExpCG node) throws AnalysisException
	{
		return defaultInSVarExpCG(node);
	}


	/**
	* Called by the {@link AExplicitVarExpCG} node from {@link AExplicitVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitVarExpCG} node
	*/
	public A outAExplicitVarExpCG(AExplicitVarExpCG node) throws AnalysisException
	{
		return defaultOutSVarExpCG(node);
	}


	/**
	* Called by the {@link ASuperVarExpCG} node from {@link ASuperVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperVarExpCG} node
	*/
	public A caseASuperVarExpCG(ASuperVarExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASuperVarExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outASuperVarExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASuperVarExpCG} node from {@link ASuperVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperVarExpCG} node
	*/
	public A inASuperVarExpCG(ASuperVarExpCG node) throws AnalysisException
	{
		return defaultInSVarExpCG(node);
	}


	/**
	* Called by the {@link ASuperVarExpCG} node from {@link ASuperVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperVarExpCG} node
	*/
	public A outASuperVarExpCG(ASuperVarExpCG node) throws AnalysisException
	{
		return defaultOutSVarExpCG(node);
	}


	/**
	* Called by the {@link AIntLiteralExpCG} node from {@link AIntLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExpCG} node
	*/
	public A caseAIntLiteralExpCG(AIntLiteralExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntLiteralExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAIntLiteralExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntLiteralExpCG} node from {@link AIntLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExpCG} node
	*/
	public A inAIntLiteralExpCG(AIntLiteralExpCG node) throws AnalysisException
	{
		return defaultInSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AIntLiteralExpCG} node from {@link AIntLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExpCG} node
	*/
	public A outAIntLiteralExpCG(AIntLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ARealLiteralExpCG} node from {@link ARealLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExpCG} node
	*/
	public A caseARealLiteralExpCG(ARealLiteralExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealLiteralExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outARealLiteralExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealLiteralExpCG} node from {@link ARealLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExpCG} node
	*/
	public A inARealLiteralExpCG(ARealLiteralExpCG node) throws AnalysisException
	{
		return defaultInSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ARealLiteralExpCG} node from {@link ARealLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExpCG} node
	*/
	public A outARealLiteralExpCG(ARealLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ABoolLiteralExpCG} node from {@link ABoolLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolLiteralExpCG} node
	*/
	public A caseABoolLiteralExpCG(ABoolLiteralExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABoolLiteralExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outABoolLiteralExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABoolLiteralExpCG} node from {@link ABoolLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolLiteralExpCG} node
	*/
	public A inABoolLiteralExpCG(ABoolLiteralExpCG node) throws AnalysisException
	{
		return defaultInSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ABoolLiteralExpCG} node from {@link ABoolLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolLiteralExpCG} node
	*/
	public A outABoolLiteralExpCG(ABoolLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ACharLiteralExpCG} node from {@link ACharLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExpCG} node
	*/
	public A caseACharLiteralExpCG(ACharLiteralExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharLiteralExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outACharLiteralExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharLiteralExpCG} node from {@link ACharLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExpCG} node
	*/
	public A inACharLiteralExpCG(ACharLiteralExpCG node) throws AnalysisException
	{
		return defaultInSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ACharLiteralExpCG} node from {@link ACharLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExpCG} node
	*/
	public A outACharLiteralExpCG(ACharLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AQuoteLiteralExpCG} node from {@link AQuoteLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExpCG} node
	*/
	public A caseAQuoteLiteralExpCG(AQuoteLiteralExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAQuoteLiteralExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAQuoteLiteralExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AQuoteLiteralExpCG} node from {@link AQuoteLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExpCG} node
	*/
	public A inAQuoteLiteralExpCG(AQuoteLiteralExpCG node) throws AnalysisException
	{
		return defaultInSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AQuoteLiteralExpCG} node from {@link AQuoteLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExpCG} node
	*/
	public A outAQuoteLiteralExpCG(AQuoteLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AStringLiteralExpCG} node from {@link AStringLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExpCG} node
	*/
	public A caseAStringLiteralExpCG(AStringLiteralExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStringLiteralExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAStringLiteralExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AStringLiteralExpCG} node from {@link AStringLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExpCG} node
	*/
	public A inAStringLiteralExpCG(AStringLiteralExpCG node) throws AnalysisException
	{
		return defaultInSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AStringLiteralExpCG} node from {@link AStringLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExpCG} node
	*/
	public A outAStringLiteralExpCG(AStringLiteralExpCG node) throws AnalysisException
	{
		return defaultOutSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AForAllQuantifierExpCG} node from {@link AForAllQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllQuantifierExpCG} node
	*/
	public A caseAForAllQuantifierExpCG(AForAllQuantifierExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForAllQuantifierExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindList());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outAForAllQuantifierExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AForAllQuantifierExpCG} node from {@link AForAllQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllQuantifierExpCG} node
	*/
	public A inAForAllQuantifierExpCG(AForAllQuantifierExpCG node) throws AnalysisException
	{
		return defaultInSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link AForAllQuantifierExpCG} node from {@link AForAllQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllQuantifierExpCG} node
	*/
	public A outAForAllQuantifierExpCG(AForAllQuantifierExpCG node) throws AnalysisException
	{
		return defaultOutSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link AExistsQuantifierExpCG} node from {@link AExistsQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExistsQuantifierExpCG} node
	*/
	public A caseAExistsQuantifierExpCG(AExistsQuantifierExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExistsQuantifierExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindList());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outAExistsQuantifierExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AExistsQuantifierExpCG} node from {@link AExistsQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExistsQuantifierExpCG} node
	*/
	public A inAExistsQuantifierExpCG(AExistsQuantifierExpCG node) throws AnalysisException
	{
		return defaultInSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link AExistsQuantifierExpCG} node from {@link AExistsQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExistsQuantifierExpCG} node
	*/
	public A outAExistsQuantifierExpCG(AExistsQuantifierExpCG node) throws AnalysisException
	{
		return defaultOutSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link AExists1QuantifierExpCG} node from {@link AExists1QuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExists1QuantifierExpCG} node
	*/
	public A caseAExists1QuantifierExpCG(AExists1QuantifierExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExists1QuantifierExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindList());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outAExists1QuantifierExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AExists1QuantifierExpCG} node from {@link AExists1QuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExists1QuantifierExpCG} node
	*/
	public A inAExists1QuantifierExpCG(AExists1QuantifierExpCG node) throws AnalysisException
	{
		return defaultInSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link AExists1QuantifierExpCG} node from {@link AExists1QuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExists1QuantifierExpCG} node
	*/
	public A outAExists1QuantifierExpCG(AExists1QuantifierExpCG node) throws AnalysisException
	{
		return defaultOutSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public A defaultInSNumericBinaryExpCG(SNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public A defaultOutSNumericBinaryExpCG(SNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public A defaultSNumericBinaryExpCG(SNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public A inSNumericBinaryExpCG(SNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public A outSNumericBinaryExpCG(SNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public A defaultInSBoolBinaryExpCG(SBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public A defaultOutSBoolBinaryExpCG(SBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public A defaultSBoolBinaryExpCG(SBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public A inSBoolBinaryExpCG(SBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public A outSBoolBinaryExpCG(SBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAddrEqualsBinaryExpCG} node from {@link AAddrEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrEqualsBinaryExpCG} node
	*/
	public A caseAAddrEqualsBinaryExpCG(AAddrEqualsBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAddrEqualsBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAAddrEqualsBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAddrEqualsBinaryExpCG} node from {@link AAddrEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrEqualsBinaryExpCG} node
	*/
	public A inAAddrEqualsBinaryExpCG(AAddrEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAddrEqualsBinaryExpCG} node from {@link AAddrEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrEqualsBinaryExpCG} node
	*/
	public A outAAddrEqualsBinaryExpCG(AAddrEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAddrNotEqualsBinaryExpCG} node from {@link AAddrNotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrNotEqualsBinaryExpCG} node
	*/
	public A caseAAddrNotEqualsBinaryExpCG(AAddrNotEqualsBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAddrNotEqualsBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAAddrNotEqualsBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAddrNotEqualsBinaryExpCG} node from {@link AAddrNotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrNotEqualsBinaryExpCG} node
	*/
	public A inAAddrNotEqualsBinaryExpCG(AAddrNotEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAddrNotEqualsBinaryExpCG} node from {@link AAddrNotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrNotEqualsBinaryExpCG} node
	*/
	public A outAAddrNotEqualsBinaryExpCG(AAddrNotEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AEqualsBinaryExpCG} node from {@link AEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExpCG} node
	*/
	public A caseAEqualsBinaryExpCG(AEqualsBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAEqualsBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAEqualsBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AEqualsBinaryExpCG} node from {@link AEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExpCG} node
	*/
	public A inAEqualsBinaryExpCG(AEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AEqualsBinaryExpCG} node from {@link AEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExpCG} node
	*/
	public A outAEqualsBinaryExpCG(AEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ANotEqualsBinaryExpCG} node from {@link ANotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualsBinaryExpCG} node
	*/
	public A caseANotEqualsBinaryExpCG(ANotEqualsBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotEqualsBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outANotEqualsBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotEqualsBinaryExpCG} node from {@link ANotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualsBinaryExpCG} node
	*/
	public A inANotEqualsBinaryExpCG(ANotEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ANotEqualsBinaryExpCG} node from {@link ANotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualsBinaryExpCG} node
	*/
	public A outANotEqualsBinaryExpCG(ANotEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqConcatBinaryExpCG} node from {@link ASeqConcatBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExpCG} node
	*/
	public A caseASeqConcatBinaryExpCG(ASeqConcatBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqConcatBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASeqConcatBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqConcatBinaryExpCG} node from {@link ASeqConcatBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExpCG} node
	*/
	public A inASeqConcatBinaryExpCG(ASeqConcatBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqConcatBinaryExpCG} node from {@link ASeqConcatBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExpCG} node
	*/
	public A outASeqConcatBinaryExpCG(ASeqConcatBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqModificationBinaryExpCG} node from {@link ASeqModificationBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqModificationBinaryExpCG} node
	*/
	public A caseASeqModificationBinaryExpCG(ASeqModificationBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqModificationBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASeqModificationBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqModificationBinaryExpCG} node from {@link ASeqModificationBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqModificationBinaryExpCG} node
	*/
	public A inASeqModificationBinaryExpCG(ASeqModificationBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqModificationBinaryExpCG} node from {@link ASeqModificationBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqModificationBinaryExpCG} node
	*/
	public A outASeqModificationBinaryExpCG(ASeqModificationBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AInSetBinaryExpCG} node from {@link AInSetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExpCG} node
	*/
	public A caseAInSetBinaryExpCG(AInSetBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInSetBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAInSetBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AInSetBinaryExpCG} node from {@link AInSetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExpCG} node
	*/
	public A inAInSetBinaryExpCG(AInSetBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AInSetBinaryExpCG} node from {@link AInSetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExpCG} node
	*/
	public A outAInSetBinaryExpCG(AInSetBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetUnionBinaryExpCG} node from {@link ASetUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExpCG} node
	*/
	public A caseASetUnionBinaryExpCG(ASetUnionBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetUnionBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetUnionBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetUnionBinaryExpCG} node from {@link ASetUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExpCG} node
	*/
	public A inASetUnionBinaryExpCG(ASetUnionBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetUnionBinaryExpCG} node from {@link ASetUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExpCG} node
	*/
	public A outASetUnionBinaryExpCG(ASetUnionBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetIntersectBinaryExpCG} node from {@link ASetIntersectBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExpCG} node
	*/
	public A caseASetIntersectBinaryExpCG(ASetIntersectBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetIntersectBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetIntersectBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetIntersectBinaryExpCG} node from {@link ASetIntersectBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExpCG} node
	*/
	public A inASetIntersectBinaryExpCG(ASetIntersectBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetIntersectBinaryExpCG} node from {@link ASetIntersectBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExpCG} node
	*/
	public A outASetIntersectBinaryExpCG(ASetIntersectBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExpCG} node from {@link ASetDifferenceBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExpCG} node
	*/
	public A caseASetDifferenceBinaryExpCG(ASetDifferenceBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetDifferenceBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetDifferenceBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExpCG} node from {@link ASetDifferenceBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExpCG} node
	*/
	public A inASetDifferenceBinaryExpCG(ASetDifferenceBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExpCG} node from {@link ASetDifferenceBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExpCG} node
	*/
	public A outASetDifferenceBinaryExpCG(ASetDifferenceBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetSubsetBinaryExpCG} node from {@link ASetSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSubsetBinaryExpCG} node
	*/
	public A caseASetSubsetBinaryExpCG(ASetSubsetBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetSubsetBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetSubsetBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetSubsetBinaryExpCG} node from {@link ASetSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSubsetBinaryExpCG} node
	*/
	public A inASetSubsetBinaryExpCG(ASetSubsetBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetSubsetBinaryExpCG} node from {@link ASetSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSubsetBinaryExpCG} node
	*/
	public A outASetSubsetBinaryExpCG(ASetSubsetBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetProperSubsetBinaryExpCG} node from {@link ASetProperSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetProperSubsetBinaryExpCG} node
	*/
	public A caseASetProperSubsetBinaryExpCG(ASetProperSubsetBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetProperSubsetBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetProperSubsetBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetProperSubsetBinaryExpCG} node from {@link ASetProperSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetProperSubsetBinaryExpCG} node
	*/
	public A inASetProperSubsetBinaryExpCG(ASetProperSubsetBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetProperSubsetBinaryExpCG} node from {@link ASetProperSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetProperSubsetBinaryExpCG} node
	*/
	public A outASetProperSubsetBinaryExpCG(ASetProperSubsetBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AMapUnionBinaryExpCG} node from {@link AMapUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExpCG} node
	*/
	public A caseAMapUnionBinaryExpCG(AMapUnionBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapUnionBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAMapUnionBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapUnionBinaryExpCG} node from {@link AMapUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExpCG} node
	*/
	public A inAMapUnionBinaryExpCG(AMapUnionBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AMapUnionBinaryExpCG} node from {@link AMapUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExpCG} node
	*/
	public A outAMapUnionBinaryExpCG(AMapUnionBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AMapOverrideBinaryExpCG} node from {@link AMapOverrideBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapOverrideBinaryExpCG} node
	*/
	public A caseAMapOverrideBinaryExpCG(AMapOverrideBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapOverrideBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAMapOverrideBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapOverrideBinaryExpCG} node from {@link AMapOverrideBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapOverrideBinaryExpCG} node
	*/
	public A inAMapOverrideBinaryExpCG(AMapOverrideBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AMapOverrideBinaryExpCG} node from {@link AMapOverrideBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapOverrideBinaryExpCG} node
	*/
	public A outAMapOverrideBinaryExpCG(AMapOverrideBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADomainResToBinaryExpCG} node from {@link ADomainResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExpCG} node
	*/
	public A caseADomainResToBinaryExpCG(ADomainResToBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADomainResToBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outADomainResToBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADomainResToBinaryExpCG} node from {@link ADomainResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExpCG} node
	*/
	public A inADomainResToBinaryExpCG(ADomainResToBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADomainResToBinaryExpCG} node from {@link ADomainResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExpCG} node
	*/
	public A outADomainResToBinaryExpCG(ADomainResToBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADomainResByBinaryExpCG} node from {@link ADomainResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExpCG} node
	*/
	public A caseADomainResByBinaryExpCG(ADomainResByBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADomainResByBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outADomainResByBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADomainResByBinaryExpCG} node from {@link ADomainResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExpCG} node
	*/
	public A inADomainResByBinaryExpCG(ADomainResByBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADomainResByBinaryExpCG} node from {@link ADomainResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExpCG} node
	*/
	public A outADomainResByBinaryExpCG(ADomainResByBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARangeResToBinaryExpCG} node from {@link ARangeResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExpCG} node
	*/
	public A caseARangeResToBinaryExpCG(ARangeResToBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARangeResToBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outARangeResToBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARangeResToBinaryExpCG} node from {@link ARangeResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExpCG} node
	*/
	public A inARangeResToBinaryExpCG(ARangeResToBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARangeResToBinaryExpCG} node from {@link ARangeResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExpCG} node
	*/
	public A outARangeResToBinaryExpCG(ARangeResToBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARangeResByBinaryExpCG} node from {@link ARangeResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExpCG} node
	*/
	public A caseARangeResByBinaryExpCG(ARangeResByBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARangeResByBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outARangeResByBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARangeResByBinaryExpCG} node from {@link ARangeResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExpCG} node
	*/
	public A inARangeResByBinaryExpCG(ARangeResByBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARangeResByBinaryExpCG} node from {@link ARangeResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExpCG} node
	*/
	public A outARangeResByBinaryExpCG(ARangeResByBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AIntDivNumericBinaryExpCG} node from {@link AIntDivNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntDivNumericBinaryExpCG} node
	*/
	public A caseAIntDivNumericBinaryExpCG(AIntDivNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntDivNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAIntDivNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntDivNumericBinaryExpCG} node from {@link AIntDivNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntDivNumericBinaryExpCG} node
	*/
	public A inAIntDivNumericBinaryExpCG(AIntDivNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AIntDivNumericBinaryExpCG} node from {@link AIntDivNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntDivNumericBinaryExpCG} node
	*/
	public A outAIntDivNumericBinaryExpCG(AIntDivNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADivideNumericBinaryExpCG} node from {@link ADivideNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExpCG} node
	*/
	public A caseADivideNumericBinaryExpCG(ADivideNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADivideNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outADivideNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADivideNumericBinaryExpCG} node from {@link ADivideNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExpCG} node
	*/
	public A inADivideNumericBinaryExpCG(ADivideNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADivideNumericBinaryExpCG} node from {@link ADivideNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExpCG} node
	*/
	public A outADivideNumericBinaryExpCG(ADivideNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExpCG} node from {@link AGreaterEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExpCG} node
	*/
	public A caseAGreaterEqualNumericBinaryExpCG(AGreaterEqualNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAGreaterEqualNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAGreaterEqualNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExpCG} node from {@link AGreaterEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExpCG} node
	*/
	public A inAGreaterEqualNumericBinaryExpCG(AGreaterEqualNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExpCG} node from {@link AGreaterEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExpCG} node
	*/
	public A outAGreaterEqualNumericBinaryExpCG(AGreaterEqualNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExpCG} node from {@link AGreaterNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExpCG} node
	*/
	public A caseAGreaterNumericBinaryExpCG(AGreaterNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAGreaterNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAGreaterNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExpCG} node from {@link AGreaterNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExpCG} node
	*/
	public A inAGreaterNumericBinaryExpCG(AGreaterNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExpCG} node from {@link AGreaterNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExpCG} node
	*/
	public A outAGreaterNumericBinaryExpCG(AGreaterNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExpCG} node from {@link ALessEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExpCG} node
	*/
	public A caseALessEqualNumericBinaryExpCG(ALessEqualNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALessEqualNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outALessEqualNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExpCG} node from {@link ALessEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExpCG} node
	*/
	public A inALessEqualNumericBinaryExpCG(ALessEqualNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExpCG} node from {@link ALessEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExpCG} node
	*/
	public A outALessEqualNumericBinaryExpCG(ALessEqualNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ALessNumericBinaryExpCG} node from {@link ALessNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExpCG} node
	*/
	public A caseALessNumericBinaryExpCG(ALessNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALessNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outALessNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALessNumericBinaryExpCG} node from {@link ALessNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExpCG} node
	*/
	public A inALessNumericBinaryExpCG(ALessNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ALessNumericBinaryExpCG} node from {@link ALessNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExpCG} node
	*/
	public A outALessNumericBinaryExpCG(ALessNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AModNumericBinaryExpCG} node from {@link AModNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExpCG} node
	*/
	public A caseAModNumericBinaryExpCG(AModNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAModNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAModNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AModNumericBinaryExpCG} node from {@link AModNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExpCG} node
	*/
	public A inAModNumericBinaryExpCG(AModNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AModNumericBinaryExpCG} node from {@link AModNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExpCG} node
	*/
	public A outAModNumericBinaryExpCG(AModNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link APlusNumericBinaryExpCG} node from {@link APlusNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExpCG} node
	*/
	public A caseAPlusNumericBinaryExpCG(APlusNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPlusNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAPlusNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APlusNumericBinaryExpCG} node from {@link APlusNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExpCG} node
	*/
	public A inAPlusNumericBinaryExpCG(APlusNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link APlusNumericBinaryExpCG} node from {@link APlusNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExpCG} node
	*/
	public A outAPlusNumericBinaryExpCG(APlusNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExpCG} node from {@link ASubtractNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExpCG} node
	*/
	public A caseASubtractNumericBinaryExpCG(ASubtractNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASubtractNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASubtractNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExpCG} node from {@link ASubtractNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExpCG} node
	*/
	public A inASubtractNumericBinaryExpCG(ASubtractNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExpCG} node from {@link ASubtractNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExpCG} node
	*/
	public A outASubtractNumericBinaryExpCG(ASubtractNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARemNumericBinaryExpCG} node from {@link ARemNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExpCG} node
	*/
	public A caseARemNumericBinaryExpCG(ARemNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARemNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outARemNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARemNumericBinaryExpCG} node from {@link ARemNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExpCG} node
	*/
	public A inARemNumericBinaryExpCG(ARemNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARemNumericBinaryExpCG} node from {@link ARemNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExpCG} node
	*/
	public A outARemNumericBinaryExpCG(ARemNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ATimesNumericBinaryExpCG} node from {@link ATimesNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExpCG} node
	*/
	public A caseATimesNumericBinaryExpCG(ATimesNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATimesNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outATimesNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATimesNumericBinaryExpCG} node from {@link ATimesNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExpCG} node
	*/
	public A inATimesNumericBinaryExpCG(ATimesNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ATimesNumericBinaryExpCG} node from {@link ATimesNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExpCG} node
	*/
	public A outATimesNumericBinaryExpCG(ATimesNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link APowerNumericBinaryExpCG} node from {@link APowerNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerNumericBinaryExpCG} node
	*/
	public A caseAPowerNumericBinaryExpCG(APowerNumericBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPowerNumericBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAPowerNumericBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APowerNumericBinaryExpCG} node from {@link APowerNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerNumericBinaryExpCG} node
	*/
	public A inAPowerNumericBinaryExpCG(APowerNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultInSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link APowerNumericBinaryExpCG} node from {@link APowerNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerNumericBinaryExpCG} node
	*/
	public A outAPowerNumericBinaryExpCG(APowerNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AOrBoolBinaryExpCG} node from {@link AOrBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AOrBoolBinaryExpCG} node
	*/
	public A caseAOrBoolBinaryExpCG(AOrBoolBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAOrBoolBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAOrBoolBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AOrBoolBinaryExpCG} node from {@link AOrBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AOrBoolBinaryExpCG} node
	*/
	public A inAOrBoolBinaryExpCG(AOrBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link AOrBoolBinaryExpCG} node from {@link AOrBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AOrBoolBinaryExpCG} node
	*/
	public A outAOrBoolBinaryExpCG(AOrBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAndBoolBinaryExpCG} node from {@link AAndBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAndBoolBinaryExpCG} node
	*/
	public A caseAAndBoolBinaryExpCG(AAndBoolBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAndBoolBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAAndBoolBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAndBoolBinaryExpCG} node from {@link AAndBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAndBoolBinaryExpCG} node
	*/
	public A inAAndBoolBinaryExpCG(AAndBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAndBoolBinaryExpCG} node from {@link AAndBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAndBoolBinaryExpCG} node
	*/
	public A outAAndBoolBinaryExpCG(AAndBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link AXorBoolBinaryExpCG} node from {@link AXorBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AXorBoolBinaryExpCG} node
	*/
	public A caseAXorBoolBinaryExpCG(AXorBoolBinaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAXorBoolBinaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAXorBoolBinaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AXorBoolBinaryExpCG} node from {@link AXorBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AXorBoolBinaryExpCG} node
	*/
	public A inAXorBoolBinaryExpCG(AXorBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultInSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link AXorBoolBinaryExpCG} node from {@link AXorBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AXorBoolBinaryExpCG} node
	*/
	public A outAXorBoolBinaryExpCG(AXorBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultOutSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link APlusUnaryExpCG} node from {@link APlusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusUnaryExpCG} node
	*/
	public A caseAPlusUnaryExpCG(APlusUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPlusUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAPlusUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APlusUnaryExpCG} node from {@link APlusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusUnaryExpCG} node
	*/
	public A inAPlusUnaryExpCG(APlusUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link APlusUnaryExpCG} node from {@link APlusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusUnaryExpCG} node
	*/
	public A outAPlusUnaryExpCG(APlusUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMinusUnaryExpCG} node from {@link AMinusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnaryExpCG} node
	*/
	public A caseAMinusUnaryExpCG(AMinusUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMinusUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAMinusUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMinusUnaryExpCG} node from {@link AMinusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnaryExpCG} node
	*/
	public A inAMinusUnaryExpCG(AMinusUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMinusUnaryExpCG} node from {@link AMinusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnaryExpCG} node
	*/
	public A outAMinusUnaryExpCG(AMinusUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ACastUnaryExpCG} node from {@link ACastUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACastUnaryExpCG} node
	*/
	public A caseACastUnaryExpCG(ACastUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACastUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outACastUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACastUnaryExpCG} node from {@link ACastUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACastUnaryExpCG} node
	*/
	public A inACastUnaryExpCG(ACastUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ACastUnaryExpCG} node from {@link ACastUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACastUnaryExpCG} node
	*/
	public A outACastUnaryExpCG(ACastUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AIsolationUnaryExpCG} node from {@link AIsolationUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIsolationUnaryExpCG} node
	*/
	public A caseAIsolationUnaryExpCG(AIsolationUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIsolationUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAIsolationUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIsolationUnaryExpCG} node from {@link AIsolationUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIsolationUnaryExpCG} node
	*/
	public A inAIsolationUnaryExpCG(AIsolationUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AIsolationUnaryExpCG} node from {@link AIsolationUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIsolationUnaryExpCG} node
	*/
	public A outAIsolationUnaryExpCG(AIsolationUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ALenUnaryExpCG} node from {@link ALenUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExpCG} node
	*/
	public A caseALenUnaryExpCG(ALenUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALenUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outALenUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALenUnaryExpCG} node from {@link ALenUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExpCG} node
	*/
	public A inALenUnaryExpCG(ALenUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ALenUnaryExpCG} node from {@link ALenUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExpCG} node
	*/
	public A outALenUnaryExpCG(ALenUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ACardUnaryExpCG} node from {@link ACardUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACardUnaryExpCG} node
	*/
	public A caseACardUnaryExpCG(ACardUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACardUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outACardUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACardUnaryExpCG} node from {@link ACardUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACardUnaryExpCG} node
	*/
	public A inACardUnaryExpCG(ACardUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ACardUnaryExpCG} node from {@link ACardUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACardUnaryExpCG} node
	*/
	public A outACardUnaryExpCG(ACardUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AElemsUnaryExpCG} node from {@link AElemsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AElemsUnaryExpCG} node
	*/
	public A caseAElemsUnaryExpCG(AElemsUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAElemsUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAElemsUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AElemsUnaryExpCG} node from {@link AElemsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AElemsUnaryExpCG} node
	*/
	public A inAElemsUnaryExpCG(AElemsUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AElemsUnaryExpCG} node from {@link AElemsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AElemsUnaryExpCG} node
	*/
	public A outAElemsUnaryExpCG(AElemsUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AIndicesUnaryExpCG} node from {@link AIndicesUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExpCG} node
	*/
	public A caseAIndicesUnaryExpCG(AIndicesUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIndicesUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAIndicesUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIndicesUnaryExpCG} node from {@link AIndicesUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExpCG} node
	*/
	public A inAIndicesUnaryExpCG(AIndicesUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AIndicesUnaryExpCG} node from {@link AIndicesUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExpCG} node
	*/
	public A outAIndicesUnaryExpCG(AIndicesUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AHeadUnaryExpCG} node from {@link AHeadUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExpCG} node
	*/
	public A caseAHeadUnaryExpCG(AHeadUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAHeadUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAHeadUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AHeadUnaryExpCG} node from {@link AHeadUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExpCG} node
	*/
	public A inAHeadUnaryExpCG(AHeadUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AHeadUnaryExpCG} node from {@link AHeadUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExpCG} node
	*/
	public A outAHeadUnaryExpCG(AHeadUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ATailUnaryExpCG} node from {@link ATailUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExpCG} node
	*/
	public A caseATailUnaryExpCG(ATailUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATailUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outATailUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATailUnaryExpCG} node from {@link ATailUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExpCG} node
	*/
	public A inATailUnaryExpCG(ATailUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ATailUnaryExpCG} node from {@link ATailUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExpCG} node
	*/
	public A outATailUnaryExpCG(ATailUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AReverseUnaryExpCG} node from {@link AReverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExpCG} node
	*/
	public A caseAReverseUnaryExpCG(AReverseUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAReverseUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAReverseUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AReverseUnaryExpCG} node from {@link AReverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExpCG} node
	*/
	public A inAReverseUnaryExpCG(AReverseUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AReverseUnaryExpCG} node from {@link AReverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExpCG} node
	*/
	public A outAReverseUnaryExpCG(AReverseUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AFloorUnaryExpCG} node from {@link AFloorUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExpCG} node
	*/
	public A caseAFloorUnaryExpCG(AFloorUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFloorUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAFloorUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AFloorUnaryExpCG} node from {@link AFloorUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExpCG} node
	*/
	public A inAFloorUnaryExpCG(AFloorUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AFloorUnaryExpCG} node from {@link AFloorUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExpCG} node
	*/
	public A outAFloorUnaryExpCG(AFloorUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AAbsUnaryExpCG} node from {@link AAbsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnaryExpCG} node
	*/
	public A caseAAbsUnaryExpCG(AAbsUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAbsUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAAbsUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AAbsUnaryExpCG} node from {@link AAbsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnaryExpCG} node
	*/
	public A inAAbsUnaryExpCG(AAbsUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AAbsUnaryExpCG} node from {@link AAbsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnaryExpCG} node
	*/
	public A outAAbsUnaryExpCG(AAbsUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ANotUnaryExpCG} node from {@link ANotUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExpCG} node
	*/
	public A caseANotUnaryExpCG(ANotUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outANotUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotUnaryExpCG} node from {@link ANotUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExpCG} node
	*/
	public A inANotUnaryExpCG(ANotUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ANotUnaryExpCG} node from {@link ANotUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExpCG} node
	*/
	public A outANotUnaryExpCG(ANotUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistConcatUnaryExpCG} node from {@link ADistConcatUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExpCG} node
	*/
	public A caseADistConcatUnaryExpCG(ADistConcatUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistConcatUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistConcatUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistConcatUnaryExpCG} node from {@link ADistConcatUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExpCG} node
	*/
	public A inADistConcatUnaryExpCG(ADistConcatUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistConcatUnaryExpCG} node from {@link ADistConcatUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExpCG} node
	*/
	public A outADistConcatUnaryExpCG(ADistConcatUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistUnionUnaryExpCG} node from {@link ADistUnionUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExpCG} node
	*/
	public A caseADistUnionUnaryExpCG(ADistUnionUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistUnionUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistUnionUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistUnionUnaryExpCG} node from {@link ADistUnionUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExpCG} node
	*/
	public A inADistUnionUnaryExpCG(ADistUnionUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistUnionUnaryExpCG} node from {@link ADistUnionUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExpCG} node
	*/
	public A outADistUnionUnaryExpCG(ADistUnionUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistIntersectUnaryExpCG} node from {@link ADistIntersectUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExpCG} node
	*/
	public A caseADistIntersectUnaryExpCG(ADistIntersectUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistIntersectUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistIntersectUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistIntersectUnaryExpCG} node from {@link ADistIntersectUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExpCG} node
	*/
	public A inADistIntersectUnaryExpCG(ADistIntersectUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistIntersectUnaryExpCG} node from {@link ADistIntersectUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExpCG} node
	*/
	public A outADistIntersectUnaryExpCG(ADistIntersectUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link APowerSetUnaryExpCG} node from {@link APowerSetUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExpCG} node
	*/
	public A caseAPowerSetUnaryExpCG(APowerSetUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPowerSetUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAPowerSetUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link APowerSetUnaryExpCG} node from {@link APowerSetUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExpCG} node
	*/
	public A inAPowerSetUnaryExpCG(APowerSetUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link APowerSetUnaryExpCG} node from {@link APowerSetUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExpCG} node
	*/
	public A outAPowerSetUnaryExpCG(APowerSetUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapDomainUnaryExpCG} node from {@link AMapDomainUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExpCG} node
	*/
	public A caseAMapDomainUnaryExpCG(AMapDomainUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapDomainUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAMapDomainUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapDomainUnaryExpCG} node from {@link AMapDomainUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExpCG} node
	*/
	public A inAMapDomainUnaryExpCG(AMapDomainUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapDomainUnaryExpCG} node from {@link AMapDomainUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExpCG} node
	*/
	public A outAMapDomainUnaryExpCG(AMapDomainUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapRangeUnaryExpCG} node from {@link AMapRangeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExpCG} node
	*/
	public A caseAMapRangeUnaryExpCG(AMapRangeUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapRangeUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAMapRangeUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapRangeUnaryExpCG} node from {@link AMapRangeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExpCG} node
	*/
	public A inAMapRangeUnaryExpCG(AMapRangeUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapRangeUnaryExpCG} node from {@link AMapRangeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExpCG} node
	*/
	public A outAMapRangeUnaryExpCG(AMapRangeUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistMergeUnaryExpCG} node from {@link ADistMergeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExpCG} node
	*/
	public A caseADistMergeUnaryExpCG(ADistMergeUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistMergeUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistMergeUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistMergeUnaryExpCG} node from {@link ADistMergeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExpCG} node
	*/
	public A inADistMergeUnaryExpCG(ADistMergeUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistMergeUnaryExpCG} node from {@link ADistMergeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExpCG} node
	*/
	public A outADistMergeUnaryExpCG(ADistMergeUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapInverseUnaryExpCG} node from {@link AMapInverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExpCG} node
	*/
	public A caseAMapInverseUnaryExpCG(AMapInverseUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapInverseUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAMapInverseUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapInverseUnaryExpCG} node from {@link AMapInverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExpCG} node
	*/
	public A inAMapInverseUnaryExpCG(AMapInverseUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapInverseUnaryExpCG} node from {@link AMapInverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExpCG} node
	*/
	public A outAMapInverseUnaryExpCG(AMapInverseUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqToStringUnaryExpCG} node from {@link ASeqToStringUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqToStringUnaryExpCG} node
	*/
	public A caseASeqToStringUnaryExpCG(ASeqToStringUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqToStringUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outASeqToStringUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqToStringUnaryExpCG} node from {@link ASeqToStringUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqToStringUnaryExpCG} node
	*/
	public A inASeqToStringUnaryExpCG(ASeqToStringUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqToStringUnaryExpCG} node from {@link ASeqToStringUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqToStringUnaryExpCG} node
	*/
	public A outASeqToStringUnaryExpCG(ASeqToStringUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AStringToSeqUnaryExpCG} node from {@link AStringToSeqUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringToSeqUnaryExpCG} node
	*/
	public A caseAStringToSeqUnaryExpCG(AStringToSeqUnaryExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStringToSeqUnaryExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAStringToSeqUnaryExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AStringToSeqUnaryExpCG} node from {@link AStringToSeqUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringToSeqUnaryExpCG} node
	*/
	public A inAStringToSeqUnaryExpCG(AStringToSeqUnaryExpCG node) throws AnalysisException
	{
		return defaultInSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AStringToSeqUnaryExpCG} node from {@link AStringToSeqUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringToSeqUnaryExpCG} node
	*/
	public A outAStringToSeqUnaryExpCG(AStringToSeqUnaryExpCG node) throws AnalysisException
	{
		return defaultOutSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AEnumSeqExpCG} node from {@link AEnumSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSeqExpCG} node
	*/
	public A caseAEnumSeqExpCG(AEnumSeqExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAEnumSeqExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getMembers());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAEnumSeqExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AEnumSeqExpCG} node from {@link AEnumSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSeqExpCG} node
	*/
	public A inAEnumSeqExpCG(AEnumSeqExpCG node) throws AnalysisException
	{
		return defaultInSSeqExpCG(node);
	}


	/**
	* Called by the {@link AEnumSeqExpCG} node from {@link AEnumSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSeqExpCG} node
	*/
	public A outAEnumSeqExpCG(AEnumSeqExpCG node) throws AnalysisException
	{
		return defaultOutSSeqExpCG(node);
	}


	/**
	* Called by the {@link ACompSeqExpCG} node from {@link ACompSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSeqExpCG} node
	*/
	public A caseACompSeqExpCG(ACompSeqExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACompSeqExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		if(node.getSetBind() != null && !_visitedNodes.contains(node.getSetBind())) 
		{
			mergeReturns(retVal,node.getSetBind().apply(this));
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			mergeReturns(retVal,node.getSet().apply(this));
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outACompSeqExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACompSeqExpCG} node from {@link ACompSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSeqExpCG} node
	*/
	public A inACompSeqExpCG(ACompSeqExpCG node) throws AnalysisException
	{
		return defaultInSSeqExpCG(node);
	}


	/**
	* Called by the {@link ACompSeqExpCG} node from {@link ACompSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSeqExpCG} node
	*/
	public A outACompSeqExpCG(ACompSeqExpCG node) throws AnalysisException
	{
		return defaultOutSSeqExpCG(node);
	}


	/**
	* Called by the {@link AEnumSetExpCG} node from {@link AEnumSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSetExpCG} node
	*/
	public A caseAEnumSetExpCG(AEnumSetExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAEnumSetExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<SExpCG> copy = new ArrayList<SExpCG>(node.getMembers());
			for( SExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAEnumSetExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AEnumSetExpCG} node from {@link AEnumSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSetExpCG} node
	*/
	public A inAEnumSetExpCG(AEnumSetExpCG node) throws AnalysisException
	{
		return defaultInSSetExpCG(node);
	}


	/**
	* Called by the {@link AEnumSetExpCG} node from {@link AEnumSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSetExpCG} node
	*/
	public A outAEnumSetExpCG(AEnumSetExpCG node) throws AnalysisException
	{
		return defaultOutSSetExpCG(node);
	}


	/**
	* Called by the {@link ACompSetExpCG} node from {@link ACompSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSetExpCG} node
	*/
	public A caseACompSetExpCG(ACompSetExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACompSetExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindings());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outACompSetExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACompSetExpCG} node from {@link ACompSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSetExpCG} node
	*/
	public A inACompSetExpCG(ACompSetExpCG node) throws AnalysisException
	{
		return defaultInSSetExpCG(node);
	}


	/**
	* Called by the {@link ACompSetExpCG} node from {@link ACompSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSetExpCG} node
	*/
	public A outACompSetExpCG(ACompSetExpCG node) throws AnalysisException
	{
		return defaultOutSSetExpCG(node);
	}


	/**
	* Called by the {@link ARangeSetExpCG} node from {@link ARangeSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeSetExpCG} node
	*/
	public A caseARangeSetExpCG(ARangeSetExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARangeSetExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		if(node.getLast() != null && !_visitedNodes.contains(node.getLast())) 
		{
			mergeReturns(retVal,node.getLast().apply(this));
		}

		mergeReturns(retVal,outARangeSetExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARangeSetExpCG} node from {@link ARangeSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeSetExpCG} node
	*/
	public A inARangeSetExpCG(ARangeSetExpCG node) throws AnalysisException
	{
		return defaultInSSetExpCG(node);
	}


	/**
	* Called by the {@link ARangeSetExpCG} node from {@link ARangeSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeSetExpCG} node
	*/
	public A outARangeSetExpCG(ARangeSetExpCG node) throws AnalysisException
	{
		return defaultOutSSetExpCG(node);
	}


	/**
	* Called by the {@link AEnumMapExpCG} node from {@link AEnumMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumMapExpCG} node
	*/
	public A caseAEnumMapExpCG(AEnumMapExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAEnumMapExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AMapletExpCG> copy = new ArrayList<AMapletExpCG>(node.getMembers());
			for( AMapletExpCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAEnumMapExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AEnumMapExpCG} node from {@link AEnumMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumMapExpCG} node
	*/
	public A inAEnumMapExpCG(AEnumMapExpCG node) throws AnalysisException
	{
		return defaultInSMapExpCG(node);
	}


	/**
	* Called by the {@link AEnumMapExpCG} node from {@link AEnumMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumMapExpCG} node
	*/
	public A outAEnumMapExpCG(AEnumMapExpCG node) throws AnalysisException
	{
		return defaultOutSMapExpCG(node);
	}


	/**
	* Called by the {@link ACompMapExpCG} node from {@link ACompMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompMapExpCG} node
	*/
	public A caseACompMapExpCG(ACompMapExpCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACompMapExpCG(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		{
			List<ASetMultipleBindCG> copy = new ArrayList<ASetMultipleBindCG>(node.getBindings());
			for( ASetMultipleBindCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outACompMapExpCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACompMapExpCG} node from {@link ACompMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompMapExpCG} node
	*/
	public A inACompMapExpCG(ACompMapExpCG node) throws AnalysisException
	{
		return defaultInSMapExpCG(node);
	}


	/**
	* Called by the {@link ACompMapExpCG} node from {@link ACompMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompMapExpCG} node
	*/
	public A outACompMapExpCG(ACompMapExpCG node) throws AnalysisException
	{
		return defaultOutSMapExpCG(node);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public A defaultInSBasicTypeCG(SBasicTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public A defaultOutSBasicTypeCG(SBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public A defaultSBasicTypeCG(SBasicTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public A inSBasicTypeCG(SBasicTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public A outSBasicTypeCG(SBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AObjectTypeCG} node from {@link AObjectTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AObjectTypeCG} node
	*/
	public A caseAObjectTypeCG(AObjectTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAObjectTypeCG(node));


		mergeReturns(retVal,outAObjectTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AObjectTypeCG} node from {@link AObjectTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AObjectTypeCG} node
	*/
	public A inAObjectTypeCG(AObjectTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AObjectTypeCG} node from {@link AObjectTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AObjectTypeCG} node
	*/
	public A outAObjectTypeCG(AObjectTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AVoidTypeCG} node from {@link AVoidTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AVoidTypeCG} node
	*/
	public A caseAVoidTypeCG(AVoidTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAVoidTypeCG(node));


		mergeReturns(retVal,outAVoidTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AVoidTypeCG} node from {@link AVoidTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AVoidTypeCG} node
	*/
	public A inAVoidTypeCG(AVoidTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AVoidTypeCG} node from {@link AVoidTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AVoidTypeCG} node
	*/
	public A outAVoidTypeCG(AVoidTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AClassTypeCG} node from {@link AClassTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassTypeCG} node
	*/
	public A caseAClassTypeCG(AClassTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAClassTypeCG(node));

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAClassTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AClassTypeCG} node from {@link AClassTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassTypeCG} node
	*/
	public A inAClassTypeCG(AClassTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AClassTypeCG} node from {@link AClassTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassTypeCG} node
	*/
	public A outAClassTypeCG(AClassTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AExternalTypeCG} node from {@link AExternalTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalTypeCG} node
	*/
	public A caseAExternalTypeCG(AExternalTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExternalTypeCG(node));

		if(node.getInfo() != null && !_visitedNodes.contains(node.getInfo())) 
		{
			mergeReturns(retVal,node.getInfo().apply(this));
		}

		mergeReturns(retVal,outAExternalTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AExternalTypeCG} node from {@link AExternalTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalTypeCG} node
	*/
	public A inAExternalTypeCG(AExternalTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AExternalTypeCG} node from {@link AExternalTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalTypeCG} node
	*/
	public A outAExternalTypeCG(AExternalTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link ARecordTypeCG} node from {@link ARecordTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordTypeCG} node
	*/
	public A caseARecordTypeCG(ARecordTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordTypeCG(node));

		if(node.getName() != null && !_visitedNodes.contains(node.getName())) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outARecordTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordTypeCG} node from {@link ARecordTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordTypeCG} node
	*/
	public A inARecordTypeCG(ARecordTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link ARecordTypeCG} node from {@link ARecordTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordTypeCG} node
	*/
	public A outARecordTypeCG(ARecordTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AStringTypeCG} node from {@link AStringTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringTypeCG} node
	*/
	public A caseAStringTypeCG(AStringTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStringTypeCG(node));


		mergeReturns(retVal,outAStringTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AStringTypeCG} node from {@link AStringTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringTypeCG} node
	*/
	public A inAStringTypeCG(AStringTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AStringTypeCG} node from {@link AStringTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringTypeCG} node
	*/
	public A outAStringTypeCG(AStringTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link ATemplateTypeCG} node from {@link ATemplateTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATemplateTypeCG} node
	*/
	public A caseATemplateTypeCG(ATemplateTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATemplateTypeCG(node));


		mergeReturns(retVal,outATemplateTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATemplateTypeCG} node from {@link ATemplateTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATemplateTypeCG} node
	*/
	public A inATemplateTypeCG(ATemplateTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link ATemplateTypeCG} node from {@link ATemplateTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATemplateTypeCG} node
	*/
	public A outATemplateTypeCG(ATemplateTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link ATupleTypeCG} node from {@link ATupleTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleTypeCG} node
	*/
	public A caseATupleTypeCG(ATupleTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATupleTypeCG(node));

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATupleTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATupleTypeCG} node from {@link ATupleTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleTypeCG} node
	*/
	public A inATupleTypeCG(ATupleTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link ATupleTypeCG} node from {@link ATupleTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleTypeCG} node
	*/
	public A outATupleTypeCG(ATupleTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AMethodTypeCG} node from {@link AMethodTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodTypeCG} node
	*/
	public A caseAMethodTypeCG(AMethodTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMethodTypeCG(node));

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getParams());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}

		mergeReturns(retVal,outAMethodTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMethodTypeCG} node from {@link AMethodTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodTypeCG} node
	*/
	public A inAMethodTypeCG(AMethodTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AMethodTypeCG} node from {@link AMethodTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodTypeCG} node
	*/
	public A outAMethodTypeCG(AMethodTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public A defaultInSMapTypeCG(SMapTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public A defaultOutSMapTypeCG(SMapTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public A defaultSMapTypeCG(SMapTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public A inSMapTypeCG(SMapTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public A outSMapTypeCG(SMapTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public A defaultInSSetTypeCG(SSetTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public A defaultOutSSetTypeCG(SSetTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public A defaultSSetTypeCG(SSetTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public A inSSetTypeCG(SSetTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public A outSSetTypeCG(SSetTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public A defaultInSSeqTypeCG(SSeqTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public A defaultOutSSeqTypeCG(SSeqTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public A defaultSSeqTypeCG(SSeqTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public A inSSeqTypeCG(SSeqTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public A outSSeqTypeCG(SSeqTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public A defaultInSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public A defaultOutSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public A defaultSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public A inSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public A outSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AErrorTypeCG} node from {@link AErrorTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorTypeCG} node
	*/
	public A caseAErrorTypeCG(AErrorTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAErrorTypeCG(node));


		mergeReturns(retVal,outAErrorTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AErrorTypeCG} node from {@link AErrorTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorTypeCG} node
	*/
	public A inAErrorTypeCG(AErrorTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AErrorTypeCG} node from {@link AErrorTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorTypeCG} node
	*/
	public A outAErrorTypeCG(AErrorTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AInterfaceTypeCG} node from {@link AInterfaceTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceTypeCG} node
	*/
	public A caseAInterfaceTypeCG(AInterfaceTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInterfaceTypeCG(node));

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAInterfaceTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AInterfaceTypeCG} node from {@link AInterfaceTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceTypeCG} node
	*/
	public A inAInterfaceTypeCG(AInterfaceTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AInterfaceTypeCG} node from {@link AInterfaceTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceTypeCG} node
	*/
	public A outAInterfaceTypeCG(AInterfaceTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AUnionTypeCG} node from {@link AUnionTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnionTypeCG} node
	*/
	public A caseAUnionTypeCG(AUnionTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnionTypeCG(node));

		{
			List<STypeCG> copy = new ArrayList<STypeCG>(node.getTypes());
			for( STypeCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAUnionTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnionTypeCG} node from {@link AUnionTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnionTypeCG} node
	*/
	public A inAUnionTypeCG(AUnionTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AUnionTypeCG} node from {@link AUnionTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnionTypeCG} node
	*/
	public A outAUnionTypeCG(AUnionTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AQuoteTypeCG} node from {@link AQuoteTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteTypeCG} node
	*/
	public A caseAQuoteTypeCG(AQuoteTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAQuoteTypeCG(node));


		mergeReturns(retVal,outAQuoteTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AQuoteTypeCG} node from {@link AQuoteTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteTypeCG} node
	*/
	public A inAQuoteTypeCG(AQuoteTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AQuoteTypeCG} node from {@link AQuoteTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteTypeCG} node
	*/
	public A outAQuoteTypeCG(AQuoteTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link AUnknownTypeCG} node from {@link AUnknownTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownTypeCG} node
	*/
	public A caseAUnknownTypeCG(AUnknownTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnknownTypeCG(node));


		mergeReturns(retVal,outAUnknownTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnknownTypeCG} node from {@link AUnknownTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownTypeCG} node
	*/
	public A inAUnknownTypeCG(AUnknownTypeCG node) throws AnalysisException
	{
		return defaultInSTypeCG(node);
	}


	/**
	* Called by the {@link AUnknownTypeCG} node from {@link AUnknownTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownTypeCG} node
	*/
	public A outAUnknownTypeCG(AUnknownTypeCG node) throws AnalysisException
	{
		return defaultOutSTypeCG(node);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public A defaultInPExternalType(PExternalType node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public A defaultOutPExternalType(PExternalType node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public A defaultPExternalType(PExternalType node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public A inPExternalType(PExternalType node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public A outPExternalType(PExternalType node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AInfoExternalType} node from {@link AInfoExternalType#apply(IAnalysis)}.
	* @param node the calling {@link AInfoExternalType} node
	*/
	public A caseAInfoExternalType(AInfoExternalType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInfoExternalType(node));


		mergeReturns(retVal,outAInfoExternalType(node));
		return retVal;
	}


	/**
	* Called by the {@link AInfoExternalType} node from {@link AInfoExternalType#apply(IAnalysis)}.
	* @param node the calling {@link AInfoExternalType} node
	*/
	public A inAInfoExternalType(AInfoExternalType node) throws AnalysisException
	{
		return defaultInPExternalType(node);
	}


	/**
	* Called by the {@link AInfoExternalType} node from {@link AInfoExternalType#apply(IAnalysis)}.
	* @param node the calling {@link AInfoExternalType} node
	*/
	public A outAInfoExternalType(AInfoExternalType node) throws AnalysisException
	{
		return defaultOutPExternalType(node);
	}


	/**
	* Called by the {@link AIntBasicTypeWrappersTypeCG} node from {@link AIntBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntBasicTypeWrappersTypeCG} node
	*/
	public A caseAIntBasicTypeWrappersTypeCG(AIntBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntBasicTypeWrappersTypeCG(node));


		mergeReturns(retVal,outAIntBasicTypeWrappersTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntBasicTypeWrappersTypeCG} node from {@link AIntBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntBasicTypeWrappersTypeCG} node
	*/
	public A inAIntBasicTypeWrappersTypeCG(AIntBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link AIntBasicTypeWrappersTypeCG} node from {@link AIntBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntBasicTypeWrappersTypeCG} node
	*/
	public A outAIntBasicTypeWrappersTypeCG(AIntBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ANat1BasicTypeWrappersTypeCG} node from {@link ANat1BasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1BasicTypeWrappersTypeCG} node
	*/
	public A caseANat1BasicTypeWrappersTypeCG(ANat1BasicTypeWrappersTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANat1BasicTypeWrappersTypeCG(node));


		mergeReturns(retVal,outANat1BasicTypeWrappersTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANat1BasicTypeWrappersTypeCG} node from {@link ANat1BasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1BasicTypeWrappersTypeCG} node
	*/
	public A inANat1BasicTypeWrappersTypeCG(ANat1BasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ANat1BasicTypeWrappersTypeCG} node from {@link ANat1BasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1BasicTypeWrappersTypeCG} node
	*/
	public A outANat1BasicTypeWrappersTypeCG(ANat1BasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ANatBasicTypeWrappersTypeCG} node from {@link ANatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatBasicTypeWrappersTypeCG} node
	*/
	public A caseANatBasicTypeWrappersTypeCG(ANatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANatBasicTypeWrappersTypeCG(node));


		mergeReturns(retVal,outANatBasicTypeWrappersTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANatBasicTypeWrappersTypeCG} node from {@link ANatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatBasicTypeWrappersTypeCG} node
	*/
	public A inANatBasicTypeWrappersTypeCG(ANatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ANatBasicTypeWrappersTypeCG} node from {@link ANatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatBasicTypeWrappersTypeCG} node
	*/
	public A outANatBasicTypeWrappersTypeCG(ANatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ARatBasicTypeWrappersTypeCG} node from {@link ARatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatBasicTypeWrappersTypeCG} node
	*/
	public A caseARatBasicTypeWrappersTypeCG(ARatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARatBasicTypeWrappersTypeCG(node));


		mergeReturns(retVal,outARatBasicTypeWrappersTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARatBasicTypeWrappersTypeCG} node from {@link ARatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatBasicTypeWrappersTypeCG} node
	*/
	public A inARatBasicTypeWrappersTypeCG(ARatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ARatBasicTypeWrappersTypeCG} node from {@link ARatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatBasicTypeWrappersTypeCG} node
	*/
	public A outARatBasicTypeWrappersTypeCG(ARatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ARealBasicTypeWrappersTypeCG} node from {@link ARealBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealBasicTypeWrappersTypeCG} node
	*/
	public A caseARealBasicTypeWrappersTypeCG(ARealBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealBasicTypeWrappersTypeCG(node));


		mergeReturns(retVal,outARealBasicTypeWrappersTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealBasicTypeWrappersTypeCG} node from {@link ARealBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealBasicTypeWrappersTypeCG} node
	*/
	public A inARealBasicTypeWrappersTypeCG(ARealBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ARealBasicTypeWrappersTypeCG} node from {@link ARealBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealBasicTypeWrappersTypeCG} node
	*/
	public A outARealBasicTypeWrappersTypeCG(ARealBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ACharBasicTypeWrappersTypeCG} node from {@link ACharBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeWrappersTypeCG} node
	*/
	public A caseACharBasicTypeWrappersTypeCG(ACharBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharBasicTypeWrappersTypeCG(node));


		mergeReturns(retVal,outACharBasicTypeWrappersTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharBasicTypeWrappersTypeCG} node from {@link ACharBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeWrappersTypeCG} node
	*/
	public A inACharBasicTypeWrappersTypeCG(ACharBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ACharBasicTypeWrappersTypeCG} node from {@link ACharBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeWrappersTypeCG} node
	*/
	public A outACharBasicTypeWrappersTypeCG(ACharBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ABoolBasicTypeWrappersTypeCG} node from {@link ABoolBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeWrappersTypeCG} node
	*/
	public A caseABoolBasicTypeWrappersTypeCG(ABoolBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABoolBasicTypeWrappersTypeCG(node));


		mergeReturns(retVal,outABoolBasicTypeWrappersTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABoolBasicTypeWrappersTypeCG} node from {@link ABoolBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeWrappersTypeCG} node
	*/
	public A inABoolBasicTypeWrappersTypeCG(ABoolBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ABoolBasicTypeWrappersTypeCG} node from {@link ABoolBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeWrappersTypeCG} node
	*/
	public A outABoolBasicTypeWrappersTypeCG(ABoolBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ASetSetTypeCG} node from {@link ASetSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSetTypeCG} node
	*/
	public A caseASetSetTypeCG(ASetSetTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetSetTypeCG(node));

		if(node.getSetOf() != null && !_visitedNodes.contains(node.getSetOf())) 
		{
			mergeReturns(retVal,node.getSetOf().apply(this));
		}

		mergeReturns(retVal,outASetSetTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetSetTypeCG} node from {@link ASetSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSetTypeCG} node
	*/
	public A inASetSetTypeCG(ASetSetTypeCG node) throws AnalysisException
	{
		return defaultInSSetTypeCG(node);
	}


	/**
	* Called by the {@link ASetSetTypeCG} node from {@link ASetSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSetTypeCG} node
	*/
	public A outASetSetTypeCG(ASetSetTypeCG node) throws AnalysisException
	{
		return defaultOutSSetTypeCG(node);
	}


	/**
	* Called by the {@link ASeqSeqTypeCG} node from {@link ASeqSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqTypeCG} node
	*/
	public A caseASeqSeqTypeCG(ASeqSeqTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqSeqTypeCG(node));

		if(node.getSeqOf() != null && !_visitedNodes.contains(node.getSeqOf())) 
		{
			mergeReturns(retVal,node.getSeqOf().apply(this));
		}

		mergeReturns(retVal,outASeqSeqTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqSeqTypeCG} node from {@link ASeqSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqTypeCG} node
	*/
	public A inASeqSeqTypeCG(ASeqSeqTypeCG node) throws AnalysisException
	{
		return defaultInSSeqTypeCG(node);
	}


	/**
	* Called by the {@link ASeqSeqTypeCG} node from {@link ASeqSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqTypeCG} node
	*/
	public A outASeqSeqTypeCG(ASeqSeqTypeCG node) throws AnalysisException
	{
		return defaultOutSSeqTypeCG(node);
	}


	/**
	* Called by the {@link AMapMapTypeCG} node from {@link AMapMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapTypeCG} node
	*/
	public A caseAMapMapTypeCG(AMapMapTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapMapTypeCG(node));

		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}

		mergeReturns(retVal,outAMapMapTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapMapTypeCG} node from {@link AMapMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapTypeCG} node
	*/
	public A inAMapMapTypeCG(AMapMapTypeCG node) throws AnalysisException
	{
		return defaultInSMapTypeCG(node);
	}


	/**
	* Called by the {@link AMapMapTypeCG} node from {@link AMapMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapTypeCG} node
	*/
	public A outAMapMapTypeCG(AMapMapTypeCG node) throws AnalysisException
	{
		return defaultOutSMapTypeCG(node);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public A defaultInSNumericBasicTypeCG(SNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeCG(node);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public A defaultOutSNumericBasicTypeCG(SNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeCG(node);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public A defaultSNumericBasicTypeCG(SNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeCG(node);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public A inSNumericBasicTypeCG(SNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeCG(node);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public A outSNumericBasicTypeCG(SNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ACharBasicTypeCG} node from {@link ACharBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeCG} node
	*/
	public A caseACharBasicTypeCG(ACharBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharBasicTypeCG(node));


		mergeReturns(retVal,outACharBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharBasicTypeCG} node from {@link ACharBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeCG} node
	*/
	public A inACharBasicTypeCG(ACharBasicTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ACharBasicTypeCG} node from {@link ACharBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeCG} node
	*/
	public A outACharBasicTypeCG(ACharBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ABoolBasicTypeCG} node from {@link ABoolBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeCG} node
	*/
	public A caseABoolBasicTypeCG(ABoolBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABoolBasicTypeCG(node));


		mergeReturns(retVal,outABoolBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABoolBasicTypeCG} node from {@link ABoolBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeCG} node
	*/
	public A inABoolBasicTypeCG(ABoolBasicTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ABoolBasicTypeCG} node from {@link ABoolBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeCG} node
	*/
	public A outABoolBasicTypeCG(ABoolBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ATokenBasicTypeCG} node from {@link ATokenBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicTypeCG} node
	*/
	public A caseATokenBasicTypeCG(ATokenBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATokenBasicTypeCG(node));


		mergeReturns(retVal,outATokenBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATokenBasicTypeCG} node from {@link ATokenBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicTypeCG} node
	*/
	public A inATokenBasicTypeCG(ATokenBasicTypeCG node) throws AnalysisException
	{
		return defaultInSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ATokenBasicTypeCG} node from {@link ATokenBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicTypeCG} node
	*/
	public A outATokenBasicTypeCG(ATokenBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSBasicTypeCG(node);
	}


	/**
	* Called by the {@link AIntNumericBasicTypeCG} node from {@link AIntNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicTypeCG} node
	*/
	public A caseAIntNumericBasicTypeCG(AIntNumericBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntNumericBasicTypeCG(node));


		mergeReturns(retVal,outAIntNumericBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntNumericBasicTypeCG} node from {@link AIntNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicTypeCG} node
	*/
	public A inAIntNumericBasicTypeCG(AIntNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultInSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link AIntNumericBasicTypeCG} node from {@link AIntNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicTypeCG} node
	*/
	public A outAIntNumericBasicTypeCG(AIntNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ANat1NumericBasicTypeCG} node from {@link ANat1NumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1NumericBasicTypeCG} node
	*/
	public A caseANat1NumericBasicTypeCG(ANat1NumericBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANat1NumericBasicTypeCG(node));


		mergeReturns(retVal,outANat1NumericBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANat1NumericBasicTypeCG} node from {@link ANat1NumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1NumericBasicTypeCG} node
	*/
	public A inANat1NumericBasicTypeCG(ANat1NumericBasicTypeCG node) throws AnalysisException
	{
		return defaultInSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ANat1NumericBasicTypeCG} node from {@link ANat1NumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1NumericBasicTypeCG} node
	*/
	public A outANat1NumericBasicTypeCG(ANat1NumericBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ANatNumericBasicTypeCG} node from {@link ANatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicTypeCG} node
	*/
	public A caseANatNumericBasicTypeCG(ANatNumericBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANatNumericBasicTypeCG(node));


		mergeReturns(retVal,outANatNumericBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ANatNumericBasicTypeCG} node from {@link ANatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicTypeCG} node
	*/
	public A inANatNumericBasicTypeCG(ANatNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultInSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ANatNumericBasicTypeCG} node from {@link ANatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicTypeCG} node
	*/
	public A outANatNumericBasicTypeCG(ANatNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ARatNumericBasicTypeCG} node from {@link ARatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatNumericBasicTypeCG} node
	*/
	public A caseARatNumericBasicTypeCG(ARatNumericBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARatNumericBasicTypeCG(node));


		mergeReturns(retVal,outARatNumericBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARatNumericBasicTypeCG} node from {@link ARatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatNumericBasicTypeCG} node
	*/
	public A inARatNumericBasicTypeCG(ARatNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultInSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ARatNumericBasicTypeCG} node from {@link ARatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatNumericBasicTypeCG} node
	*/
	public A outARatNumericBasicTypeCG(ARatNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ARealNumericBasicTypeCG} node from {@link ARealNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicTypeCG} node
	*/
	public A caseARealNumericBasicTypeCG(ARealNumericBasicTypeCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealNumericBasicTypeCG(node));


		mergeReturns(retVal,outARealNumericBasicTypeCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealNumericBasicTypeCG} node from {@link ARealNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicTypeCG} node
	*/
	public A inARealNumericBasicTypeCG(ARealNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultInSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ARealNumericBasicTypeCG} node from {@link ARealNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicTypeCG} node
	*/
	public A outARealNumericBasicTypeCG(ARealNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultOutSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ATraceDeclTermCG} node from {@link ATraceDeclTermCG#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDeclTermCG} node
	*/
	public A caseATraceDeclTermCG(ATraceDeclTermCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATraceDeclTermCG(node));

		{
			List<STraceDeclCG> copy = new ArrayList<STraceDeclCG>(node.getTraceDecls());
			for( STraceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATraceDeclTermCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ATraceDeclTermCG} node from {@link ATraceDeclTermCG#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDeclTermCG} node
	*/
	public A inATraceDeclTermCG(ATraceDeclTermCG node) throws AnalysisException
	{
		return defaultInSTermCG(node);
	}


	/**
	* Called by the {@link ATraceDeclTermCG} node from {@link ATraceDeclTermCG#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDeclTermCG} node
	*/
	public A outATraceDeclTermCG(ATraceDeclTermCG node) throws AnalysisException
	{
		return defaultOutSTermCG(node);
	}


	/**
	* Called by the {@link AInstanceTraceDeclCG} node from {@link AInstanceTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDeclCG} node
	*/
	public A caseAInstanceTraceDeclCG(AInstanceTraceDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInstanceTraceDeclCG(node));


		mergeReturns(retVal,outAInstanceTraceDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AInstanceTraceDeclCG} node from {@link AInstanceTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDeclCG} node
	*/
	public A inAInstanceTraceDeclCG(AInstanceTraceDeclCG node) throws AnalysisException
	{
		return defaultInSTraceDeclCG(node);
	}


	/**
	* Called by the {@link AInstanceTraceDeclCG} node from {@link AInstanceTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDeclCG} node
	*/
	public A outAInstanceTraceDeclCG(AInstanceTraceDeclCG node) throws AnalysisException
	{
		return defaultOutSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDeclCG} node from {@link ALetBeStBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDeclCG} node
	*/
	public A caseALetBeStBindingTraceDeclCG(ALetBeStBindingTraceDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetBeStBindingTraceDeclCG(node));

		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			mergeReturns(retVal,node.getBind().apply(this));
		}
		if(node.getStExp() != null && !_visitedNodes.contains(node.getStExp())) 
		{
			mergeReturns(retVal,node.getStExp().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outALetBeStBindingTraceDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDeclCG} node from {@link ALetBeStBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDeclCG} node
	*/
	public A inALetBeStBindingTraceDeclCG(ALetBeStBindingTraceDeclCG node) throws AnalysisException
	{
		return defaultInSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDeclCG} node from {@link ALetBeStBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDeclCG} node
	*/
	public A outALetBeStBindingTraceDeclCG(ALetBeStBindingTraceDeclCG node) throws AnalysisException
	{
		return defaultOutSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ALetDefBindingTraceDeclCG} node from {@link ALetDefBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDeclCG} node
	*/
	public A caseALetDefBindingTraceDeclCG(ALetDefBindingTraceDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetDefBindingTraceDeclCG(node));

		{
			List<SDeclCG> copy = new ArrayList<SDeclCG>(node.getLocalDecls());
			for( SDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outALetDefBindingTraceDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetDefBindingTraceDeclCG} node from {@link ALetDefBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDeclCG} node
	*/
	public A inALetDefBindingTraceDeclCG(ALetDefBindingTraceDeclCG node) throws AnalysisException
	{
		return defaultInSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ALetDefBindingTraceDeclCG} node from {@link ALetDefBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDeclCG} node
	*/
	public A outALetDefBindingTraceDeclCG(ALetDefBindingTraceDeclCG node) throws AnalysisException
	{
		return defaultOutSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ARepeatTraceDeclCG} node from {@link ARepeatTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDeclCG} node
	*/
	public A caseARepeatTraceDeclCG(ARepeatTraceDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARepeatTraceDeclCG(node));

		if(node.getCore() != null && !_visitedNodes.contains(node.getCore())) 
		{
			mergeReturns(retVal,node.getCore().apply(this));
		}

		mergeReturns(retVal,outARepeatTraceDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ARepeatTraceDeclCG} node from {@link ARepeatTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDeclCG} node
	*/
	public A inARepeatTraceDeclCG(ARepeatTraceDeclCG node) throws AnalysisException
	{
		return defaultInSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ARepeatTraceDeclCG} node from {@link ARepeatTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDeclCG} node
	*/
	public A outARepeatTraceDeclCG(ARepeatTraceDeclCG node) throws AnalysisException
	{
		return defaultOutSTraceDeclCG(node);
	}


	/**
	* Called by the {@link AApplyExpTraceCoreDeclCG} node from {@link AApplyExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpTraceCoreDeclCG} node
	*/
	public A caseAApplyExpTraceCoreDeclCG(AApplyExpTraceCoreDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAApplyExpTraceCoreDeclCG(node));

		if(node.getCallStm() != null && !_visitedNodes.contains(node.getCallStm())) 
		{
			mergeReturns(retVal,node.getCallStm().apply(this));
		}

		mergeReturns(retVal,outAApplyExpTraceCoreDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AApplyExpTraceCoreDeclCG} node from {@link AApplyExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpTraceCoreDeclCG} node
	*/
	public A inAApplyExpTraceCoreDeclCG(AApplyExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultInSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link AApplyExpTraceCoreDeclCG} node from {@link AApplyExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpTraceCoreDeclCG} node
	*/
	public A outAApplyExpTraceCoreDeclCG(AApplyExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultOutSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link ABracketedExpTraceCoreDeclCG} node from {@link ABracketedExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpTraceCoreDeclCG} node
	*/
	public A caseABracketedExpTraceCoreDeclCG(ABracketedExpTraceCoreDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABracketedExpTraceCoreDeclCG(node));

		{
			List<ATraceDeclTermCG> copy = new ArrayList<ATraceDeclTermCG>(node.getTerms());
			for( ATraceDeclTermCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outABracketedExpTraceCoreDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link ABracketedExpTraceCoreDeclCG} node from {@link ABracketedExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpTraceCoreDeclCG} node
	*/
	public A inABracketedExpTraceCoreDeclCG(ABracketedExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultInSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link ABracketedExpTraceCoreDeclCG} node from {@link ABracketedExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpTraceCoreDeclCG} node
	*/
	public A outABracketedExpTraceCoreDeclCG(ABracketedExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultOutSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link AConcurrentExpTraceCoreDeclCG} node from {@link AConcurrentExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpTraceCoreDeclCG} node
	*/
	public A caseAConcurrentExpTraceCoreDeclCG(AConcurrentExpTraceCoreDeclCG node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAConcurrentExpTraceCoreDeclCG(node));

		{
			List<STraceDeclCG> copy = new ArrayList<STraceDeclCG>(node.getDecls());
			for( STraceDeclCG e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAConcurrentExpTraceCoreDeclCG(node));
		return retVal;
	}


	/**
	* Called by the {@link AConcurrentExpTraceCoreDeclCG} node from {@link AConcurrentExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpTraceCoreDeclCG} node
	*/
	public A inAConcurrentExpTraceCoreDeclCG(AConcurrentExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultInSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link AConcurrentExpTraceCoreDeclCG} node from {@link AConcurrentExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpTraceCoreDeclCG} node
	*/
	public A outAConcurrentExpTraceCoreDeclCG(AConcurrentExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultOutSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public A defaultOutINode(INode node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public A defaultInINode(INode node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public A defaultINode(INode node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A defaultOutIToken(IToken node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A defaultInIToken(IToken node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A defaultIToken(IToken node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}



	public abstract A mergeReturns(A original, A new_);


	public abstract A createNewReturnValue(INode node) throws AnalysisException;


	public abstract A createNewReturnValue(Object node) throws AnalysisException;


}
