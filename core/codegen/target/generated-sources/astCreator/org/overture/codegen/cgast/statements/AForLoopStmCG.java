/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.statements;


import org.overture.codegen.cgast.analysis.intf.IQuestion;
import org.overture.codegen.cgast.statements.AForLoopStmCG;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.analysis.intf.IQuestionAnswer;
import org.overture.codegen.cgast.SStmCGBase;
import org.overture.codegen.cgast.declarations.AVarDeclCG;
import org.overture.codegen.cgast.INode;
import java.util.HashMap;
import org.overture.codegen.cgast.SExpCG;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import java.util.Map;
import java.lang.Boolean;
import org.overture.codegen.cgast.SStmCG;
import java.lang.Object;
import java.lang.String;
import org.overture.codegen.ir.SourceNode;
import org.overture.codegen.cgast.analysis.intf.IAnswer;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AForLoopStmCG extends SStmCGBase
{
	private static final long serialVersionUID = 1L;

	private AVarDeclCG _init;
	private SExpCG _cond;
	private SExpCG _inc;
	private SStmCG _body;

	/**
	* Creates a new {@code AForLoopStmCG TAG=forLoop} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param init_ the {@link AVarDeclCG} node for the {@code init} child of this {@link AForLoopStmCG} node
	* @param cond_ the {@link SExpCG} node for the {@code cond} child of this {@link AForLoopStmCG} node
	* @param inc_ the {@link SExpCG} node for the {@code inc} child of this {@link AForLoopStmCG} node
	* @param body_ the {@link SStmCG} node for the {@code body} child of this {@link AForLoopStmCG} node
	*/
	public AForLoopStmCG(SourceNode sourceNode_, AVarDeclCG init_, SExpCG cond_, SExpCG inc_, SStmCG body_)
	{
		super(sourceNode_,null);
		this.setInit(init_);
		this.setCond(cond_);
		this.setInc(inc_);
		this.setBody(body_);

	}


	/**
	 * Creates a new {@link AForLoopStmCG} node with no children.
	 */
	public AForLoopStmCG()
	{

	}


	/**
	* Creates a new {@code AForLoopStmCG} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param init_ the {@link AVarDeclCG} node for the {@code init} child of this {@link AForLoopStmCG} node
	* @param cond_ the {@link SExpCG} node for the {@code cond} child of this {@link AForLoopStmCG} node
	* @param inc_ the {@link SExpCG} node for the {@code inc} child of this {@link AForLoopStmCG} node
	* @param body_ the {@link SStmCG} node for the {@code body} child of this {@link AForLoopStmCG} node
	*/
	public AForLoopStmCG(SourceNode sourceNode_, Object tag_, AVarDeclCG init_, SExpCG cond_, SExpCG inc_, SStmCG body_)
	{
		super(sourceNode_,tag_);
		this.setInit(init_);
		this.setCond(cond_);
		this.setInc(inc_);
		this.setBody(body_);

	}



	public String toString()
	{
		return (_init!=null?_init.toString():this.getClass().getSimpleName())+ (_cond!=null?_cond.toString():this.getClass().getSimpleName())+ (_inc!=null?_inc.toString():this.getClass().getSimpleName())+ (_body!=null?_body.toString():this.getClass().getSimpleName());
	}


	/**
	 * Creates a deep clone of this {@link AForLoopStmCG} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AForLoopStmCG} node
	 */
	public AForLoopStmCG clone(Map<INode,INode> oldToNewMap)
	{
		AForLoopStmCG node = new AForLoopStmCG(
			_sourceNode,
			_tag,
			cloneNode(_init, oldToNewMap),
			cloneNode(_cond, oldToNewMap),
			cloneNode(_inc, oldToNewMap),
			cloneNode(_body, oldToNewMap)
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AForLoopStmCG)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_init",this._init);
		fields.put("_cond",this._cond);
		fields.put("_inc",this._inc);
		fields.put("_body",this._body);
		return fields;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Returns a deep clone of this {@link AForLoopStmCG} node.
	 * @return a deep clone of this {@link AForLoopStmCG} node
	 */
	public AForLoopStmCG clone()
	{
		return new AForLoopStmCG(
			_sourceNode,
			_tag,
			cloneNode(_init),
			cloneNode(_cond),
			cloneNode(_inc),
			cloneNode(_body)
		);
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AForLoopStmCG} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AForLoopStmCG} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AForLoopStmCG} node
	 */
	public void removeChild(INode child)
	{
		if (this._init == child) {
			this._init = null;
			return;
		}

		if (this._cond == child) {
			this._cond = null;
			return;
		}

		if (this._inc == child) {
			this._inc = null;
			return;
		}

		if (this._body == child) {
			this._body = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Sets the {@code _init} child of this {@link AForLoopStmCG} node.
	 * @param value the new {@code _init} child of this {@link AForLoopStmCG} node
	*/
	public void setInit(AVarDeclCG value)
	{
		if (this._init != null) {
			this._init.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._init = value;

	}


	/**
	 * @return the {@link AVarDeclCG} node which is the {@code _init} child of this {@link AForLoopStmCG} node
	*/
	public AVarDeclCG getInit()
	{
		return this._init;
	}


	/**
	 * Sets the {@code _cond} child of this {@link AForLoopStmCG} node.
	 * @param value the new {@code _cond} child of this {@link AForLoopStmCG} node
	*/
	public void setCond(SExpCG value)
	{
		if (this._cond != null) {
			this._cond.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._cond = value;

	}


	/**
	 * @return the {@link SExpCG} node which is the {@code _cond} child of this {@link AForLoopStmCG} node
	*/
	public SExpCG getCond()
	{
		return this._cond;
	}


	/**
	 * Sets the {@code _inc} child of this {@link AForLoopStmCG} node.
	 * @param value the new {@code _inc} child of this {@link AForLoopStmCG} node
	*/
	public void setInc(SExpCG value)
	{
		if (this._inc != null) {
			this._inc.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._inc = value;

	}


	/**
	 * @return the {@link SExpCG} node which is the {@code _inc} child of this {@link AForLoopStmCG} node
	*/
	public SExpCG getInc()
	{
		return this._inc;
	}


	/**
	 * Sets the {@code _body} child of this {@link AForLoopStmCG} node.
	 * @param value the new {@code _body} child of this {@link AForLoopStmCG} node
	*/
	public void setBody(SStmCG value)
	{
		if (this._body != null) {
			this._body.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._body = value;

	}


	/**
	 * @return the {@link SStmCG} node which is the {@code _body} child of this {@link AForLoopStmCG} node
	*/
	public SStmCG getBody()
	{
		return this._body;
	}


	/**
	* Calls the {@link IAnalysis#caseAForLoopStmCG(AForLoopStmCG)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AForLoopStmCG} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis) throws AnalysisException
	{
		analysis.caseAForLoopStmCG(this);
	}


	/**
	* Calls the {@link IAnswer#caseAForLoopStmCG(AForLoopStmCG)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AForLoopStmCG} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAForLoopStmCG(this);
	}


	/**
	* Calls the {@link IQuestion#caseAForLoopStmCG(AForLoopStmCG)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AForLoopStmCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAForLoopStmCG(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAForLoopStmCG(AForLoopStmCG)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AForLoopStmCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAForLoopStmCG(this,question);
	}



}
