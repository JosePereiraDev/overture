/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.analysis;


import org.overture.codegen.cgast.types.AObjectTypeCG;
import org.overture.codegen.cgast.expressions.ASubtractNumericBinaryExpCG;
import org.overture.codegen.cgast.patterns.ARecordPatternCG;
import org.overture.codegen.cgast.expressions.AIsolationUnaryExpCG;
import org.overture.codegen.cgast.expressions.ANullExpCG;
import org.overture.codegen.cgast.expressions.ARealIsExpCG;
import org.overture.codegen.cgast.STraceCoreDeclCG;
import org.overture.codegen.cgast.types.ACharBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AForAllQuantifierExpCG;
import java.lang.Integer;
import org.overture.codegen.cgast.types.AErrorTypeCG;
import org.overture.codegen.cgast.expressions.ABoolLiteralExpCG;
import org.overture.codegen.cgast.statements.AAssignmentStmCG;
import org.overture.codegen.cgast.statements.ALocalAssignmentStmCG;
import java.lang.Long;
import org.overture.codegen.cgast.types.SBasicTypeCG;
import org.overture.codegen.cgast.patterns.ARealPatternCG;
import org.overture.codegen.cgast.traces.ABracketedExpTraceCoreDeclCG;
import org.overture.codegen.cgast.expressions.AAssignExpExpCG;
import org.overture.codegen.cgast.expressions.AMapOverrideBinaryExpCG;
import org.overture.codegen.cgast.statements.ACasesStmCG;
import org.overture.codegen.cgast.types.AStringTypeCG;
import org.overture.codegen.cgast.statements.AForLoopStmCG;
import org.overture.codegen.cgast.expressions.ADeRefExpCG;
import org.overture.codegen.cgast.expressions.ASetUnionBinaryExpCG;
import org.overture.codegen.cgast.expressions.ALetBeStNoBindingRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.AAndBoolBinaryExpCG;
import org.overture.codegen.cgast.expressions.AIntDivNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ADistIntersectUnaryExpCG;
import org.overture.codegen.cgast.traces.AConcurrentExpTraceCoreDeclCG;
import org.overture.codegen.cgast.statements.ASuperCallStmCG;
import org.overture.codegen.cgast.expressions.AStringLiteralExpCG;
import org.overture.codegen.cgast.expressions.ATypeArgExpCG;
import org.overture.codegen.cgast.expressions.ALessNumericBinaryExpCG;
import org.overture.codegen.cgast.declarations.ATypeDeclCG;
import org.overture.codegen.cgast.types.ARatNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.AAbsUnaryExpCG;
import org.overture.codegen.cgast.expressions.AFieldExpCG;
import org.overture.codegen.cgast.expressions.ARecordModExpCG;
import org.overture.codegen.cgast.types.ARealNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.ATupleIsExpCG;
import org.overture.codegen.cgast.expressions.AInSetBinaryExpCG;
import org.overture.codegen.cgast.SObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AModNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.AIfStmCG;
import org.overture.codegen.cgast.types.ABoolBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.types.ACharBasicTypeCG;
import org.overture.codegen.cgast.expressions.APreDecExpCG;
import org.overture.codegen.cgast.statements.APlainCallStmCG;
import org.overture.codegen.cgast.expressions.AGreaterEqualNumericBinaryExpCG;
import org.overture.codegen.cgast.types.SSeqTypeCG;
import org.overture.codegen.cgast.expressions.ASelfExpCG;
import org.overture.codegen.cgast.expressions.APowerSetUnaryExpCG;
import org.overture.codegen.cgast.expressions.ANotImplementedExpCG;
import org.overture.codegen.cgast.expressions.ADomainResByBinaryExpCG;
import org.overture.codegen.cgast.patterns.ACharPatternCG;
import org.overture.codegen.cgast.types.AInterfaceTypeCG;
import org.overture.codegen.cgast.expressions.SAltExpExpCG;
import org.overture.codegen.cgast.statements.ACallObjectStmCG;
import org.overture.codegen.cgast.statements.AFieldStateDesignatorCG;
import org.overture.codegen.cgast.utils.PExternalType;
import org.overture.codegen.cgast.expressions.APreIncExpCG;
import org.overture.codegen.cgast.expressions.SIsExpCG;
import org.overture.codegen.cgast.SStmCG;
import org.overture.codegen.cgast.expressions.AElemsUnaryExpCG;
import org.overture.codegen.cgast.statements.AForIndexStmCG;
import org.overture.codegen.cgast.expressions.AMapInverseUnaryExpCG;
import org.overture.codegen.cgast.traces.ATraceDeclTermCG;
import org.overture.codegen.cgast.declarations.AMutexSyncDeclCG;
import org.overture.codegen.cgast.expressions.SMapExpCG;
import org.overture.codegen.cgast.traces.AInstanceTraceDeclCG;
import org.overture.codegen.cgast.expressions.AEnumMapExpCG;
import org.overture.codegen.cgast.expressions.APowerNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.AEnumSetExpCG;
import org.overture.codegen.cgast.SLocalParamCG;
import org.overture.codegen.cgast.expressions.SSetExpCG;
import org.overture.codegen.cgast.expressions.ACharIsExpCG;
import org.overture.codegen.cgast.expressions.ACompMapExpCG;
import org.overture.codegen.cgast.INode;
import org.overture.codegen.cgast.expressions.ADistConcatUnaryExpCG;
import org.overture.codegen.cgast.statements.ACallObjectExpStmCG;
import org.overture.codegen.cgast.types.AVoidTypeCG;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import org.overture.codegen.cgast.types.AIntNumericBasicTypeCG;
import org.overture.codegen.cgast.types.ATokenBasicTypeCG;
import org.overture.codegen.cgast.expressions.AOrBoolBinaryExpCG;
import org.overture.codegen.cgast.types.ATemplateTypeCG;
import org.overture.codegen.cgast.declarations.AMethodDeclCG;
import org.overture.codegen.cgast.traces.ALetBeStBindingTraceDeclCG;
import org.overture.codegen.cgast.types.AExternalTypeCG;
import org.overture.codegen.cgast.types.ARealBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.APreCondRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.AExistsQuantifierExpCG;
import org.overture.codegen.cgast.patterns.AStringPatternCG;
import org.overture.codegen.cgast.expressions.ACompSetExpCG;
import org.overture.codegen.cgast.statements.ALetBeStStmCG;
import org.overture.codegen.cgast.statements.AStartlistStmCG;
import org.overture.codegen.cgast.patterns.ANullPatternCG;
import org.overture.codegen.cgast.expressions.ADistMergeUnaryExpCG;
import org.overture.codegen.cgast.types.ATupleTypeCG;
import org.overture.codegen.cgast.expressions.ADistUnionUnaryExpCG;
import org.overture.codegen.cgast.expressions.ATimeExpCG;
import org.overture.codegen.cgast.types.AIntBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.analysis.intf.IAnswer;
import org.overture.codegen.cgast.expressions.AMkBasicExpCG;
import org.overture.codegen.cgast.expressions.AQuoteLiteralExpCG;
import org.overture.codegen.cgast.expressions.AMapletExpCG;
import org.overture.codegen.cgast.utils.AHeaderLetBeStCG;
import org.overture.codegen.cgast.expressions.AExists1QuantifierExpCG;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.declarations.AVarDeclCG;
import org.overture.codegen.cgast.expressions.ADomainResToBinaryExpCG;
import org.overture.codegen.cgast.expressions.ARemNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ANat1IsExpCG;
import org.overture.codegen.cgast.expressions.AAddrNotEqualsBinaryExpCG;
import org.overture.codegen.cgast.expressions.AHistoryExpCG;
import org.overture.codegen.cgast.statements.SAltStmStmCG;
import org.overture.codegen.cgast.SBindCG;
import org.overture.codegen.cgast.statements.AWhileStmCG;
import java.lang.Boolean;
import org.overture.codegen.cgast.statements.AForAllStmCG;
import org.overture.codegen.cgast.expressions.ASetIntersectBinaryExpCG;
import org.overture.codegen.cgast.expressions.APlusUnaryExpCG;
import org.overture.codegen.cgast.types.AClassTypeCG;
import org.overture.codegen.cgast.expressions.AIndicesUnaryExpCG;
import org.overture.codegen.cgast.SLetBeStCG;
import org.overture.codegen.cgast.expressions.ATupleCompatibilityExpCG;
import org.overture.codegen.cgast.expressions.ARangeResToBinaryExpCG;
import org.overture.codegen.cgast.statements.AApplyObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.ASetProperSubsetBinaryExpCG;
import org.overture.codegen.cgast.expressions.ALessEqualNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ANotUnaryExpCG;
import org.overture.codegen.cgast.declarations.APersyncDeclCG;
import org.overture.codegen.cgast.expressions.AReverseUnaryExpCG;
import org.overture.codegen.cgast.name.ATypeNameCG;
import org.overture.codegen.cgast.types.AQuoteTypeCG;
import java.lang.Object;
import org.overture.codegen.cgast.expressions.AMethodInstantiationExpCG;
import org.overture.ast.types.PType;
import org.overture.codegen.cgast.expressions.ACharLiteralExpCG;
import org.overture.codegen.cgast.statements.AStackDeclStmCG;
import org.overture.codegen.cgast.expressions.SRuntimeErrorExpCG;
import org.overture.codegen.cgast.patterns.AQuotePatternCG;
import org.overture.codegen.cgast.types.SBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AMinusUnaryExpCG;
import org.overture.codegen.cgast.expressions.AMapDomainUnaryExpCG;
import org.overture.codegen.cgast.expressions.ARangeResByBinaryExpCG;
import org.overture.codegen.cgast.declarations.AFormalParamLocalParamCG;
import org.overture.codegen.cgast.expressions.SQuantifierExpCG;
import org.overture.codegen.cgast.types.AMethodTypeCG;
import org.overture.codegen.cgast.statements.AIncrementStmCG;
import org.overture.codegen.cgast.expressions.ADivideNumericBinaryExpCG;
import org.overture.codegen.cgast.expressions.ASeqToStringUnaryExpCG;
import org.overture.codegen.cgast.expressions.APatternMatchRuntimeErrorExpCG;
import org.overture.codegen.cgast.statements.AIdentifierStateDesignatorCG;
import org.overture.codegen.cgast.declarations.ARecordDeclCG;
import org.overture.codegen.cgast.expressions.AAnonymousClassExpCG;
import org.overture.codegen.cgast.patterns.ATuplePatternCG;
import org.overture.codegen.cgast.expressions.ANewExpCG;
import org.overture.codegen.cgast.expressions.ACastUnaryExpCG;
import java.lang.Character;
import org.overture.codegen.cgast.expressions.SUnaryExpCG;
import org.overture.codegen.cgast.expressions.APostIncExpCG;
import org.overture.codegen.cgast.expressions.ANatIsExpCG;
import org.overture.codegen.cgast.expressions.AIntLiteralExpCG;
import org.overture.codegen.cgast.types.ANat1NumericBasicTypeCG;
import org.overture.codegen.cgast.statements.AFieldObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AUndefinedExpCG;
import org.overture.codegen.cgast.traces.AApplyExpTraceCoreDeclCG;
import org.overture.codegen.cgast.statements.AStartStmCG;
import org.overture.codegen.cgast.expressions.SBoolBinaryExpCG;
import org.overture.codegen.cgast.expressions.SLiteralExpCG;
import org.overture.codegen.cgast.statements.AIdentifierObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.ABoolIsExpCG;
import org.overture.codegen.cgast.expressions.AGeneralIsExpCG;
import org.overture.codegen.cgast.expressions.AStringToSeqUnaryExpCG;
import org.overture.codegen.cgast.PCG;
import org.overture.codegen.cgast.expressions.APostDecExpCG;
import org.overture.codegen.cgast.expressions.ATailUnaryExpCG;
import org.overture.codegen.cgast.expressions.ASeqModificationBinaryExpCG;
import org.overture.codegen.cgast.types.SSetTypeCG;
import org.overture.codegen.cgast.statements.SCallStmCG;
import org.overture.codegen.cgast.statements.AContinueStmCG;
import org.overture.codegen.cgast.expressions.ACaseAltExpExpCG;
import org.overture.codegen.cgast.expressions.ASuperVarExpCG;
import org.overture.codegen.cgast.statements.AMapSeqStateDesignatorCG;
import org.overture.codegen.cgast.SMultipleBindCG;
import org.overture.codegen.cgast.expressions.AApplyExpCG;
import org.overture.codegen.cgast.expressions.ACompSeqExpCG;
import java.lang.Double;
import org.overture.codegen.cgast.expressions.ASubSeqExpCG;
import org.overture.codegen.cgast.SPatternCG;
import org.overture.codegen.cgast.expressions.ARecordModifierCG;
import org.overture.codegen.cgast.expressions.ACasesExpCG;
import org.overture.codegen.cgast.statements.AReturnStmCG;
import org.overture.codegen.cgast.types.AMapMapTypeCG;
import org.overture.codegen.cgast.expressions.ALetDefExpCG;
import org.overture.codegen.cgast.expressions.ASetSubsetBinaryExpCG;
import java.lang.String;
import org.overture.codegen.cgast.expressions.ATimesNumericBinaryExpCG;
import org.overture.codegen.ir.SourceNode;
import org.overture.codegen.cgast.statements.ANewObjectDesignatorCG;
import org.overture.codegen.cgast.expressions.AAddrEqualsBinaryExpCG;
import org.overture.codegen.cgast.statements.ACaseAltStmStmCG;
import org.overture.codegen.cgast.expressions.AExplicitVarExpCG;
import org.overture.codegen.cgast.types.SNumericBasicTypeCG;
import org.overture.codegen.cgast.expressions.AThreadIdExpCG;
import org.overture.codegen.cgast.expressions.AFieldNumberExpCG;
import org.overture.codegen.cgast.types.ABoolBasicTypeCG;
import org.overture.codegen.cgast.patterns.ABoolPatternCG;
import org.overture.codegen.cgast.types.ARecordTypeCG;
import org.overture.codegen.cgast.statements.ABreakStmCG;
import org.overture.codegen.cgast.statements.ALocalPatternAssignmentStmCG;
import org.overture.codegen.cgast.types.ASetSetTypeCG;
import org.overture.codegen.cgast.SExpCG;
import org.overture.codegen.cgast.types.SMapTypeCG;
import org.overture.codegen.cgast.patterns.ASetMultipleBindCG;
import org.overture.codegen.cgast.STraceDeclCG;
import org.overture.codegen.cgast.patterns.AIgnorePatternCG;
import org.overture.codegen.cgast.STypeCG;
import org.overture.codegen.cgast.expressions.ALetBeStExpCG;
import org.overture.codegen.cgast.name.ATokenNameCG;
import org.overture.codegen.cgast.expressions.AInstanceofExpCG;
import org.overture.codegen.cgast.SDeclCG;
import org.overture.codegen.cgast.expressions.AMapRangeUnaryExpCG;
import org.overture.codegen.cgast.expressions.ALenUnaryExpCG;
import org.overture.codegen.cgast.expressions.ACardUnaryExpCG;
import org.overture.codegen.cgast.declarations.AFuncDeclCG;
import org.overture.codegen.cgast.declarations.ACatchClauseDeclCG;
import org.overture.codegen.cgast.types.ANatNumericBasicTypeCG;
import org.overture.codegen.cgast.SStateDesignatorCG;
import org.overture.codegen.cgast.statements.ABlockStmCG;
import org.overture.codegen.cgast.statements.ASkipStmCG;
import org.overture.codegen.cgast.declarations.AFieldDeclCG;
import org.overture.codegen.cgast.expressions.AMissingMemberRuntimeErrorExpCG;
import org.overture.codegen.cgast.expressions.ATupleExpCG;
import org.overture.codegen.cgast.expressions.ARealLiteralExpCG;
import org.overture.codegen.cgast.IToken;
import org.overture.codegen.cgast.statements.ANotImplementedStmCG;
import org.overture.codegen.cgast.patterns.AIntPatternCG;
import org.overture.codegen.cgast.expressions.ARatIsExpCG;
import org.overture.codegen.cgast.expressions.ASeqConcatBinaryExpCG;
import org.overture.codegen.cgast.expressions.AFloorUnaryExpCG;
import org.overture.codegen.cgast.statements.ADecrementStmCG;
import org.overture.codegen.cgast.expressions.ALambdaExpCG;
import org.overture.codegen.cgast.types.AUnionTypeCG;
import org.overture.codegen.cgast.expressions.SBinaryExpCG;
import org.overture.codegen.cgast.expressions.AGreaterNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.APeriodicStmCG;
import org.overture.codegen.cgast.expressions.SVarExpCG;
import org.overture.codegen.cgast.expressions.APlusNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.ARaiseErrorStmCG;
import org.overture.codegen.cgast.STermCG;
import org.overture.codegen.cgast.expressions.ATernaryIfExpCG;
import org.overture.codegen.cgast.expressions.SSeqExpCG;
import org.overture.codegen.cgast.expressions.AEnumSeqExpCG;
import org.overture.codegen.cgast.types.ANat1BasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.patterns.ASetBindCG;
import org.overture.codegen.cgast.declarations.AInterfaceDeclCG;
import org.overture.codegen.cgast.expressions.ATokenIsExpCG;
import org.overture.codegen.cgast.expressions.SNumericBinaryExpCG;
import org.overture.codegen.cgast.statements.ATryStmCG;
import org.overture.codegen.cgast.traces.ARepeatTraceDeclCG;
import org.overture.codegen.cgast.traces.ALetDefBindingTraceDeclCG;
import org.overture.codegen.cgast.expressions.AExternalExpCG;
import org.overture.codegen.cgast.utils.AInfoExternalType;
import org.overture.codegen.cgast.patterns.AIdentifierPatternCG;
import org.overture.codegen.cgast.expressions.ANotEqualsBinaryExpCG;
import org.overture.codegen.cgast.statements.AAbstractBodyStmCG;
import org.overture.codegen.cgast.expressions.AHeadUnaryExpCG;
import org.overture.codegen.cgast.types.ASeqSeqTypeCG;
import org.overture.codegen.cgast.expressions.AMapUnionBinaryExpCG;
import org.overture.codegen.cgast.expressions.AIntIsExpCG;
import org.overture.codegen.cgast.SModifierCG;
import org.overture.codegen.cgast.declarations.ANamedTraceDeclCG;
import org.overture.codegen.cgast.statements.ASelfObjectDesignatorCG;
import org.overture.codegen.cgast.types.ANatBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.expressions.AXorBoolBinaryExpCG;
import org.overture.codegen.cgast.statements.AElseIfStmCG;
import org.overture.codegen.cgast.types.AUnknownTypeCG;
import org.overture.codegen.cgast.declarations.AClassDeclCG;
import org.overture.codegen.cgast.statements.AThrowStmCG;
import org.overture.codegen.cgast.expressions.AEqualsBinaryExpCG;
import org.overture.codegen.cgast.expressions.ASetDifferenceBinaryExpCG;
import org.overture.codegen.cgast.declarations.AThreadDeclCG;
import org.overture.codegen.cgast.types.ARatBasicTypeWrappersTypeCG;
import org.overture.codegen.cgast.declarations.ANamedTypeDeclCG;
import org.overture.codegen.cgast.SNameCG;
import org.overture.codegen.cgast.expressions.AIdentifierVarExpCG;
import org.overture.codegen.cgast.statements.AErrorStmCG;
import org.overture.codegen.cgast.expressions.ARangeSetExpCG;
import org.overture.codegen.cgast.expressions.ATupleSizeExpCG;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
@SuppressWarnings({"all"})
public abstract class AnswerAdaptor<A> implements IAnswer<A>
{
	private static final long serialVersionUID = 1L;

	final protected IAnswer<A> THIS;

	/**
	* Creates a new {@code AnswerAdaptor} node with the given nodes as children.
	* The basic child nodes are removed from their previous parents.
	* @param THIS_ the {@link IAnswer} <b>graph</a> node for the {@code THIS} child of this {@link AnswerAdaptor} node.
	*  <i>The parent of this {@code THIS } will not be changed by adding it to this node.</i>
	*/
	public AnswerAdaptor(IAnswer<A> THIS_)
	{
		super();
		this.THIS = THIS_;

	}


	/**
	 * Creates a new {@link AnswerAdaptor} node with no children.
	 */
	public AnswerAdaptor()
	{
		this.THIS=this;

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A casePType(PType node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseSourceNode(SourceNode node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseBoolean(Boolean node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseLong(Long node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseInteger(Integer node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseDouble(Double node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseCharacter(Character node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseString(String node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseObject(Object node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link PCG} node from {@link PCG#apply(IAnalysis)}.
	* @param node the calling {@link PCG} node
	*/
	public A defaultPCG(PCG node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link SPatternCG} node from {@link SPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link SPatternCG} node
	*/
	public A defaultSPatternCG(SPatternCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SBindCG} node from {@link SBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SBindCG} node
	*/
	public A defaultSBindCG(SBindCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SMultipleBindCG} node from {@link SMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link SMultipleBindCG} node
	*/
	public A defaultSMultipleBindCG(SMultipleBindCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SNameCG} node from {@link SNameCG#apply(IAnalysis)}.
	* @param node the calling {@link SNameCG} node
	*/
	public A defaultSNameCG(SNameCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SDeclCG} node from {@link SDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link SDeclCG} node
	*/
	public A defaultSDeclCG(SDeclCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SStateDesignatorCG} node from {@link SStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SStateDesignatorCG} node
	*/
	public A defaultSStateDesignatorCG(SStateDesignatorCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SObjectDesignatorCG} node from {@link SObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link SObjectDesignatorCG} node
	*/
	public A defaultSObjectDesignatorCG(SObjectDesignatorCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SLocalParamCG} node from {@link SLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link SLocalParamCG} node
	*/
	public A defaultSLocalParamCG(SLocalParamCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SStmCG} node from {@link SStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SStmCG} node
	*/
	public A defaultSStmCG(SStmCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SLetBeStCG} node from {@link SLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link SLetBeStCG} node
	*/
	public A defaultSLetBeStCG(SLetBeStCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SExpCG} node from {@link SExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SExpCG} node
	*/
	public A defaultSExpCG(SExpCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STypeCG} node from {@link STypeCG#apply(IAnalysis)}.
	* @param node the calling {@link STypeCG} node
	*/
	public A defaultSTypeCG(STypeCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link SModifierCG} node from {@link SModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link SModifierCG} node
	*/
	public A defaultSModifierCG(SModifierCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STermCG} node from {@link STermCG#apply(IAnalysis)}.
	* @param node the calling {@link STermCG} node
	*/
	public A defaultSTermCG(STermCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STraceDeclCG} node from {@link STraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceDeclCG} node
	*/
	public A defaultSTraceDeclCG(STraceDeclCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link STraceCoreDeclCG} node from {@link STraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link STraceCoreDeclCG} node
	*/
	public A defaultSTraceCoreDeclCG(STraceCoreDeclCG node) throws AnalysisException
	{
		return defaultPCG(node);
	}


	/**
	* Called by the {@link AIdentifierPatternCG} node from {@link AIdentifierPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPatternCG} node
	*/
	public A caseAIdentifierPatternCG(AIdentifierPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link AIgnorePatternCG} node from {@link AIgnorePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePatternCG} node
	*/
	public A caseAIgnorePatternCG(AIgnorePatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link ABoolPatternCG} node from {@link ABoolPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolPatternCG} node
	*/
	public A caseABoolPatternCG(ABoolPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link ACharPatternCG} node from {@link ACharPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharPatternCG} node
	*/
	public A caseACharPatternCG(ACharPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link AIntPatternCG} node from {@link AIntPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntPatternCG} node
	*/
	public A caseAIntPatternCG(AIntPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link ANullPatternCG} node from {@link ANullPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullPatternCG} node
	*/
	public A caseANullPatternCG(ANullPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link AQuotePatternCG} node from {@link AQuotePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePatternCG} node
	*/
	public A caseAQuotePatternCG(AQuotePatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link ARealPatternCG} node from {@link ARealPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealPatternCG} node
	*/
	public A caseARealPatternCG(ARealPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link AStringPatternCG} node from {@link AStringPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringPatternCG} node
	*/
	public A caseAStringPatternCG(AStringPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link ATuplePatternCG} node from {@link ATuplePatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePatternCG} node
	*/
	public A caseATuplePatternCG(ATuplePatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link ARecordPatternCG} node from {@link ARecordPatternCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPatternCG} node
	*/
	public A caseARecordPatternCG(ARecordPatternCG node) throws AnalysisException
	{
		return defaultSPatternCG(node);
	}


	/**
	* Called by the {@link ASetBindCG} node from {@link ASetBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetBindCG} node
	*/
	public A caseASetBindCG(ASetBindCG node) throws AnalysisException
	{
		return defaultSBindCG(node);
	}


	/**
	* Called by the {@link ASetMultipleBindCG} node from {@link ASetMultipleBindCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBindCG} node
	*/
	public A caseASetMultipleBindCG(ASetMultipleBindCG node) throws AnalysisException
	{
		return defaultSMultipleBindCG(node);
	}


	/**
	* Called by the {@link ATypeNameCG} node from {@link ATypeNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeNameCG} node
	*/
	public A caseATypeNameCG(ATypeNameCG node) throws AnalysisException
	{
		return defaultSNameCG(node);
	}


	/**
	* Called by the {@link ATokenNameCG} node from {@link ATokenNameCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenNameCG} node
	*/
	public A caseATokenNameCG(ATokenNameCG node) throws AnalysisException
	{
		return defaultSNameCG(node);
	}


	/**
	* Called by the {@link AMethodDeclCG} node from {@link AMethodDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodDeclCG} node
	*/
	public A caseAMethodDeclCG(AMethodDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AFuncDeclCG} node from {@link AFuncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFuncDeclCG} node
	*/
	public A caseAFuncDeclCG(AFuncDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AFieldDeclCG} node from {@link AFieldDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldDeclCG} node
	*/
	public A caseAFieldDeclCG(AFieldDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AClassDeclCG} node from {@link AClassDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassDeclCG} node
	*/
	public A caseAClassDeclCG(AClassDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AInterfaceDeclCG} node from {@link AInterfaceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceDeclCG} node
	*/
	public A caseAInterfaceDeclCG(AInterfaceDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link ARecordDeclCG} node from {@link ARecordDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordDeclCG} node
	*/
	public A caseARecordDeclCG(ARecordDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AThreadDeclCG} node from {@link AThreadDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDeclCG} node
	*/
	public A caseAThreadDeclCG(AThreadDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link ATypeDeclCG} node from {@link ATypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDeclCG} node
	*/
	public A caseATypeDeclCG(ATypeDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link ACatchClauseDeclCG} node from {@link ACatchClauseDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ACatchClauseDeclCG} node
	*/
	public A caseACatchClauseDeclCG(ACatchClauseDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link APersyncDeclCG} node from {@link APersyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link APersyncDeclCG} node
	*/
	public A caseAPersyncDeclCG(APersyncDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AMutexSyncDeclCG} node from {@link AMutexSyncDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDeclCG} node
	*/
	public A caseAMutexSyncDeclCG(AMutexSyncDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AVarDeclCG} node from {@link AVarDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AVarDeclCG} node
	*/
	public A caseAVarDeclCG(AVarDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link ANamedTypeDeclCG} node from {@link ANamedTypeDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTypeDeclCG} node
	*/
	public A caseANamedTypeDeclCG(ANamedTypeDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link ANamedTraceDeclCG} node from {@link ANamedTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDeclCG} node
	*/
	public A caseANamedTraceDeclCG(ANamedTraceDeclCG node) throws AnalysisException
	{
		return defaultSDeclCG(node);
	}


	/**
	* Called by the {@link AIdentifierStateDesignatorCG} node from {@link AIdentifierStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignatorCG} node
	*/
	public A caseAIdentifierStateDesignatorCG(AIdentifierStateDesignatorCG node) throws AnalysisException
	{
		return defaultSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AFieldStateDesignatorCG} node from {@link AFieldStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignatorCG} node
	*/
	public A caseAFieldStateDesignatorCG(AFieldStateDesignatorCG node) throws AnalysisException
	{
		return defaultSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AMapSeqStateDesignatorCG} node from {@link AMapSeqStateDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignatorCG} node
	*/
	public A caseAMapSeqStateDesignatorCG(AMapSeqStateDesignatorCG node) throws AnalysisException
	{
		return defaultSStateDesignatorCG(node);
	}


	/**
	* Called by the {@link AApplyObjectDesignatorCG} node from {@link AApplyObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignatorCG} node
	*/
	public A caseAApplyObjectDesignatorCG(AApplyObjectDesignatorCG node) throws AnalysisException
	{
		return defaultSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AFieldObjectDesignatorCG} node from {@link AFieldObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignatorCG} node
	*/
	public A caseAFieldObjectDesignatorCG(AFieldObjectDesignatorCG node) throws AnalysisException
	{
		return defaultSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AIdentifierObjectDesignatorCG} node from {@link AIdentifierObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignatorCG} node
	*/
	public A caseAIdentifierObjectDesignatorCG(AIdentifierObjectDesignatorCG node) throws AnalysisException
	{
		return defaultSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link ANewObjectDesignatorCG} node from {@link ANewObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignatorCG} node
	*/
	public A caseANewObjectDesignatorCG(ANewObjectDesignatorCG node) throws AnalysisException
	{
		return defaultSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link ASelfObjectDesignatorCG} node from {@link ASelfObjectDesignatorCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignatorCG} node
	*/
	public A caseASelfObjectDesignatorCG(ASelfObjectDesignatorCG node) throws AnalysisException
	{
		return defaultSObjectDesignatorCG(node);
	}


	/**
	* Called by the {@link AFormalParamLocalParamCG} node from {@link AFormalParamLocalParamCG#apply(IAnalysis)}.
	* @param node the calling {@link AFormalParamLocalParamCG} node
	*/
	public A caseAFormalParamLocalParamCG(AFormalParamLocalParamCG node) throws AnalysisException
	{
		return defaultSLocalParamCG(node);
	}


	/**
	* Called by the {@link AIfStmCG} node from {@link AIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIfStmCG} node
	*/
	public A caseAIfStmCG(AIfStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AElseIfStmCG} node from {@link AElseIfStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStmCG} node
	*/
	public A caseAElseIfStmCG(AElseIfStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ASkipStmCG} node from {@link ASkipStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStmCG} node
	*/
	public A caseASkipStmCG(ASkipStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AReturnStmCG} node from {@link AReturnStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStmCG} node
	*/
	public A caseAReturnStmCG(AReturnStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AAbstractBodyStmCG} node from {@link AAbstractBodyStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbstractBodyStmCG} node
	*/
	public A caseAAbstractBodyStmCG(AAbstractBodyStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AAssignmentStmCG} node from {@link AAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStmCG} node
	*/
	public A caseAAssignmentStmCG(AAssignmentStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ALocalAssignmentStmCG} node from {@link ALocalAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalAssignmentStmCG} node
	*/
	public A caseALocalAssignmentStmCG(ALocalAssignmentStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ALocalPatternAssignmentStmCG} node from {@link ALocalPatternAssignmentStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALocalPatternAssignmentStmCG} node
	*/
	public A caseALocalPatternAssignmentStmCG(ALocalPatternAssignmentStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ABlockStmCG} node from {@link ABlockStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABlockStmCG} node
	*/
	public A caseABlockStmCG(ABlockStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ACallObjectStmCG} node from {@link ACallObjectStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStmCG} node
	*/
	public A caseACallObjectStmCG(ACallObjectStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ACallObjectExpStmCG} node from {@link ACallObjectExpStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectExpStmCG} node
	*/
	public A caseACallObjectExpStmCG(ACallObjectExpStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link SCallStmCG} node from {@link SCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SCallStmCG} node
	*/
	public A defaultSCallStmCG(SCallStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ANotImplementedStmCG} node from {@link ANotImplementedStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedStmCG} node
	*/
	public A caseANotImplementedStmCG(ANotImplementedStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AForIndexStmCG} node from {@link AForIndexStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStmCG} node
	*/
	public A caseAForIndexStmCG(AForIndexStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AForAllStmCG} node from {@link AForAllStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStmCG} node
	*/
	public A caseAForAllStmCG(AForAllStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AWhileStmCG} node from {@link AWhileStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStmCG} node
	*/
	public A caseAWhileStmCG(AWhileStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ALetBeStStmCG} node from {@link ALetBeStStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStmCG} node
	*/
	public A caseALetBeStStmCG(ALetBeStStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AThrowStmCG} node from {@link AThrowStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AThrowStmCG} node
	*/
	public A caseAThrowStmCG(AThrowStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AForLoopStmCG} node from {@link AForLoopStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AForLoopStmCG} node
	*/
	public A caseAForLoopStmCG(AForLoopStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AIncrementStmCG} node from {@link AIncrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AIncrementStmCG} node
	*/
	public A caseAIncrementStmCG(AIncrementStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ADecrementStmCG} node from {@link ADecrementStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ADecrementStmCG} node
	*/
	public A caseADecrementStmCG(ADecrementStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ARaiseErrorStmCG} node from {@link ARaiseErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ARaiseErrorStmCG} node
	*/
	public A caseARaiseErrorStmCG(ARaiseErrorStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ACasesStmCG} node from {@link ACasesStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStmCG} node
	*/
	public A caseACasesStmCG(ACasesStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link SAltStmStmCG} node from {@link SAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltStmStmCG} node
	*/
	public A defaultSAltStmStmCG(SAltStmStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AErrorStmCG} node from {@link AErrorStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStmCG} node
	*/
	public A caseAErrorStmCG(AErrorStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AContinueStmCG} node from {@link AContinueStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AContinueStmCG} node
	*/
	public A caseAContinueStmCG(AContinueStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ABreakStmCG} node from {@link ABreakStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ABreakStmCG} node
	*/
	public A caseABreakStmCG(ABreakStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AStartStmCG} node from {@link AStartStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartStmCG} node
	*/
	public A caseAStartStmCG(AStartStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AStartlistStmCG} node from {@link AStartlistStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStartlistStmCG} node
	*/
	public A caseAStartlistStmCG(AStartlistStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link ATryStmCG} node from {@link ATryStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ATryStmCG} node
	*/
	public A caseATryStmCG(ATryStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link APeriodicStmCG} node from {@link APeriodicStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStmCG} node
	*/
	public A caseAPeriodicStmCG(APeriodicStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link AStackDeclStmCG} node from {@link AStackDeclStmCG#apply(IAnalysis)}.
	* @param node the calling {@link AStackDeclStmCG} node
	*/
	public A caseAStackDeclStmCG(AStackDeclStmCG node) throws AnalysisException
	{
		return defaultSStmCG(node);
	}


	/**
	* Called by the {@link APlainCallStmCG} node from {@link APlainCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link APlainCallStmCG} node
	*/
	public A caseAPlainCallStmCG(APlainCallStmCG node) throws AnalysisException
	{
		return defaultSCallStmCG(node);
	}


	/**
	* Called by the {@link ASuperCallStmCG} node from {@link ASuperCallStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperCallStmCG} node
	*/
	public A caseASuperCallStmCG(ASuperCallStmCG node) throws AnalysisException
	{
		return defaultSCallStmCG(node);
	}


	/**
	* Called by the {@link ACaseAltStmStmCG} node from {@link ACaseAltStmStmCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltStmStmCG} node
	*/
	public A caseACaseAltStmStmCG(ACaseAltStmStmCG node) throws AnalysisException
	{
		return defaultSAltStmStmCG(node);
	}


	/**
	* Called by the {@link AHeaderLetBeStCG} node from {@link AHeaderLetBeStCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeaderLetBeStCG} node
	*/
	public A caseAHeaderLetBeStCG(AHeaderLetBeStCG node) throws AnalysisException
	{
		return defaultSLetBeStCG(node);
	}


	/**
	* Called by the {@link SUnaryExpCG} node from {@link SUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExpCG} node
	*/
	public A defaultSUnaryExpCG(SUnaryExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SBinaryExpCG} node from {@link SBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExpCG} node
	*/
	public A defaultSBinaryExpCG(SBinaryExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AFieldExpCG} node from {@link AFieldExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExpCG} node
	*/
	public A caseAFieldExpCG(AFieldExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AApplyExpCG} node from {@link AApplyExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpCG} node
	*/
	public A caseAApplyExpCG(AApplyExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ANewExpCG} node from {@link ANewExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANewExpCG} node
	*/
	public A caseANewExpCG(ANewExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SVarExpCG} node from {@link SVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SVarExpCG} node
	*/
	public A defaultSVarExpCG(SVarExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AInstanceofExpCG} node from {@link AInstanceofExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceofExpCG} node
	*/
	public A caseAInstanceofExpCG(AInstanceofExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SIsExpCG} node from {@link SIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SIsExpCG} node
	*/
	public A defaultSIsExpCG(SIsExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SLiteralExpCG} node from {@link SLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SLiteralExpCG} node
	*/
	public A defaultSLiteralExpCG(SLiteralExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ASelfExpCG} node from {@link ASelfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExpCG} node
	*/
	public A caseASelfExpCG(ASelfExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ANullExpCG} node from {@link ANullExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANullExpCG} node
	*/
	public A caseANullExpCG(ANullExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ALetDefExpCG} node from {@link ALetDefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExpCG} node
	*/
	public A caseALetDefExpCG(ALetDefExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AMethodInstantiationExpCG} node from {@link AMethodInstantiationExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodInstantiationExpCG} node
	*/
	public A caseAMethodInstantiationExpCG(AMethodInstantiationExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ATupleExpCG} node from {@link ATupleExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExpCG} node
	*/
	public A caseATupleExpCG(ATupleExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AFieldNumberExpCG} node from {@link AFieldNumberExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExpCG} node
	*/
	public A caseAFieldNumberExpCG(AFieldNumberExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ATupleSizeExpCG} node from {@link ATupleSizeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleSizeExpCG} node
	*/
	public A caseATupleSizeExpCG(ATupleSizeExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ATernaryIfExpCG} node from {@link ATernaryIfExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATernaryIfExpCG} node
	*/
	public A caseATernaryIfExpCG(ATernaryIfExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AMapletExpCG} node from {@link AMapletExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExpCG} node
	*/
	public A caseAMapletExpCG(AMapletExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ALetBeStExpCG} node from {@link ALetBeStExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExpCG} node
	*/
	public A caseALetBeStExpCG(ALetBeStExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SSeqExpCG} node from {@link SSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExpCG} node
	*/
	public A defaultSSeqExpCG(SSeqExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SSetExpCG} node from {@link SSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetExpCG} node
	*/
	public A defaultSSetExpCG(SSetExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SMapExpCG} node from {@link SMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapExpCG} node
	*/
	public A defaultSMapExpCG(SMapExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AMkBasicExpCG} node from {@link AMkBasicExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExpCG} node
	*/
	public A caseAMkBasicExpCG(AMkBasicExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ARecordModExpCG} node from {@link ARecordModExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModExpCG} node
	*/
	public A caseARecordModExpCG(ARecordModExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SQuantifierExpCG} node from {@link SQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SQuantifierExpCG} node
	*/
	public A defaultSQuantifierExpCG(SQuantifierExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link APreIncExpCG} node from {@link APreIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreIncExpCG} node
	*/
	public A caseAPreIncExpCG(APreIncExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link APreDecExpCG} node from {@link APreDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreDecExpCG} node
	*/
	public A caseAPreDecExpCG(APreDecExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link APostIncExpCG} node from {@link APostIncExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostIncExpCG} node
	*/
	public A caseAPostIncExpCG(APostIncExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link APostDecExpCG} node from {@link APostDecExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APostDecExpCG} node
	*/
	public A caseAPostDecExpCG(APostDecExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ADeRefExpCG} node from {@link ADeRefExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADeRefExpCG} node
	*/
	public A caseADeRefExpCG(ADeRefExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SRuntimeErrorExpCG} node from {@link SRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SRuntimeErrorExpCG} node
	*/
	public A defaultSRuntimeErrorExpCG(SRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AExternalExpCG} node from {@link AExternalExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalExpCG} node
	*/
	public A caseAExternalExpCG(AExternalExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ATypeArgExpCG} node from {@link ATypeArgExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATypeArgExpCG} node
	*/
	public A caseATypeArgExpCG(ATypeArgExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ALambdaExpCG} node from {@link ALambdaExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExpCG} node
	*/
	public A caseALambdaExpCG(ALambdaExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AAnonymousClassExpCG} node from {@link AAnonymousClassExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAnonymousClassExpCG} node
	*/
	public A caseAAnonymousClassExpCG(AAnonymousClassExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ANotImplementedExpCG} node from {@link ANotImplementedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotImplementedExpCG} node
	*/
	public A caseANotImplementedExpCG(ANotImplementedExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AUndefinedExpCG} node from {@link AUndefinedExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExpCG} node
	*/
	public A caseAUndefinedExpCG(AUndefinedExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AThreadIdExpCG} node from {@link AThreadIdExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExpCG} node
	*/
	public A caseAThreadIdExpCG(AThreadIdExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ATupleCompatibilityExpCG} node from {@link ATupleCompatibilityExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleCompatibilityExpCG} node
	*/
	public A caseATupleCompatibilityExpCG(ATupleCompatibilityExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ACasesExpCG} node from {@link ACasesExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExpCG} node
	*/
	public A caseACasesExpCG(ACasesExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link SAltExpExpCG} node from {@link SAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SAltExpExpCG} node
	*/
	public A defaultSAltExpExpCG(SAltExpExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ASubSeqExpCG} node from {@link ASubSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubSeqExpCG} node
	*/
	public A caseASubSeqExpCG(ASubSeqExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AHistoryExpCG} node from {@link AHistoryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExpCG} node
	*/
	public A caseAHistoryExpCG(AHistoryExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ATimeExpCG} node from {@link ATimeExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExpCG} node
	*/
	public A caseATimeExpCG(ATimeExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link AAssignExpExpCG} node from {@link AAssignExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAssignExpExpCG} node
	*/
	public A caseAAssignExpExpCG(AAssignExpExpCG node) throws AnalysisException
	{
		return defaultSExpCG(node);
	}


	/**
	* Called by the {@link ARecordModifierCG} node from {@link ARecordModifierCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifierCG} node
	*/
	public A caseARecordModifierCG(ARecordModifierCG node) throws AnalysisException
	{
		return defaultSModifierCG(node);
	}


	/**
	* Called by the {@link ABoolIsExpCG} node from {@link ABoolIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolIsExpCG} node
	*/
	public A caseABoolIsExpCG(ABoolIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ANatIsExpCG} node from {@link ANatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatIsExpCG} node
	*/
	public A caseANatIsExpCG(ANatIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ANat1IsExpCG} node from {@link ANat1IsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1IsExpCG} node
	*/
	public A caseANat1IsExpCG(ANat1IsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link AIntIsExpCG} node from {@link AIntIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntIsExpCG} node
	*/
	public A caseAIntIsExpCG(AIntIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ARatIsExpCG} node from {@link ARatIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatIsExpCG} node
	*/
	public A caseARatIsExpCG(ARatIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ARealIsExpCG} node from {@link ARealIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealIsExpCG} node
	*/
	public A caseARealIsExpCG(ARealIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ACharIsExpCG} node from {@link ACharIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharIsExpCG} node
	*/
	public A caseACharIsExpCG(ACharIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ATokenIsExpCG} node from {@link ATokenIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenIsExpCG} node
	*/
	public A caseATokenIsExpCG(ATokenIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ATupleIsExpCG} node from {@link ATupleIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleIsExpCG} node
	*/
	public A caseATupleIsExpCG(ATupleIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link AGeneralIsExpCG} node from {@link AGeneralIsExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGeneralIsExpCG} node
	*/
	public A caseAGeneralIsExpCG(AGeneralIsExpCG node) throws AnalysisException
	{
		return defaultSIsExpCG(node);
	}


	/**
	* Called by the {@link ACaseAltExpExpCG} node from {@link ACaseAltExpExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAltExpExpCG} node
	*/
	public A caseACaseAltExpExpCG(ACaseAltExpExpCG node) throws AnalysisException
	{
		return defaultSAltExpExpCG(node);
	}


	/**
	* Called by the {@link ALetBeStNoBindingRuntimeErrorExpCG} node from {@link ALetBeStNoBindingRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStNoBindingRuntimeErrorExpCG} node
	*/
	public A caseALetBeStNoBindingRuntimeErrorExpCG(ALetBeStNoBindingRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link APatternMatchRuntimeErrorExpCG} node from {@link APatternMatchRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APatternMatchRuntimeErrorExpCG} node
	*/
	public A caseAPatternMatchRuntimeErrorExpCG(APatternMatchRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link AMissingMemberRuntimeErrorExpCG} node from {@link AMissingMemberRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMissingMemberRuntimeErrorExpCG} node
	*/
	public A caseAMissingMemberRuntimeErrorExpCG(AMissingMemberRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link APreCondRuntimeErrorExpCG} node from {@link APreCondRuntimeErrorExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APreCondRuntimeErrorExpCG} node
	*/
	public A caseAPreCondRuntimeErrorExpCG(APreCondRuntimeErrorExpCG node) throws AnalysisException
	{
		return defaultSRuntimeErrorExpCG(node);
	}


	/**
	* Called by the {@link AIdentifierVarExpCG} node from {@link AIdentifierVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierVarExpCG} node
	*/
	public A caseAIdentifierVarExpCG(AIdentifierVarExpCG node) throws AnalysisException
	{
		return defaultSVarExpCG(node);
	}


	/**
	* Called by the {@link AExplicitVarExpCG} node from {@link AExplicitVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitVarExpCG} node
	*/
	public A caseAExplicitVarExpCG(AExplicitVarExpCG node) throws AnalysisException
	{
		return defaultSVarExpCG(node);
	}


	/**
	* Called by the {@link ASuperVarExpCG} node from {@link ASuperVarExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASuperVarExpCG} node
	*/
	public A caseASuperVarExpCG(ASuperVarExpCG node) throws AnalysisException
	{
		return defaultSVarExpCG(node);
	}


	/**
	* Called by the {@link AIntLiteralExpCG} node from {@link AIntLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExpCG} node
	*/
	public A caseAIntLiteralExpCG(AIntLiteralExpCG node) throws AnalysisException
	{
		return defaultSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ARealLiteralExpCG} node from {@link ARealLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExpCG} node
	*/
	public A caseARealLiteralExpCG(ARealLiteralExpCG node) throws AnalysisException
	{
		return defaultSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ABoolLiteralExpCG} node from {@link ABoolLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolLiteralExpCG} node
	*/
	public A caseABoolLiteralExpCG(ABoolLiteralExpCG node) throws AnalysisException
	{
		return defaultSLiteralExpCG(node);
	}


	/**
	* Called by the {@link ACharLiteralExpCG} node from {@link ACharLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExpCG} node
	*/
	public A caseACharLiteralExpCG(ACharLiteralExpCG node) throws AnalysisException
	{
		return defaultSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AQuoteLiteralExpCG} node from {@link AQuoteLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExpCG} node
	*/
	public A caseAQuoteLiteralExpCG(AQuoteLiteralExpCG node) throws AnalysisException
	{
		return defaultSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AStringLiteralExpCG} node from {@link AStringLiteralExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExpCG} node
	*/
	public A caseAStringLiteralExpCG(AStringLiteralExpCG node) throws AnalysisException
	{
		return defaultSLiteralExpCG(node);
	}


	/**
	* Called by the {@link AForAllQuantifierExpCG} node from {@link AForAllQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AForAllQuantifierExpCG} node
	*/
	public A caseAForAllQuantifierExpCG(AForAllQuantifierExpCG node) throws AnalysisException
	{
		return defaultSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link AExistsQuantifierExpCG} node from {@link AExistsQuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExistsQuantifierExpCG} node
	*/
	public A caseAExistsQuantifierExpCG(AExistsQuantifierExpCG node) throws AnalysisException
	{
		return defaultSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link AExists1QuantifierExpCG} node from {@link AExists1QuantifierExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AExists1QuantifierExpCG} node
	*/
	public A caseAExists1QuantifierExpCG(AExists1QuantifierExpCG node) throws AnalysisException
	{
		return defaultSQuantifierExpCG(node);
	}


	/**
	* Called by the {@link SNumericBinaryExpCG} node from {@link SNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExpCG} node
	*/
	public A defaultSNumericBinaryExpCG(SNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link SBoolBinaryExpCG} node from {@link SBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link SBoolBinaryExpCG} node
	*/
	public A defaultSBoolBinaryExpCG(SBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAddrEqualsBinaryExpCG} node from {@link AAddrEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrEqualsBinaryExpCG} node
	*/
	public A caseAAddrEqualsBinaryExpCG(AAddrEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAddrNotEqualsBinaryExpCG} node from {@link AAddrNotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAddrNotEqualsBinaryExpCG} node
	*/
	public A caseAAddrNotEqualsBinaryExpCG(AAddrNotEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AEqualsBinaryExpCG} node from {@link AEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExpCG} node
	*/
	public A caseAEqualsBinaryExpCG(AEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ANotEqualsBinaryExpCG} node from {@link ANotEqualsBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualsBinaryExpCG} node
	*/
	public A caseANotEqualsBinaryExpCG(ANotEqualsBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqConcatBinaryExpCG} node from {@link ASeqConcatBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExpCG} node
	*/
	public A caseASeqConcatBinaryExpCG(ASeqConcatBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqModificationBinaryExpCG} node from {@link ASeqModificationBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqModificationBinaryExpCG} node
	*/
	public A caseASeqModificationBinaryExpCG(ASeqModificationBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AInSetBinaryExpCG} node from {@link AInSetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExpCG} node
	*/
	public A caseAInSetBinaryExpCG(AInSetBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetUnionBinaryExpCG} node from {@link ASetUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExpCG} node
	*/
	public A caseASetUnionBinaryExpCG(ASetUnionBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetIntersectBinaryExpCG} node from {@link ASetIntersectBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExpCG} node
	*/
	public A caseASetIntersectBinaryExpCG(ASetIntersectBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExpCG} node from {@link ASetDifferenceBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExpCG} node
	*/
	public A caseASetDifferenceBinaryExpCG(ASetDifferenceBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetSubsetBinaryExpCG} node from {@link ASetSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSubsetBinaryExpCG} node
	*/
	public A caseASetSubsetBinaryExpCG(ASetSubsetBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASetProperSubsetBinaryExpCG} node from {@link ASetProperSubsetBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetProperSubsetBinaryExpCG} node
	*/
	public A caseASetProperSubsetBinaryExpCG(ASetProperSubsetBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AMapUnionBinaryExpCG} node from {@link AMapUnionBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExpCG} node
	*/
	public A caseAMapUnionBinaryExpCG(AMapUnionBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AMapOverrideBinaryExpCG} node from {@link AMapOverrideBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapOverrideBinaryExpCG} node
	*/
	public A caseAMapOverrideBinaryExpCG(AMapOverrideBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADomainResToBinaryExpCG} node from {@link ADomainResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExpCG} node
	*/
	public A caseADomainResToBinaryExpCG(ADomainResToBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADomainResByBinaryExpCG} node from {@link ADomainResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExpCG} node
	*/
	public A caseADomainResByBinaryExpCG(ADomainResByBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARangeResToBinaryExpCG} node from {@link ARangeResToBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExpCG} node
	*/
	public A caseARangeResToBinaryExpCG(ARangeResToBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARangeResByBinaryExpCG} node from {@link ARangeResByBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExpCG} node
	*/
	public A caseARangeResByBinaryExpCG(ARangeResByBinaryExpCG node) throws AnalysisException
	{
		return defaultSBinaryExpCG(node);
	}


	/**
	* Called by the {@link AIntDivNumericBinaryExpCG} node from {@link AIntDivNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntDivNumericBinaryExpCG} node
	*/
	public A caseAIntDivNumericBinaryExpCG(AIntDivNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ADivideNumericBinaryExpCG} node from {@link ADivideNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExpCG} node
	*/
	public A caseADivideNumericBinaryExpCG(ADivideNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExpCG} node from {@link AGreaterEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExpCG} node
	*/
	public A caseAGreaterEqualNumericBinaryExpCG(AGreaterEqualNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExpCG} node from {@link AGreaterNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExpCG} node
	*/
	public A caseAGreaterNumericBinaryExpCG(AGreaterNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExpCG} node from {@link ALessEqualNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExpCG} node
	*/
	public A caseALessEqualNumericBinaryExpCG(ALessEqualNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ALessNumericBinaryExpCG} node from {@link ALessNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExpCG} node
	*/
	public A caseALessNumericBinaryExpCG(ALessNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AModNumericBinaryExpCG} node from {@link AModNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExpCG} node
	*/
	public A caseAModNumericBinaryExpCG(AModNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link APlusNumericBinaryExpCG} node from {@link APlusNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExpCG} node
	*/
	public A caseAPlusNumericBinaryExpCG(APlusNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExpCG} node from {@link ASubtractNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExpCG} node
	*/
	public A caseASubtractNumericBinaryExpCG(ASubtractNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ARemNumericBinaryExpCG} node from {@link ARemNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExpCG} node
	*/
	public A caseARemNumericBinaryExpCG(ARemNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link ATimesNumericBinaryExpCG} node from {@link ATimesNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExpCG} node
	*/
	public A caseATimesNumericBinaryExpCG(ATimesNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link APowerNumericBinaryExpCG} node from {@link APowerNumericBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerNumericBinaryExpCG} node
	*/
	public A caseAPowerNumericBinaryExpCG(APowerNumericBinaryExpCG node) throws AnalysisException
	{
		return defaultSNumericBinaryExpCG(node);
	}


	/**
	* Called by the {@link AOrBoolBinaryExpCG} node from {@link AOrBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AOrBoolBinaryExpCG} node
	*/
	public A caseAOrBoolBinaryExpCG(AOrBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link AAndBoolBinaryExpCG} node from {@link AAndBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAndBoolBinaryExpCG} node
	*/
	public A caseAAndBoolBinaryExpCG(AAndBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link AXorBoolBinaryExpCG} node from {@link AXorBoolBinaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AXorBoolBinaryExpCG} node
	*/
	public A caseAXorBoolBinaryExpCG(AXorBoolBinaryExpCG node) throws AnalysisException
	{
		return defaultSBoolBinaryExpCG(node);
	}


	/**
	* Called by the {@link APlusUnaryExpCG} node from {@link APlusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APlusUnaryExpCG} node
	*/
	public A caseAPlusUnaryExpCG(APlusUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMinusUnaryExpCG} node from {@link AMinusUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnaryExpCG} node
	*/
	public A caseAMinusUnaryExpCG(AMinusUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ACastUnaryExpCG} node from {@link ACastUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACastUnaryExpCG} node
	*/
	public A caseACastUnaryExpCG(ACastUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AIsolationUnaryExpCG} node from {@link AIsolationUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIsolationUnaryExpCG} node
	*/
	public A caseAIsolationUnaryExpCG(AIsolationUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ALenUnaryExpCG} node from {@link ALenUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExpCG} node
	*/
	public A caseALenUnaryExpCG(ALenUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ACardUnaryExpCG} node from {@link ACardUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACardUnaryExpCG} node
	*/
	public A caseACardUnaryExpCG(ACardUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AElemsUnaryExpCG} node from {@link AElemsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AElemsUnaryExpCG} node
	*/
	public A caseAElemsUnaryExpCG(AElemsUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AIndicesUnaryExpCG} node from {@link AIndicesUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExpCG} node
	*/
	public A caseAIndicesUnaryExpCG(AIndicesUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AHeadUnaryExpCG} node from {@link AHeadUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExpCG} node
	*/
	public A caseAHeadUnaryExpCG(AHeadUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ATailUnaryExpCG} node from {@link ATailUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExpCG} node
	*/
	public A caseATailUnaryExpCG(ATailUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AReverseUnaryExpCG} node from {@link AReverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExpCG} node
	*/
	public A caseAReverseUnaryExpCG(AReverseUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AFloorUnaryExpCG} node from {@link AFloorUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExpCG} node
	*/
	public A caseAFloorUnaryExpCG(AFloorUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AAbsUnaryExpCG} node from {@link AAbsUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnaryExpCG} node
	*/
	public A caseAAbsUnaryExpCG(AAbsUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ANotUnaryExpCG} node from {@link ANotUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExpCG} node
	*/
	public A caseANotUnaryExpCG(ANotUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistConcatUnaryExpCG} node from {@link ADistConcatUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExpCG} node
	*/
	public A caseADistConcatUnaryExpCG(ADistConcatUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistUnionUnaryExpCG} node from {@link ADistUnionUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExpCG} node
	*/
	public A caseADistUnionUnaryExpCG(ADistUnionUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistIntersectUnaryExpCG} node from {@link ADistIntersectUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExpCG} node
	*/
	public A caseADistIntersectUnaryExpCG(ADistIntersectUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link APowerSetUnaryExpCG} node from {@link APowerSetUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExpCG} node
	*/
	public A caseAPowerSetUnaryExpCG(APowerSetUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapDomainUnaryExpCG} node from {@link AMapDomainUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExpCG} node
	*/
	public A caseAMapDomainUnaryExpCG(AMapDomainUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapRangeUnaryExpCG} node from {@link AMapRangeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExpCG} node
	*/
	public A caseAMapRangeUnaryExpCG(AMapRangeUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ADistMergeUnaryExpCG} node from {@link ADistMergeUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExpCG} node
	*/
	public A caseADistMergeUnaryExpCG(ADistMergeUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AMapInverseUnaryExpCG} node from {@link AMapInverseUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExpCG} node
	*/
	public A caseAMapInverseUnaryExpCG(AMapInverseUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link ASeqToStringUnaryExpCG} node from {@link ASeqToStringUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqToStringUnaryExpCG} node
	*/
	public A caseASeqToStringUnaryExpCG(ASeqToStringUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AStringToSeqUnaryExpCG} node from {@link AStringToSeqUnaryExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringToSeqUnaryExpCG} node
	*/
	public A caseAStringToSeqUnaryExpCG(AStringToSeqUnaryExpCG node) throws AnalysisException
	{
		return defaultSUnaryExpCG(node);
	}


	/**
	* Called by the {@link AEnumSeqExpCG} node from {@link AEnumSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSeqExpCG} node
	*/
	public A caseAEnumSeqExpCG(AEnumSeqExpCG node) throws AnalysisException
	{
		return defaultSSeqExpCG(node);
	}


	/**
	* Called by the {@link ACompSeqExpCG} node from {@link ACompSeqExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSeqExpCG} node
	*/
	public A caseACompSeqExpCG(ACompSeqExpCG node) throws AnalysisException
	{
		return defaultSSeqExpCG(node);
	}


	/**
	* Called by the {@link AEnumSetExpCG} node from {@link AEnumSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumSetExpCG} node
	*/
	public A caseAEnumSetExpCG(AEnumSetExpCG node) throws AnalysisException
	{
		return defaultSSetExpCG(node);
	}


	/**
	* Called by the {@link ACompSetExpCG} node from {@link ACompSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompSetExpCG} node
	*/
	public A caseACompSetExpCG(ACompSetExpCG node) throws AnalysisException
	{
		return defaultSSetExpCG(node);
	}


	/**
	* Called by the {@link ARangeSetExpCG} node from {@link ARangeSetExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ARangeSetExpCG} node
	*/
	public A caseARangeSetExpCG(ARangeSetExpCG node) throws AnalysisException
	{
		return defaultSSetExpCG(node);
	}


	/**
	* Called by the {@link AEnumMapExpCG} node from {@link AEnumMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link AEnumMapExpCG} node
	*/
	public A caseAEnumMapExpCG(AEnumMapExpCG node) throws AnalysisException
	{
		return defaultSMapExpCG(node);
	}


	/**
	* Called by the {@link ACompMapExpCG} node from {@link ACompMapExpCG#apply(IAnalysis)}.
	* @param node the calling {@link ACompMapExpCG} node
	*/
	public A caseACompMapExpCG(ACompMapExpCG node) throws AnalysisException
	{
		return defaultSMapExpCG(node);
	}


	/**
	* Called by the {@link SBasicTypeCG} node from {@link SBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeCG} node
	*/
	public A defaultSBasicTypeCG(SBasicTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AObjectTypeCG} node from {@link AObjectTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AObjectTypeCG} node
	*/
	public A caseAObjectTypeCG(AObjectTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AVoidTypeCG} node from {@link AVoidTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AVoidTypeCG} node
	*/
	public A caseAVoidTypeCG(AVoidTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AClassTypeCG} node from {@link AClassTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AClassTypeCG} node
	*/
	public A caseAClassTypeCG(AClassTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AExternalTypeCG} node from {@link AExternalTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AExternalTypeCG} node
	*/
	public A caseAExternalTypeCG(AExternalTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link ARecordTypeCG} node from {@link ARecordTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARecordTypeCG} node
	*/
	public A caseARecordTypeCG(ARecordTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AStringTypeCG} node from {@link AStringTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AStringTypeCG} node
	*/
	public A caseAStringTypeCG(AStringTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link ATemplateTypeCG} node from {@link ATemplateTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATemplateTypeCG} node
	*/
	public A caseATemplateTypeCG(ATemplateTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link ATupleTypeCG} node from {@link ATupleTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATupleTypeCG} node
	*/
	public A caseATupleTypeCG(ATupleTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AMethodTypeCG} node from {@link AMethodTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMethodTypeCG} node
	*/
	public A caseAMethodTypeCG(AMethodTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SMapTypeCG} node from {@link SMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SMapTypeCG} node
	*/
	public A defaultSMapTypeCG(SMapTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SSetTypeCG} node from {@link SSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSetTypeCG} node
	*/
	public A defaultSSetTypeCG(SSetTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SSeqTypeCG} node from {@link SSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SSeqTypeCG} node
	*/
	public A defaultSSeqTypeCG(SSeqTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link SBasicTypeWrappersTypeCG} node from {@link SBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SBasicTypeWrappersTypeCG} node
	*/
	public A defaultSBasicTypeWrappersTypeCG(SBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AErrorTypeCG} node from {@link AErrorTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AErrorTypeCG} node
	*/
	public A caseAErrorTypeCG(AErrorTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AInterfaceTypeCG} node from {@link AInterfaceTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AInterfaceTypeCG} node
	*/
	public A caseAInterfaceTypeCG(AInterfaceTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AUnionTypeCG} node from {@link AUnionTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnionTypeCG} node
	*/
	public A caseAUnionTypeCG(AUnionTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AQuoteTypeCG} node from {@link AQuoteTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteTypeCG} node
	*/
	public A caseAQuoteTypeCG(AQuoteTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link AUnknownTypeCG} node from {@link AUnknownTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownTypeCG} node
	*/
	public A caseAUnknownTypeCG(AUnknownTypeCG node) throws AnalysisException
	{
		return defaultSTypeCG(node);
	}


	/**
	* Called by the {@link PExternalType} node from {@link PExternalType#apply(IAnalysis)}.
	* @param node the calling {@link PExternalType} node
	*/
	public A defaultPExternalType(PExternalType node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link AInfoExternalType} node from {@link AInfoExternalType#apply(IAnalysis)}.
	* @param node the calling {@link AInfoExternalType} node
	*/
	public A caseAInfoExternalType(AInfoExternalType node) throws AnalysisException
	{
		return defaultPExternalType(node);
	}


	/**
	* Called by the {@link AIntBasicTypeWrappersTypeCG} node from {@link AIntBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntBasicTypeWrappersTypeCG} node
	*/
	public A caseAIntBasicTypeWrappersTypeCG(AIntBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ANat1BasicTypeWrappersTypeCG} node from {@link ANat1BasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1BasicTypeWrappersTypeCG} node
	*/
	public A caseANat1BasicTypeWrappersTypeCG(ANat1BasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ANatBasicTypeWrappersTypeCG} node from {@link ANatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatBasicTypeWrappersTypeCG} node
	*/
	public A caseANatBasicTypeWrappersTypeCG(ANatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ARatBasicTypeWrappersTypeCG} node from {@link ARatBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatBasicTypeWrappersTypeCG} node
	*/
	public A caseARatBasicTypeWrappersTypeCG(ARatBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ARealBasicTypeWrappersTypeCG} node from {@link ARealBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealBasicTypeWrappersTypeCG} node
	*/
	public A caseARealBasicTypeWrappersTypeCG(ARealBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ACharBasicTypeWrappersTypeCG} node from {@link ACharBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeWrappersTypeCG} node
	*/
	public A caseACharBasicTypeWrappersTypeCG(ACharBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ABoolBasicTypeWrappersTypeCG} node from {@link ABoolBasicTypeWrappersTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeWrappersTypeCG} node
	*/
	public A caseABoolBasicTypeWrappersTypeCG(ABoolBasicTypeWrappersTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeWrappersTypeCG(node);
	}


	/**
	* Called by the {@link ASetSetTypeCG} node from {@link ASetSetTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASetSetTypeCG} node
	*/
	public A caseASetSetTypeCG(ASetSetTypeCG node) throws AnalysisException
	{
		return defaultSSetTypeCG(node);
	}


	/**
	* Called by the {@link ASeqSeqTypeCG} node from {@link ASeqSeqTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqTypeCG} node
	*/
	public A caseASeqSeqTypeCG(ASeqSeqTypeCG node) throws AnalysisException
	{
		return defaultSSeqTypeCG(node);
	}


	/**
	* Called by the {@link AMapMapTypeCG} node from {@link AMapMapTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapTypeCG} node
	*/
	public A caseAMapMapTypeCG(AMapMapTypeCG node) throws AnalysisException
	{
		return defaultSMapTypeCG(node);
	}


	/**
	* Called by the {@link SNumericBasicTypeCG} node from {@link SNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicTypeCG} node
	*/
	public A defaultSNumericBasicTypeCG(SNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ACharBasicTypeCG} node from {@link ACharBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicTypeCG} node
	*/
	public A caseACharBasicTypeCG(ACharBasicTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ABoolBasicTypeCG} node from {@link ABoolBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ABoolBasicTypeCG} node
	*/
	public A caseABoolBasicTypeCG(ABoolBasicTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeCG(node);
	}


	/**
	* Called by the {@link ATokenBasicTypeCG} node from {@link ATokenBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicTypeCG} node
	*/
	public A caseATokenBasicTypeCG(ATokenBasicTypeCG node) throws AnalysisException
	{
		return defaultSBasicTypeCG(node);
	}


	/**
	* Called by the {@link AIntNumericBasicTypeCG} node from {@link AIntNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicTypeCG} node
	*/
	public A caseAIntNumericBasicTypeCG(AIntNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ANat1NumericBasicTypeCG} node from {@link ANat1NumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANat1NumericBasicTypeCG} node
	*/
	public A caseANat1NumericBasicTypeCG(ANat1NumericBasicTypeCG node) throws AnalysisException
	{
		return defaultSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ANatNumericBasicTypeCG} node from {@link ANatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicTypeCG} node
	*/
	public A caseANatNumericBasicTypeCG(ANatNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ARatNumericBasicTypeCG} node from {@link ARatNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARatNumericBasicTypeCG} node
	*/
	public A caseARatNumericBasicTypeCG(ARatNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ARealNumericBasicTypeCG} node from {@link ARealNumericBasicTypeCG#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicTypeCG} node
	*/
	public A caseARealNumericBasicTypeCG(ARealNumericBasicTypeCG node) throws AnalysisException
	{
		return defaultSNumericBasicTypeCG(node);
	}


	/**
	* Called by the {@link ATraceDeclTermCG} node from {@link ATraceDeclTermCG#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDeclTermCG} node
	*/
	public A caseATraceDeclTermCG(ATraceDeclTermCG node) throws AnalysisException
	{
		return defaultSTermCG(node);
	}


	/**
	* Called by the {@link AInstanceTraceDeclCG} node from {@link AInstanceTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDeclCG} node
	*/
	public A caseAInstanceTraceDeclCG(AInstanceTraceDeclCG node) throws AnalysisException
	{
		return defaultSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDeclCG} node from {@link ALetBeStBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDeclCG} node
	*/
	public A caseALetBeStBindingTraceDeclCG(ALetBeStBindingTraceDeclCG node) throws AnalysisException
	{
		return defaultSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ALetDefBindingTraceDeclCG} node from {@link ALetDefBindingTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDeclCG} node
	*/
	public A caseALetDefBindingTraceDeclCG(ALetDefBindingTraceDeclCG node) throws AnalysisException
	{
		return defaultSTraceDeclCG(node);
	}


	/**
	* Called by the {@link ARepeatTraceDeclCG} node from {@link ARepeatTraceDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDeclCG} node
	*/
	public A caseARepeatTraceDeclCG(ARepeatTraceDeclCG node) throws AnalysisException
	{
		return defaultSTraceDeclCG(node);
	}


	/**
	* Called by the {@link AApplyExpTraceCoreDeclCG} node from {@link AApplyExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpTraceCoreDeclCG} node
	*/
	public A caseAApplyExpTraceCoreDeclCG(AApplyExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link ABracketedExpTraceCoreDeclCG} node from {@link ABracketedExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpTraceCoreDeclCG} node
	*/
	public A caseABracketedExpTraceCoreDeclCG(ABracketedExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link AConcurrentExpTraceCoreDeclCG} node from {@link AConcurrentExpTraceCoreDeclCG#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpTraceCoreDeclCG} node
	*/
	public A caseAConcurrentExpTraceCoreDeclCG(AConcurrentExpTraceCoreDeclCG node) throws AnalysisException
	{
		return defaultSTraceCoreDeclCG(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public A defaultINode(INode node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A defaultIToken(IToken node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}



	public abstract A createNewReturnValue(INode node) throws AnalysisException;


	public abstract A createNewReturnValue(Object node) throws AnalysisException;


}
