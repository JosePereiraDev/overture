/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.declarations;


import org.overture.codegen.cgast.types.ATemplateTypeCG;
import org.overture.codegen.cgast.analysis.intf.IQuestion;
import org.overture.codegen.cgast.declarations.AMethodDeclCG;
import org.overture.codegen.cgast.types.AMethodTypeCG;
import org.overture.codegen.cgast.declarations.AFormalParamLocalParamCG;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.analysis.intf.IQuestionAnswer;
import org.overture.codegen.cgast.NodeList;
import org.overture.codegen.cgast.INode;
import java.util.HashMap;
import org.overture.codegen.cgast.SDeclCGBase;
import java.util.List;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import java.util.Map;
import java.lang.Boolean;
import java.lang.Object;
import org.overture.codegen.cgast.SStmCG;
import java.lang.String;
import org.overture.codegen.ir.SourceNode;
import java.util.LinkedList;
import org.overture.codegen.cgast.analysis.intf.IAnswer;
import org.overture.codegen.cgast.SDeclCG;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AMethodDeclCG extends SDeclCGBase
{
	private static final long serialVersionUID = 1L;

	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private SDeclCG _preCond;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private SDeclCG _postCond;
	private String _access;
	private Boolean _async;
	private Boolean _static;
	private Boolean _abstract;
	private AMethodTypeCG _methodType;
	private String _name;
	private NodeList<AFormalParamLocalParamCG> _formalParams = new NodeList<AFormalParamLocalParamCG>(this);
	private Boolean _isConstructor;
	private NodeList<ATemplateTypeCG> _templateTypes = new NodeList<ATemplateTypeCG>(this);
	private SStmCG _body;

	/**
	 * Creates a new {@link AMethodDeclCG} node with no children.
	 */
	public AMethodDeclCG()
	{

	}


	/**
	* Creates a new {@code AMethodDeclCG TAG=method} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param access_ the {@link String} node for the {@code access} child of this {@link AMethodDeclCG} node
	* @param async_ the {@link Boolean} node for the {@code async} child of this {@link AMethodDeclCG} node
	* @param static_ the {@link Boolean} node for the {@code static} child of this {@link AMethodDeclCG} node
	* @param abstract_ the {@link Boolean} node for the {@code abstract} child of this {@link AMethodDeclCG} node
	* @param methodType_ the {@link AMethodTypeCG} node for the {@code methodType} child of this {@link AMethodDeclCG} node
	* @param name_ the {@link String} node for the {@code name} child of this {@link AMethodDeclCG} node
	* @param formalParams_ the {@link NodeList} node for the {@code formalParams} child of this {@link AMethodDeclCG} node
	* @param isConstructor_ the {@link Boolean} node for the {@code isConstructor} child of this {@link AMethodDeclCG} node
	* @param templateTypes_ the {@link NodeList} node for the {@code templateTypes} child of this {@link AMethodDeclCG} node
	* @param body_ the {@link SStmCG} node for the {@code body} child of this {@link AMethodDeclCG} node
	*/
	public AMethodDeclCG(SourceNode sourceNode_, String access_, Boolean async_, Boolean static_, Boolean abstract_, AMethodTypeCG methodType_, String name_, List<? extends AFormalParamLocalParamCG> formalParams_, Boolean isConstructor_, List<? extends ATemplateTypeCG> templateTypes_, SStmCG body_)
	{
		super(sourceNode_,null);
		this.setAccess(access_);
		this.setAsync(async_);
		this.setStatic(static_);
		this.setAbstract(abstract_);
		this.setMethodType(methodType_);
		this.setName(name_);
		this.setFormalParams(formalParams_);
		this.setIsConstructor(isConstructor_);
		this.setTemplateTypes(templateTypes_);
		this.setBody(body_);

	}


	/**
	* Creates a new {@code AMethodDeclCG} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param preCond_ the {@link SDeclCG} <b>graph</a> node for the {@code preCond} child of this {@link AMethodDeclCG} node.
	*  <i>The parent of this {@code preCond } will not be changed by adding it to this node.</i>
	* @param postCond_ the {@link SDeclCG} <b>graph</a> node for the {@code postCond} child of this {@link AMethodDeclCG} node.
	*  <i>The parent of this {@code postCond } will not be changed by adding it to this node.</i>
	* @param access_ the {@link String} node for the {@code access} child of this {@link AMethodDeclCG} node
	* @param async_ the {@link Boolean} node for the {@code async} child of this {@link AMethodDeclCG} node
	* @param static_ the {@link Boolean} node for the {@code static} child of this {@link AMethodDeclCG} node
	* @param abstract_ the {@link Boolean} node for the {@code abstract} child of this {@link AMethodDeclCG} node
	* @param methodType_ the {@link AMethodTypeCG} node for the {@code methodType} child of this {@link AMethodDeclCG} node
	* @param name_ the {@link String} node for the {@code name} child of this {@link AMethodDeclCG} node
	* @param formalParams_ the {@link NodeList} node for the {@code formalParams} child of this {@link AMethodDeclCG} node
	* @param isConstructor_ the {@link Boolean} node for the {@code isConstructor} child of this {@link AMethodDeclCG} node
	* @param templateTypes_ the {@link NodeList} node for the {@code templateTypes} child of this {@link AMethodDeclCG} node
	* @param body_ the {@link SStmCG} node for the {@code body} child of this {@link AMethodDeclCG} node
	*/
	public AMethodDeclCG(SourceNode sourceNode_, Object tag_, SDeclCG preCond_, SDeclCG postCond_, String access_, Boolean async_, Boolean static_, Boolean abstract_, AMethodTypeCG methodType_, String name_, List<? extends AFormalParamLocalParamCG> formalParams_, Boolean isConstructor_, List<? extends ATemplateTypeCG> templateTypes_, SStmCG body_)
	{
		super(sourceNode_,tag_);
		this.setPreCond(preCond_);
		this.setPostCond(postCond_);
		this.setAccess(access_);
		this.setAsync(async_);
		this.setStatic(static_);
		this.setAbstract(abstract_);
		this.setMethodType(methodType_);
		this.setName(name_);
		this.setFormalParams(formalParams_);
		this.setIsConstructor(isConstructor_);
		this.setTemplateTypes(templateTypes_);
		this.setBody(body_);

	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AMethodDeclCG)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Returns a deep clone of this {@link AMethodDeclCG} node.
	 * @return a deep clone of this {@link AMethodDeclCG} node
	 */
	public AMethodDeclCG clone()
	{
		return new AMethodDeclCG(
			_sourceNode,
			_tag,
			_preCond,
			_postCond,
			_access,
			_async,
			_static,
			_abstract,
			cloneNode(_methodType),
			_name,
			cloneList(_formalParams),
			_isConstructor,
			cloneList(_templateTypes),
			cloneNode(_body)
		);
	}


	/**
	 * Creates a deep clone of this {@link AMethodDeclCG} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AMethodDeclCG} node
	 */
	public AMethodDeclCG clone(Map<INode,INode> oldToNewMap)
	{
		AMethodDeclCG node = new AMethodDeclCG(
			_sourceNode,
			_tag,
			_preCond,
			_postCond,
			_access,
			_async,
			_static,
			_abstract,
			cloneNode(_methodType, oldToNewMap),
			_name,
			cloneList(_formalParams, oldToNewMap),
			_isConstructor,
			cloneList(_templateTypes, oldToNewMap),
			cloneNode(_body, oldToNewMap)
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_preCond",this._preCond);
		fields.put("_postCond",this._postCond);
		fields.put("_access",this._access);
		fields.put("_async",this._async);
		fields.put("_static",this._static);
		fields.put("_abstract",this._abstract);
		fields.put("_methodType",this._methodType);
		fields.put("_name",this._name);
		fields.put("_formalParams",this._formalParams);
		fields.put("_isConstructor",this._isConstructor);
		fields.put("_templateTypes",this._templateTypes);
		fields.put("_body",this._body);
		return fields;
	}



	public String toString()
	{
		return "" + _name;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AMethodDeclCG} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AMethodDeclCG} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AMethodDeclCG} node
	 */
	public void removeChild(INode child)
	{
		if (this._preCond == child) {
			return;
		}

		if (this._postCond == child) {
			return;
		}

		if (this._methodType == child) {
			this._methodType = null;
			return;
		}

		if (this._formalParams.remove(child)) {
				return;
		}
		if (this._templateTypes.remove(child)) {
				return;
		}
		if (this._body == child) {
			this._body = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Sets the {@code _preCond} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _preCond} child of this {@link AMethodDeclCG} node
	*/
	public void setPreCond(SDeclCG value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._preCond = value;

	}


	/**
	 * @return the {@link SDeclCG} node which is the {@code _preCond} child of this {@link AMethodDeclCG} node
	*/
	public SDeclCG getPreCond()
	{
		return this._preCond;
	}


	/**
	 * Sets the {@code _postCond} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _postCond} child of this {@link AMethodDeclCG} node
	*/
	public void setPostCond(SDeclCG value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._postCond = value;

	}


	/**
	 * @return the {@link SDeclCG} node which is the {@code _postCond} child of this {@link AMethodDeclCG} node
	*/
	public SDeclCG getPostCond()
	{
		return this._postCond;
	}


	/**
	 * Sets the {@code _access} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _access} child of this {@link AMethodDeclCG} node
	*/
	public void setAccess(String value)
	{
		this._access = value;
	}


	/**
	 * @return the {@link String} node which is the {@code _access} child of this {@link AMethodDeclCG} node
	*/
	public String getAccess()
	{
		return this._access;
	}


	/**
	 * Sets the {@code _async} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _async} child of this {@link AMethodDeclCG} node
	*/
	public void setAsync(Boolean value)
	{
		this._async = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _async} child of this {@link AMethodDeclCG} node
	*/
	public Boolean getAsync()
	{
		return this._async;
	}


	/**
	 * Sets the {@code _static} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _static} child of this {@link AMethodDeclCG} node
	*/
	public void setStatic(Boolean value)
	{
		this._static = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _static} child of this {@link AMethodDeclCG} node
	*/
	public Boolean getStatic()
	{
		return this._static;
	}


	/**
	 * Sets the {@code _abstract} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _abstract} child of this {@link AMethodDeclCG} node
	*/
	public void setAbstract(Boolean value)
	{
		this._abstract = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _abstract} child of this {@link AMethodDeclCG} node
	*/
	public Boolean getAbstract()
	{
		return this._abstract;
	}


	/**
	 * Sets the {@code _methodType} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _methodType} child of this {@link AMethodDeclCG} node
	*/
	public void setMethodType(AMethodTypeCG value)
	{
		if (this._methodType != null) {
			this._methodType.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._methodType = value;

	}


	/**
	 * @return the {@link AMethodTypeCG} node which is the {@code _methodType} child of this {@link AMethodDeclCG} node
	*/
	public AMethodTypeCG getMethodType()
	{
		return this._methodType;
	}


	/**
	 * Sets the {@code _name} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _name} child of this {@link AMethodDeclCG} node
	*/
	public void setName(String value)
	{
		this._name = value;
	}


	/**
	 * @return the {@link String} node which is the {@code _name} child of this {@link AMethodDeclCG} node
	*/
	public String getName()
	{
		return this._name;
	}


	/**
	 * Sets the {@code _formalParams} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _formalParams} child of this {@link AMethodDeclCG} node
	*/
	public void setFormalParams(List<? extends AFormalParamLocalParamCG> value)
	{
		if (this._formalParams.equals(value)) {
			return;
		}
		this._formalParams.clear();
		if (value != null) {
			this._formalParams.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _formalParams} child of this {@link AMethodDeclCG} node
	*/
	public LinkedList<AFormalParamLocalParamCG> getFormalParams()
	{
		return this._formalParams;
	}


	/**
	 * Sets the {@code _isConstructor} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _isConstructor} child of this {@link AMethodDeclCG} node
	*/
	public void setIsConstructor(Boolean value)
	{
		this._isConstructor = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _isConstructor} child of this {@link AMethodDeclCG} node
	*/
	public Boolean getIsConstructor()
	{
		return this._isConstructor;
	}


	/**
	 * Sets the {@code _templateTypes} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _templateTypes} child of this {@link AMethodDeclCG} node
	*/
	public void setTemplateTypes(List<? extends ATemplateTypeCG> value)
	{
		if (this._templateTypes.equals(value)) {
			return;
		}
		this._templateTypes.clear();
		if (value != null) {
			this._templateTypes.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _templateTypes} child of this {@link AMethodDeclCG} node
	*/
	public LinkedList<ATemplateTypeCG> getTemplateTypes()
	{
		return this._templateTypes;
	}


	/**
	 * Sets the {@code _body} child of this {@link AMethodDeclCG} node.
	 * @param value the new {@code _body} child of this {@link AMethodDeclCG} node
	*/
	public void setBody(SStmCG value)
	{
		if (this._body != null) {
			this._body.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._body = value;

	}


	/**
	 * @return the {@link SStmCG} node which is the {@code _body} child of this {@link AMethodDeclCG} node
	*/
	public SStmCG getBody()
	{
		return this._body;
	}


	/**
	* Calls the {@link IAnalysis#caseAMethodDeclCG(AMethodDeclCG)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AMethodDeclCG} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis) throws AnalysisException
	{
		analysis.caseAMethodDeclCG(this);
	}


	/**
	* Calls the {@link IAnswer#caseAMethodDeclCG(AMethodDeclCG)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AMethodDeclCG} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAMethodDeclCG(this);
	}


	/**
	* Calls the {@link IQuestion#caseAMethodDeclCG(AMethodDeclCG)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AMethodDeclCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAMethodDeclCG(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAMethodDeclCG(AMethodDeclCG)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AMethodDeclCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAMethodDeclCG(this,question);
	}



}
