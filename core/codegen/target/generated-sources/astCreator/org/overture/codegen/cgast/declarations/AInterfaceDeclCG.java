/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.declarations;


import org.overture.codegen.cgast.types.ATemplateTypeCG;
import org.overture.codegen.cgast.analysis.intf.IQuestion;
import org.overture.codegen.cgast.declarations.AMethodDeclCG;
import org.overture.codegen.cgast.declarations.AFieldDeclCG;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.analysis.intf.IQuestionAnswer;
import org.overture.codegen.cgast.NodeList;
import org.overture.codegen.cgast.INode;
import java.util.HashMap;
import org.overture.codegen.cgast.SDeclCGBase;
import org.overture.codegen.cgast.declarations.AInterfaceDeclCG;
import java.util.List;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import java.util.Map;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import org.overture.codegen.ir.SourceNode;
import java.util.LinkedList;
import org.overture.codegen.cgast.analysis.intf.IAnswer;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AInterfaceDeclCG extends SDeclCGBase
{
	private static final long serialVersionUID = 1L;

	private NodeList<ATemplateTypeCG> _templateTypes = new NodeList<ATemplateTypeCG>(this);
	private String _package;
	private String _name;
	private NodeList<AFieldDeclCG> _fields = new NodeList<AFieldDeclCG>(this);
	private NodeList<AMethodDeclCG> _methodSignatures = new NodeList<AMethodDeclCG>(this);

	/**
	* Creates a new {@code AInterfaceDeclCG} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param templateTypes_ the {@link NodeList} node for the {@code templateTypes} child of this {@link AInterfaceDeclCG} node
	* @param package_ the {@link String} node for the {@code package} child of this {@link AInterfaceDeclCG} node
	* @param name_ the {@link String} node for the {@code name} child of this {@link AInterfaceDeclCG} node
	* @param fields_ the {@link NodeList} node for the {@code fields} child of this {@link AInterfaceDeclCG} node
	* @param methodSignatures_ the {@link NodeList} node for the {@code methodSignatures} child of this {@link AInterfaceDeclCG} node
	*/
	public AInterfaceDeclCG(SourceNode sourceNode_, Object tag_, List<? extends ATemplateTypeCG> templateTypes_, String package_, String name_, List<? extends AFieldDeclCG> fields_, List<? extends AMethodDeclCG> methodSignatures_)
	{
		super(sourceNode_,tag_);
		this.setTemplateTypes(templateTypes_);
		this.setPackage(package_);
		this.setName(name_);
		this.setFields(fields_);
		this.setMethodSignatures(methodSignatures_);

	}


	/**
	 * Creates a new {@link AInterfaceDeclCG} node with no children.
	 */
	public AInterfaceDeclCG()
	{

	}


	/**
	* Creates a new {@code AInterfaceDeclCG TAG=interface} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param templateTypes_ the {@link NodeList} node for the {@code templateTypes} child of this {@link AInterfaceDeclCG} node
	* @param package_ the {@link String} node for the {@code package} child of this {@link AInterfaceDeclCG} node
	* @param name_ the {@link String} node for the {@code name} child of this {@link AInterfaceDeclCG} node
	* @param fields_ the {@link NodeList} node for the {@code fields} child of this {@link AInterfaceDeclCG} node
	* @param methodSignatures_ the {@link NodeList} node for the {@code methodSignatures} child of this {@link AInterfaceDeclCG} node
	*/
	public AInterfaceDeclCG(SourceNode sourceNode_, List<? extends ATemplateTypeCG> templateTypes_, String package_, String name_, List<? extends AFieldDeclCG> fields_, List<? extends AMethodDeclCG> methodSignatures_)
	{
		super(sourceNode_,null);
		this.setTemplateTypes(templateTypes_);
		this.setPackage(package_);
		this.setName(name_);
		this.setFields(fields_);
		this.setMethodSignatures(methodSignatures_);

	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AInterfaceDeclCG} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AInterfaceDeclCG} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AInterfaceDeclCG} node
	 */
	public void removeChild(INode child)
	{
		if (this._templateTypes.remove(child)) {
				return;
		}
		if (this._fields.remove(child)) {
				return;
		}
		if (this._methodSignatures.remove(child)) {
				return;
		}
		throw new RuntimeException("Not a child.");
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}



	public String toString()
	{
		return (_templateTypes!=null?_templateTypes.toString():this.getClass().getSimpleName())+ (_package!=null?_package.toString():this.getClass().getSimpleName())+ (_name!=null?_name.toString():this.getClass().getSimpleName())+ (_fields!=null?_fields.toString():this.getClass().getSimpleName())+ (_methodSignatures!=null?_methodSignatures.toString():this.getClass().getSimpleName());
	}


	/**
	 * Returns a deep clone of this {@link AInterfaceDeclCG} node.
	 * @return a deep clone of this {@link AInterfaceDeclCG} node
	 */
	public AInterfaceDeclCG clone()
	{
		return new AInterfaceDeclCG(
			_sourceNode,
			_tag,
			cloneList(_templateTypes),
			_package,
			_name,
			cloneList(_fields),
			cloneList(_methodSignatures)
		);
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AInterfaceDeclCG)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_templateTypes",this._templateTypes);
		fields.put("_package",this._package);
		fields.put("_name",this._name);
		fields.put("_fields",this._fields);
		fields.put("_methodSignatures",this._methodSignatures);
		return fields;
	}


	/**
	 * Creates a deep clone of this {@link AInterfaceDeclCG} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AInterfaceDeclCG} node
	 */
	public AInterfaceDeclCG clone(Map<INode,INode> oldToNewMap)
	{
		AInterfaceDeclCG node = new AInterfaceDeclCG(
			_sourceNode,
			_tag,
			cloneList(_templateTypes, oldToNewMap),
			_package,
			_name,
			cloneList(_fields, oldToNewMap),
			cloneList(_methodSignatures, oldToNewMap)
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Sets the {@code _templateTypes} child of this {@link AInterfaceDeclCG} node.
	 * @param value the new {@code _templateTypes} child of this {@link AInterfaceDeclCG} node
	*/
	public void setTemplateTypes(List<? extends ATemplateTypeCG> value)
	{
		if (this._templateTypes.equals(value)) {
			return;
		}
		this._templateTypes.clear();
		if (value != null) {
			this._templateTypes.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _templateTypes} child of this {@link AInterfaceDeclCG} node
	*/
	public LinkedList<ATemplateTypeCG> getTemplateTypes()
	{
		return this._templateTypes;
	}


	/**
	 * Sets the {@code _package} child of this {@link AInterfaceDeclCG} node.
	 * @param value the new {@code _package} child of this {@link AInterfaceDeclCG} node
	*/
	public void setPackage(String value)
	{
		this._package = value;
	}


	/**
	 * @return the {@link String} node which is the {@code _package} child of this {@link AInterfaceDeclCG} node
	*/
	public String getPackage()
	{
		return this._package;
	}


	/**
	 * Sets the {@code _name} child of this {@link AInterfaceDeclCG} node.
	 * @param value the new {@code _name} child of this {@link AInterfaceDeclCG} node
	*/
	public void setName(String value)
	{
		this._name = value;
	}


	/**
	 * @return the {@link String} node which is the {@code _name} child of this {@link AInterfaceDeclCG} node
	*/
	public String getName()
	{
		return this._name;
	}


	/**
	 * Sets the {@code _fields} child of this {@link AInterfaceDeclCG} node.
	 * @param value the new {@code _fields} child of this {@link AInterfaceDeclCG} node
	*/
	public void setFields(List<? extends AFieldDeclCG> value)
	{
		if (this._fields.equals(value)) {
			return;
		}
		this._fields.clear();
		if (value != null) {
			this._fields.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _fields} child of this {@link AInterfaceDeclCG} node
	*/
	public LinkedList<AFieldDeclCG> getFields()
	{
		return this._fields;
	}


	/**
	 * Sets the {@code _methodSignatures} child of this {@link AInterfaceDeclCG} node.
	 * @param value the new {@code _methodSignatures} child of this {@link AInterfaceDeclCG} node
	*/
	public void setMethodSignatures(List<? extends AMethodDeclCG> value)
	{
		if (this._methodSignatures.equals(value)) {
			return;
		}
		this._methodSignatures.clear();
		if (value != null) {
			this._methodSignatures.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _methodSignatures} child of this {@link AInterfaceDeclCG} node
	*/
	public LinkedList<AMethodDeclCG> getMethodSignatures()
	{
		return this._methodSignatures;
	}


	/**
	* Calls the {@link IAnalysis#caseAInterfaceDeclCG(AInterfaceDeclCG)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AInterfaceDeclCG} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis) throws AnalysisException
	{
		analysis.caseAInterfaceDeclCG(this);
	}


	/**
	* Calls the {@link IAnswer#caseAInterfaceDeclCG(AInterfaceDeclCG)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AInterfaceDeclCG} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAInterfaceDeclCG(this);
	}


	/**
	* Calls the {@link IQuestion#caseAInterfaceDeclCG(AInterfaceDeclCG)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AInterfaceDeclCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAInterfaceDeclCG(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAInterfaceDeclCG(AInterfaceDeclCG)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AInterfaceDeclCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAInterfaceDeclCG(this,question);
	}



}
