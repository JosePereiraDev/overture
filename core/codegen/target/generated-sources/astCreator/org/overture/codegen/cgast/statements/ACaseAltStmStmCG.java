/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.statements;


import org.overture.codegen.cgast.analysis.intf.IQuestion;
import org.overture.codegen.cgast.statements.SAltStmStmBase;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.SPatternCG;
import org.overture.codegen.cgast.analysis.intf.IQuestionAnswer;
import org.overture.codegen.cgast.INode;
import java.util.HashMap;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import java.util.Map;
import org.overture.codegen.cgast.STypeCG;
import java.lang.Boolean;
import org.overture.codegen.cgast.SStmCG;
import java.lang.Object;
import java.lang.String;
import org.overture.codegen.ir.SourceNode;
import org.overture.codegen.cgast.statements.ACaseAltStmStmCG;
import org.overture.codegen.cgast.analysis.intf.IAnswer;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class ACaseAltStmStmCG extends SAltStmStmBase
{
	private static final long serialVersionUID = 1L;

	private SPatternCG _pattern;
	private SStmCG _result;
	private STypeCG _patternType;

	/**
	 * Creates a new {@link ACaseAltStmStmCG} node with no children.
	 */
	public ACaseAltStmStmCG()
	{

	}


	/**
	* Creates a new {@code ACaseAltStmStmCG TAG=case} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param pattern_ the {@link SPatternCG} node for the {@code pattern} child of this {@link ACaseAltStmStmCG} node
	* @param result_ the {@link SStmCG} node for the {@code result} child of this {@link ACaseAltStmStmCG} node
	* @param patternType_ the {@link STypeCG} node for the {@code patternType} child of this {@link ACaseAltStmStmCG} node
	*/
	public ACaseAltStmStmCG(SourceNode sourceNode_, SPatternCG pattern_, SStmCG result_, STypeCG patternType_)
	{
		super(sourceNode_,null);
		this.setPattern(pattern_);
		this.setResult(result_);
		this.setPatternType(patternType_);

	}


	/**
	* Creates a new {@code ACaseAltStmStmCG} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param pattern_ the {@link SPatternCG} node for the {@code pattern} child of this {@link ACaseAltStmStmCG} node
	* @param result_ the {@link SStmCG} node for the {@code result} child of this {@link ACaseAltStmStmCG} node
	* @param patternType_ the {@link STypeCG} node for the {@code patternType} child of this {@link ACaseAltStmStmCG} node
	*/
	public ACaseAltStmStmCG(SourceNode sourceNode_, Object tag_, SPatternCG pattern_, SStmCG result_, STypeCG patternType_)
	{
		super(sourceNode_,tag_);
		this.setPattern(pattern_);
		this.setResult(result_);
		this.setPatternType(patternType_);

	}


	/**
	 * Creates a deep clone of this {@link ACaseAltStmStmCG} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link ACaseAltStmStmCG} node
	 */
	public ACaseAltStmStmCG clone(Map<INode,INode> oldToNewMap)
	{
		ACaseAltStmStmCG node = new ACaseAltStmStmCG(
			_sourceNode,
			_tag,
			cloneNode(_pattern, oldToNewMap),
			cloneNode(_result, oldToNewMap),
			cloneNode(_patternType, oldToNewMap)
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link ACaseAltStmStmCG} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link ACaseAltStmStmCG} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link ACaseAltStmStmCG} node
	 */
	public void removeChild(INode child)
	{
		if (this._pattern == child) {
			this._pattern = null;
			return;
		}

		if (this._result == child) {
			this._result = null;
			return;
		}

		if (this._patternType == child) {
			this._patternType = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}



	public String toString()
	{
		return (_pattern!=null?_pattern.toString():this.getClass().getSimpleName())+ (_result!=null?_result.toString():this.getClass().getSimpleName())+ (_patternType!=null?_patternType.toString():this.getClass().getSimpleName());
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof ACaseAltStmStmCG)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_pattern",this._pattern);
		fields.put("_result",this._result);
		fields.put("_patternType",this._patternType);
		return fields;
	}


	/**
	 * Returns a deep clone of this {@link ACaseAltStmStmCG} node.
	 * @return a deep clone of this {@link ACaseAltStmStmCG} node
	 */
	public ACaseAltStmStmCG clone()
	{
		return new ACaseAltStmStmCG(
			_sourceNode,
			_tag,
			cloneNode(_pattern),
			cloneNode(_result),
			cloneNode(_patternType)
		);
	}


	/**
	 * Sets the {@code _pattern} child of this {@link ACaseAltStmStmCG} node.
	 * @param value the new {@code _pattern} child of this {@link ACaseAltStmStmCG} node
	*/
	public void setPattern(SPatternCG value)
	{
		if (this._pattern != null) {
			this._pattern.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._pattern = value;

	}


	/**
	 * @return the {@link SPatternCG} node which is the {@code _pattern} child of this {@link ACaseAltStmStmCG} node
	*/
	public SPatternCG getPattern()
	{
		return this._pattern;
	}


	/**
	 * Sets the {@code _result} child of this {@link ACaseAltStmStmCG} node.
	 * @param value the new {@code _result} child of this {@link ACaseAltStmStmCG} node
	*/
	public void setResult(SStmCG value)
	{
		if (this._result != null) {
			this._result.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._result = value;

	}


	/**
	 * @return the {@link SStmCG} node which is the {@code _result} child of this {@link ACaseAltStmStmCG} node
	*/
	public SStmCG getResult()
	{
		return this._result;
	}


	/**
	 * Sets the {@code _patternType} child of this {@link ACaseAltStmStmCG} node.
	 * @param value the new {@code _patternType} child of this {@link ACaseAltStmStmCG} node
	*/
	public void setPatternType(STypeCG value)
	{
		if (this._patternType != null) {
			this._patternType.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._patternType = value;

	}


	/**
	 * @return the {@link STypeCG} node which is the {@code _patternType} child of this {@link ACaseAltStmStmCG} node
	*/
	public STypeCG getPatternType()
	{
		return this._patternType;
	}


	/**
	* Calls the {@link IAnalysis#caseACaseAltStmStmCG(ACaseAltStmStmCG)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link ACaseAltStmStmCG} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis) throws AnalysisException
	{
		analysis.caseACaseAltStmStmCG(this);
	}


	/**
	* Calls the {@link IAnswer#caseACaseAltStmStmCG(ACaseAltStmStmCG)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link ACaseAltStmStmCG} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseACaseAltStmStmCG(this);
	}


	/**
	* Calls the {@link IQuestion#caseACaseAltStmStmCG(ACaseAltStmStmCG)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link ACaseAltStmStmCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseACaseAltStmStmCG(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseACaseAltStmStmCG(ACaseAltStmStmCG)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link ACaseAltStmStmCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseACaseAltStmStmCG(this,question);
	}



}
