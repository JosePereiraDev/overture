/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.codegen.cgast.statements;


import org.overture.codegen.cgast.statements.ABlockStmCG;
import org.overture.codegen.cgast.analysis.intf.IQuestion;
import org.overture.codegen.cgast.analysis.AnalysisException;
import org.overture.codegen.cgast.analysis.intf.IQuestionAnswer;
import org.overture.codegen.cgast.NodeList;
import org.overture.codegen.cgast.SStmCGBase;
import org.overture.codegen.cgast.INode;
import java.util.HashMap;
import org.overture.codegen.cgast.declarations.AVarDeclCG;
import java.util.List;
import org.overture.codegen.cgast.analysis.intf.IAnalysis;
import java.util.Map;
import java.lang.Boolean;
import java.lang.Object;
import org.overture.codegen.cgast.SStmCG;
import java.lang.String;
import org.overture.codegen.ir.SourceNode;
import java.util.LinkedList;
import org.overture.codegen.cgast.analysis.intf.IAnswer;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class ABlockStmCG extends SStmCGBase
{
	private static final long serialVersionUID = 1L;

	private Boolean _scoped;
	private NodeList<AVarDeclCG> _localDefs = new NodeList<AVarDeclCG>(this);
	private NodeList<SStmCG> _statements = new NodeList<SStmCG>(this);

	/**
	 * Creates a new {@link ABlockStmCG} node with no children.
	 */
	public ABlockStmCG()
	{

	}


	/**
	* Creates a new {@code ABlockStmCG} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param scoped_ the {@link Boolean} node for the {@code scoped} child of this {@link ABlockStmCG} node
	* @param localDefs_ the {@link NodeList} node for the {@code localDefs} child of this {@link ABlockStmCG} node
	* @param statements_ the {@link NodeList} node for the {@code statements} child of this {@link ABlockStmCG} node
	*/
	public ABlockStmCG(SourceNode sourceNode_, Object tag_, Boolean scoped_, List<? extends AVarDeclCG> localDefs_, List<? extends SStmCG> statements_)
	{
		super(sourceNode_,tag_);
		this.setScoped(scoped_);
		this.setLocalDefs(localDefs_);
		this.setStatements(statements_);

	}


	/**
	* Creates a new {@code ABlockStmCG TAG=block} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param scoped_ the {@link Boolean} node for the {@code scoped} child of this {@link ABlockStmCG} node
	* @param localDefs_ the {@link NodeList} node for the {@code localDefs} child of this {@link ABlockStmCG} node
	* @param statements_ the {@link NodeList} node for the {@code statements} child of this {@link ABlockStmCG} node
	*/
	public ABlockStmCG(SourceNode sourceNode_, Boolean scoped_, List<? extends AVarDeclCG> localDefs_, List<? extends SStmCG> statements_)
	{
		super(sourceNode_,null);
		this.setScoped(scoped_);
		this.setLocalDefs(localDefs_);
		this.setStatements(statements_);

	}


	/**
	 * Creates a deep clone of this {@link ABlockStmCG} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link ABlockStmCG} node
	 */
	public ABlockStmCG clone(Map<INode,INode> oldToNewMap)
	{
		ABlockStmCG node = new ABlockStmCG(
			_sourceNode,
			_tag,
			_scoped,
			cloneList(_localDefs, oldToNewMap),
			cloneList(_statements, oldToNewMap)
		);
		oldToNewMap.put(this, node);
		return node;
	}



	public String toString()
	{
		return (_scoped!=null?_scoped.toString():this.getClass().getSimpleName())+ (_localDefs!=null?_localDefs.toString():this.getClass().getSimpleName())+ (_statements!=null?_statements.toString():this.getClass().getSimpleName());
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Returns a deep clone of this {@link ABlockStmCG} node.
	 * @return a deep clone of this {@link ABlockStmCG} node
	 */
	public ABlockStmCG clone()
	{
		return new ABlockStmCG(
			_sourceNode,
			_tag,
			_scoped,
			cloneList(_localDefs),
			cloneList(_statements)
		);
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_scoped",this._scoped);
		fields.put("_localDefs",this._localDefs);
		fields.put("_statements",this._statements);
		return fields;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link ABlockStmCG} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link ABlockStmCG} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link ABlockStmCG} node
	 */
	public void removeChild(INode child)
	{
		if (this._localDefs.remove(child)) {
				return;
		}
		if (this._statements.remove(child)) {
				return;
		}
		throw new RuntimeException("Not a child.");
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof ABlockStmCG)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Sets the {@code _scoped} child of this {@link ABlockStmCG} node.
	 * @param value the new {@code _scoped} child of this {@link ABlockStmCG} node
	*/
	public void setScoped(Boolean value)
	{
		this._scoped = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _scoped} child of this {@link ABlockStmCG} node
	*/
	public Boolean getScoped()
	{
		return this._scoped;
	}


	/**
	 * Sets the {@code _localDefs} child of this {@link ABlockStmCG} node.
	 * @param value the new {@code _localDefs} child of this {@link ABlockStmCG} node
	*/
	public void setLocalDefs(List<? extends AVarDeclCG> value)
	{
		if (this._localDefs.equals(value)) {
			return;
		}
		this._localDefs.clear();
		if (value != null) {
			this._localDefs.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _localDefs} child of this {@link ABlockStmCG} node
	*/
	public LinkedList<AVarDeclCG> getLocalDefs()
	{
		return this._localDefs;
	}


	/**
	 * Sets the {@code _statements} child of this {@link ABlockStmCG} node.
	 * @param value the new {@code _statements} child of this {@link ABlockStmCG} node
	*/
	public void setStatements(List<? extends SStmCG> value)
	{
		if (this._statements.equals(value)) {
			return;
		}
		this._statements.clear();
		if (value != null) {
			this._statements.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _statements} child of this {@link ABlockStmCG} node
	*/
	public LinkedList<SStmCG> getStatements()
	{
		return this._statements;
	}


	/**
	* Calls the {@link IAnalysis#caseABlockStmCG(ABlockStmCG)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link ABlockStmCG} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis) throws AnalysisException
	{
		analysis.caseABlockStmCG(this);
	}


	/**
	* Calls the {@link IAnswer#caseABlockStmCG(ABlockStmCG)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link ABlockStmCG} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseABlockStmCG(this);
	}


	/**
	* Calls the {@link IQuestion#caseABlockStmCG(ABlockStmCG)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link ABlockStmCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseABlockStmCG(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseABlockStmCG(ABlockStmCG)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link ABlockStmCG} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseABlockStmCG(this,question);
	}



}
