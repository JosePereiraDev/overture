import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public quotes.T1 quotePatternOp(final quotes.T1 quotePattern_1) {
        Boolean success_1 = Utils.equals(quotePattern_1, quotes.T1.getInstance());

        if (!(success_1)) {
            throw new RuntimeException("Quote pattern match failed");
        }

        quotes.T1 quotePattern_2 = quotes.T1.getInstance();
        Boolean success_2 = Utils.equals(quotePattern_2, quotes.T1.getInstance());

        if (!(success_2)) {
            throw new RuntimeException("Quote pattern match failed");
        }

        return quotes.T1.getInstance();
    }

    public static quotes.T1 quotePatternFun(final quotes.T1 quotePattern_3) {
        Boolean success_3 = Utils.equals(quotePattern_3, quotes.T1.getInstance());

        if (!(success_3)) {
            throw new RuntimeException("Quote pattern match failed");
        }

        quotes.T1 quotePattern_4 = quotes.T1.getInstance();
        Boolean success_4 = Utils.equals(quotePattern_4, quotes.T1.getInstance());

        if (!(success_4)) {
            throw new RuntimeException("Quote pattern match failed");
        }

        return quotes.T1.getInstance();
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return SeqUtil.seq(new A().quotePatternOp(quotes.T1.getInstance()),
            A.quotePatternFun(quotes.T1.getInstance()));
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
*Quotes*
T1
##########
