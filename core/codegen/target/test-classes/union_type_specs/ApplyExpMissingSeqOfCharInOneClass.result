import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public VDMSeq xs = SeqUtil.seq('h');

    public A() {
    }

    public String toString() {
        return "A{" + "xs := " + Utils.toString(xs) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        VDMSeq xs = SeqUtil.seq(new A(), new A());

        {
            VDMSeq str = SeqUtil.seq();

            for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext();) {
                Object x = (Object) iterator_1.next();
                Character apply_1 = null;

                if (x instanceof A) {
                    apply_1 = ((Character) ((A) x).xs.get(Utils.index(1L)));
                } else {
                    throw new RuntimeException("Missing member: xs");
                }

                str = SeqUtil.conc(Utils.clone(str), SeqUtil.seq(apply_1));
            }

            return Utils.clone(str);
        }
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
