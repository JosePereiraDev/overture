import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public VDMSeq xs = SeqUtil.seq(5L);

    public A() {
    }

    public String toString() {
        return "A{" + "xs := " + Utils.toString(xs) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Number Run() {
        VDMSeq xs = SeqUtil.seq(new A(), new A());

        {
            Number sum = 0L;

            for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext();) {
                Object x = (Object) iterator_1.next();
                Number apply_1 = null;

                if (x instanceof A) {
                    apply_1 = ((Number) ((A) x).xs.get(Utils.index(1L)));
                } else {
                    throw new RuntimeException("Missing member: xs");
                }

                sum = sum.longValue() + apply_1.longValue();
            }

            return sum;
        }
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
