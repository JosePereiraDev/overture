import org.overture.codegen.runtime.*;

import java.util.*;


public class ThreadClass extends Thread implements EvaluatePP {
    public volatile Number x = 0L;
    public volatile Sentinel sentinel;

    public ThreadClass() {
        sentinel = new ThreadClass_sentinel(this);
    }

    public void setX() {
        sentinel.entering(((ThreadClass_sentinel) sentinel).setX);

        try {
            x = 3L;
        } finally {
            sentinel.leaving(((ThreadClass_sentinel) sentinel).setX);
        }
    }

    public void subX() {
        sentinel.entering(((ThreadClass_sentinel) sentinel).subX);

        try {
            x = x.longValue() - 1L;
        } finally {
            sentinel.leaving(((ThreadClass_sentinel) sentinel).subX);
        }
    }

    public String toString() {
        return "ThreadClass{" + "x := " + Utils.toString(x) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (fnr.longValue() == 0L) {
            return (sentinel.act[((ThreadClass_sentinel) sentinel).setX] == 0L) &&
            (x.longValue() == 0L) &&
            ((sentinel.active[((ThreadClass_sentinel) sentinel).setX] +
            sentinel.active[((ThreadClass_sentinel) sentinel).subX]) == 0L);
        } else if (fnr.longValue() == 1L) {
            return ((sentinel.act[((ThreadClass_sentinel) sentinel).setX] +
            sentinel.act[((ThreadClass_sentinel) sentinel).subX] +
            sentinel.act[((ThreadClass_sentinel) sentinel).setX]) > 10L) &&
            ((sentinel.active[((ThreadClass_sentinel) sentinel).setX] +
            sentinel.active[((ThreadClass_sentinel) sentinel).subX]) == 0L);
        } else if (fnr.longValue() == 2L) {
            return true;
        } else if (fnr.longValue() == 3L) {
            return true;
        } else {
            return true;
        }
    }

    public void run() {
        setX();
        subX();
    }

    public class ThreadClass_sentinel extends Sentinel {
        public final int setX = 0;
        public final int subX = 1;
        public final int ThreadClass = 2;
        public final int toString = 3;
        public final int function_sum = 4;

        public ThreadClass_sentinel() {
        }

        public ThreadClass_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry implements EvaluatePP {
    public volatile Sentinel sentinel;

    public Entry() {
        sentinel = new Entry_sentinel(this);
    }

    public static Object Run() {
        ThreadClass t = new ThreadClass();
        t.start();

        Boolean whileCond1 = true;

        while (whileCond1) {
            whileCond1 = t.x.longValue() != 2L;

            if (!(whileCond1)) {
                break;
            }

            //Skip;
        }

        return t.x;
    }

    public String toString() {
        return "Entry{}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (fnr.longValue() == 0L) {
            return true;
        } else if (fnr.longValue() == 1L) {
            return true;
        } else if (fnr.longValue() == 2L) {
            return true;
        } else {
            return true;
        }
    }

    public class Entry_sentinel extends Sentinel {
        public final int Run = 0;
        public final int Entry = 1;
        public final int toString = 2;
        public final int function_sum = 3;

        public Entry_sentinel() {
        }

        public Entry_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########

package quotes;

public interface Quotes {
    public static Number start = 1L;
    public static Number append = 2L;
}

##########
