import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public String toString() {
        return "A{}";
    }

    private static class Vector2D implements Record {
        public Number x;
        public Number y;

        public Vector2D(final Number _x, final Number _y) {
            x = _x;
            y = _y;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Vector2D)) {
                return false;
            }

            Vector2D other = ((Vector2D) obj);

            return (x.longValue() == other.x.longValue()) &&
            (y.longValue() == other.y.longValue());
        }

        public int hashCode() {
            return Utils.hashCode(x, y);
        }

        public Vector2D clone() {
            return new Vector2D(x, y);
        }

        public String toString() {
            return Utils.recordToString(this, x, y);
        }
    }

    public static class Real implements Record {
        public Number r;

        public Real(final Number _r) {
            r = _r;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Real)) {
                return false;
            }

            Real other = ((Real) obj);

            return r.doubleValue() == other.r.doubleValue();
        }

        public int hashCode() {
            return Utils.hashCode(r);
        }

        public Real clone() {
            return new Real(r);
        }

        public String toString() {
            return Utils.recordToString(this, r);
        }
    }
}

##########

package quotes;

public interface Quotes {
    public static Number start = 1L;
    public static Number append = 2L;
}

##########
