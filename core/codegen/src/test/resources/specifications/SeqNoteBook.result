import org.overture.codegen.runtime.*;

import java.util.*;


public class NoteBook {
    private VDMSeq messages = SeqUtil.seq();

    public NoteBook() {
    }

    public void Test() {
        NoteBook nb1 = new NoteBook();
        NoteBook nb2 = new NoteBook();
        IO.println("Notebooks nb1 and nb2 has been created\n");
        IO.println("Adding messages for nb1 while leaving nb2 empty\n");
        nb1.addMessage("Hello!");
        nb1.addMessage("Bye!");
        nb1.addMessages(SeqUtil.seq("one", "two", "three", "four"));
        nb1.addMessagesDist(SeqUtil.seq("red", "green"),
            SeqUtil.seq("blue", "yellow"));
        IO.printf("nb1 and nb2 are equal: %s\n", SeqUtil.seq(nb1.eq(nb2)));
        IO.printf("nb1 and nb2 are NOT equal: %s\n", SeqUtil.seq(nb1.neq(nb2)));
        IO.print("\n");
        IO.println("Copying the nb1 messages to nb2..\n");
        nb2.setMessages(nb1.getMessagesOrdered());
        IO.printf("nb1 and nb2 are equal: %s\n", SeqUtil.seq(nb1.eq(nb2)));
        IO.printf("nb1 and nb2 are NOT equal: %s\n", SeqUtil.seq(nb1.neq(nb2)));
        IO.print("\n");
        IO.printf("The current number of messages in nb1 is: %s\n\n",
            SeqUtil.seq(nb1.noOfMessgages()));
        IO.println("All messages so far: ");
        nb1.printMessages();
        IO.print("\n");
        IO.println("Latest message is: " + nb1.readLatest());
        IO.println("Removing latest..");
        nb1.removeLatest();
        IO.println("Latest message is: " + nb1.readLatest() + "\n");
        IO.printf("Overriding message %s with 'Hi'\n", SeqUtil.seq(9L));
        nb1.overrideMessage(9L, "Hi!");
        IO.println("All messages so far: ");
        nb1.printMessages();
        IO.print("\n");
        IO.printf("Message %s: " + nb1.getMessage(5L) + "\n", SeqUtil.seq(5L));
        IO.print("\n");
        IO.printf("Message 8 is equal to 'Bye!': %s\n",
            SeqUtil.seq(nb1.isMessage(8L, "Bye!")));
        IO.printf("Message 1 is equal to 'Bye!': %s\n",
            SeqUtil.seq(nb1.isMessage(1L, "Bye!")));
        IO.printf("Message 8 is NOT equal to 'Bye!': %s\n",
            SeqUtil.seq(nb1.isNotMessage(8L, "Bye!")));
        IO.printf("Message 1 is NOT equal to 'Bye!': %s\n",
            SeqUtil.seq(nb1.isNotMessage(1L, "Bye!")));
        IO.print("\n");
        IO.print("Adding duplicate message 'yellow'\n\n");
        nb1.addMessage("yellow");
        IO.println("Printing messages reversed");

        long toVar_1 = nb1.noOfMessgages().longValue();

        for (long i = 1L; i <= toVar_1; i++) {
            VDMSeq reversed = nb1.getReverseMessages();
            IO.println(((String) reversed.get(Utils.index(i))));
        }

        IO.print("\n");
        IO.println("Printing message indices of nb1");

        for (Iterator iterator_1 = nb1.getMessageIndices().iterator();
                iterator_1.hasNext();) {
            Number idx = (Number) iterator_1.next();
            IO.printf("%s ", SeqUtil.seq(idx));
        }

        IO.println("\n");
        IO.println("Printing messages of nb1 using 'elems' operator");

        for (Iterator iterator_2 = SeqUtil.elems(nb1.getMessagesOrdered())
                                          .iterator(); iterator_2.hasNext();) {
            String msg = (String) iterator_2.next();
            IO.print(msg + "\n");
        }

        IO.println("\n");
        IO.println("Printing messages of nb1 using the sequence loop");

        for (Iterator iterator_3 = nb1.getMessagesOrdered().iterator();
                iterator_3.hasNext();) {
            String msg = (String) iterator_3.next();
            IO.print(msg + "\n");
        }
    }

    public void printMessages() {
        long toVar_2 = messages.size();

        for (long i = 1L; i <= toVar_2; i++) {
            String msg = getMessage(i);
            IO.println(msg);
        }
    }

    public void addMessage(final String msg) {
        messages = SeqUtil.conc(SeqUtil.seq(msg), messages.clone());
    }

    public void addMessages(final VDMSeq newMessages) {
        messages = SeqUtil.conc(newMessages.clone(), messages.clone());
    }

    private void addMessagesDist(final VDMSeq newMessages1,
        final VDMSeq newMessages2) {
        messages = SeqUtil.conc(SeqUtil.distConc(SeqUtil.seq(
                        newMessages1.clone(), newMessages2.clone())),
                messages.clone());
    }

    public String readLatest() {
        return ((String) messages.get(0));
    }

    public void removeLatest() {
        messages = SeqUtil.tail(messages.clone());
    }

    public void overrideMessage(final Number index, final String newMessage) {
        messages = SeqUtil.mod(messages.clone(),
                new Maplet[] { new Maplet(index, newMessage) });
    }

    public VDMSeq getMessagesOrdered() {
        return messages.clone();
    }

    public void setMessages(final VDMSeq newMessages) {
        messages = newMessages.clone();
    }

    public Number noOfMessgages() {
        return getMessagesOrdered().size();
    }

    public String getMessage(final Number index) {
        return ((String) messages.get(Utils.index(index)));
    }

    public Boolean isMessage(final Number index, final String message) {
        return message.equals(getMessage(index));
    }

    public Boolean isNotMessage(final Number index, final String message) {
        return !(message.equals(getMessage(index)));
    }

    public VDMSet getMessgaesSet() {
        return SeqUtil.elems(messages.clone());
    }

    public VDMSet getMessageIndices() {
        return SeqUtil.inds(messages);
    }

    public VDMSeq getReverseMessages() {
        return SeqUtil.reverse(messages.clone());
    }

    public Boolean eq(final NoteBook other) {
        return SeqUtil.equals(messages, other.messages);
    }

    public Boolean neq(final NoteBook other) {
        return !(SeqUtil.equals(messages, other.messages));
    }
}

##########
