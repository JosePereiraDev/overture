import org.overture.codegen.runtime.*;

import java.util.*;


public class PhoneBook {
    private VDMMap phoneNumbers = MapUtil.map();

    public PhoneBook(final VDMMap pPhoneNumbers) {
        phoneNumbers = pPhoneNumbers.clone();
    }

    public PhoneBook() {
    }

    public static void Test() {
        PhoneBook pb1 = new PhoneBook();
        PhoneBook pb2 = new PhoneBook();
        IO.print(
            "Creating phone books pb1 and pb2 populated with the same default entries\n");
        pb1.loadDemo();
        pb2.loadDemo();
        IO.print("\n");
        IO.printf("pb1 and pb2 are equal: %s\n", SeqUtil.seq(pb1.eq(pb2)));
        IO.printf("pb1 and pb2 are NOT equal: %s\n", SeqUtil.seq(pb1.neq(pb2)));
        IO.print("\n");
        IO.println("Printing entries in pb1");
        pb1.listEntries();
        IO.print("\n");
        IO.println("Printing entries in pb1 as <number>, <name>:");

        for (Iterator iterator_1 = pb1.getNumbers().iterator();
                iterator_1.hasNext();) {
            String number = (String) iterator_1.next();
            IO.print("Number: " + number + ". Name: " + pb1.getName(number) +
                "\n");
        }

        IO.print("\n");
        IO.println("Overriding Martin |-> 11, Jens |-> 22, Denver |-> 8");
        IO.println("Printing entries in pb1");
        pb1.override(MapUtil.map(new Maplet("Martin", "11"),
                new Maplet("Jens", "22"), new Maplet("Denver", "8")));
        pb1.listEntries();
        IO.print("\n");
        IO.printf("pb1 and pb2 are equal: %s\n", SeqUtil.seq(pb1.eq(pb2)));
        IO.printf("pb1 and pb2 are NOT equal: %s\n", SeqUtil.seq(pb1.neq(pb2)));
        IO.print("\n");
        IO.println("Loading default entries in pb1...");
        pb1.loadDemo();
        IO.print("Resitrct to names: Jens, Lala\n");
        pb1.restrictToNames(SetUtil.set("Jens", "Denver", "Lala"));
        IO.println("Printing entries in pb1");
        pb1.listEntries();
        IO.print("\n");
        IO.println("Loading default entries in pb1...");
        pb1.loadDemo();
        IO.print("Resitrct by names: Mads, Cat, Lala\n");
        pb1.restrictByNames(SetUtil.set("Mads", "Cat", "Lala"));
        IO.println("Printing entries in pb1");
        pb1.listEntries();
        IO.print("\n");
        IO.println("Loading default entries in pb1...");
        pb1.loadDemo();
        IO.print("Resitrct to numbers 2, 4, 6, 8\n");
        pb1.restrictToNumbers(SetUtil.set("2", "4", "6", "8"));
        IO.println("Printing entries in pb1");
        pb1.listEntries();
        IO.print("\n");
        IO.println("Loading default entries in pb1...");
        pb1.loadDemo();
        IO.print("Resitrct by numbers 0,1,2,3\n");
        pb1.restrictByNumbers(SetUtil.set("0", "1", "2", "3"));
        IO.println("Printing entries in pb1");
        pb1.listEntries();
    }

    public void loadDemo() {
        phoneNumbers = MapUtil.map();
        addEntry("Martin", "1");
        addEntry("Jens", "2");
        addEntry("Morten", "3");
        addEntry("Cat", "4");
        addEntry("Dog", "5");
        addTwoEntries(Tuple.mk_("Tom", "6"), Tuple.mk_("Mads", "7"));
    }

    public void listEntries() {
        for (Iterator iterator_2 = getNames().iterator(); iterator_2.hasNext();) {
            String name = (String) iterator_2.next();
            IO.print("Name: " + name + ". Number: " + getNumber(name) + "\n");
        }
    }

    public void addEntry(final String name, final String number) {
        phoneNumbers = MapUtil.munion(phoneNumbers.clone(),
                MapUtil.map(new Maplet(name, number)));
    }

    public void addTwoEntries(final Tuple first, final Tuple second) {
        phoneNumbers = MapUtil.merge(SetUtil.set(phoneNumbers.clone(),
                    MapUtil.map(
                        new Maplet(((String) first.get(0)),
                            ((String) first.get(1)))),
                    MapUtil.map(
                        new Maplet(((String) second.get(0)),
                            ((String) second.get(1))))));
    }

    public VDMSet getNames() {
        return MapUtil.dom(phoneNumbers.clone());
    }

    public VDMSet getNumbers() {
        return MapUtil.rng(phoneNumbers.clone());
    }

    public String getNumber(final String name) {
        return ((String) phoneNumbers.get(name));
    }

    public String getName(final String number) {
        return ((String) MapUtil.inverse(phoneNumbers.clone()).get(number));
    }

    public PhoneBook invertPhoneBook() {
        return new PhoneBook(MapUtil.inverse(phoneNumbers.clone()));
    }

    public void override(final VDMMap overrides) {
        phoneNumbers = MapUtil.override(phoneNumbers.clone(), overrides.clone());
    }

    public void restrictToNames(final VDMSet names) {
        phoneNumbers = MapUtil.domResTo(names.clone(), phoneNumbers.clone());
    }

    public void restrictByNames(final VDMSet names) {
        phoneNumbers = MapUtil.domResBy(names.clone(), phoneNumbers.clone());
    }

    public void restrictToNumbers(final VDMSet numbers) {
        phoneNumbers = MapUtil.rngResTo(phoneNumbers.clone(), numbers.clone());
    }

    public void restrictByNumbers(final VDMSet numbers) {
        phoneNumbers = MapUtil.rngResBy(phoneNumbers.clone(), numbers.clone());
    }

    public Boolean eq(final PhoneBook other) {
        return MapUtil.equals(phoneNumbers, other.phoneNumbers);
    }

    public Boolean neq(final PhoneBook other) {
        return !(MapUtil.equals(phoneNumbers, other.phoneNumbers));
    }
}

##########
