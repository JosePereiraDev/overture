import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public static Number f() {
        return 1L;
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        VDMSet setCompResult_1 = SetUtil.set();
        VDMSet set_1 = SetUtil.set(new A(), null, new A(), null, null, new A());

        for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext();) {
            Object x = ((Object) iterator_1.next());
            Boolean andResult_1 = false;

            if (x != null) {
                Number apply_1 = null;

                if (x instanceof A) {
                    apply_1 = ((A) x).f();
                } else {
                    throw new RuntimeException("Missing member: f");
                }

                if (apply_1.longValue() == 1L) {
                    andResult_1 = true;
                }
            }

            if (andResult_1) {
                setCompResult_1 = SetUtil.union(Utils.clone(setCompResult_1),
                        SetUtil.set(x));
            }
        }

        return setCompResult_1.size();
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1> {
    public abstract T_1 eval();
}

##########

package quotes;

public interface Quotes {
    public static Number start = 1L;
    public static Number append = 2L;
}

##########
