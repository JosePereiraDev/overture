import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public A nilPatternOp(final A nullPattern_1) {
        Boolean success_1 = nullPattern_1 == null;

        if (!(success_1)) {
            throw new RuntimeException("Nil pattern match failed");
        }

        Object nullPattern_2 = null;
        Boolean success_2 = nullPattern_2 == null;

        if (!(success_2)) {
            throw new RuntimeException("Nil pattern match failed");
        }

        return null;
    }

    public static A nilPatternFun(final A nullPattern_3) {
        Boolean success_3 = nullPattern_3 == null;

        if (!(success_3)) {
            throw new RuntimeException("Nil pattern match failed");
        }

        Object nullPattern_4 = null;
        Boolean success_4 = nullPattern_4 == null;

        if (!(success_4)) {
            throw new RuntimeException("Nil pattern match failed");
        }

        return null;
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return SeqUtil.seq(new A().nilPatternOp(null), A.nilPatternFun(null));
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

public interface Quotes {
    public static Number start = 1L;
    public static Number append = 2L;
}

##########
