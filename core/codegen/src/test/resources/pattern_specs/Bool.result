import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public Boolean boolPatternOp(final Boolean boolPattern_1) {
        Boolean success_1 = boolPattern_1 == false;

        if (!(success_1)) {
            throw new RuntimeException("Bool pattern match failed");
        }

        Boolean boolPattern_2 = true;
        Boolean success_2 = boolPattern_2 == true;

        if (!(success_2)) {
            throw new RuntimeException("Bool pattern match failed");
        }

        return false;
    }

    public static Boolean boolPatternFun(final Boolean boolPattern_3) {
        Boolean success_3 = boolPattern_3 == true;

        if (!(success_3)) {
            throw new RuntimeException("Bool pattern match failed");
        }

        Boolean boolPattern_4 = true;
        Boolean success_4 = boolPattern_4 == true;

        if (!(success_4)) {
            throw new RuntimeException("Bool pattern match failed");
        }

        return false;
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        Boolean andResult_1 = false;

        if (new A().boolPatternOp(false)) {
            if (A.boolPatternFun(true)) {
                andResult_1 = true;
            }
        }

        return andResult_1;
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

public interface Quotes {
    public static Number start = 1L;
    public static Number append = 2L;
}

##########
