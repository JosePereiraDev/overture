import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Func_1<Func_1<Boolean, Number>, VDMSeq> bool_nat_map(
        final VDMSeq s) {
        return new Func_1<Func_1<Boolean, Number>, VDMSeq>() {
                public VDMSeq eval(final Func_1<Boolean, Number> f) {
                    return s.isEmpty() ? SeqUtil.seq()
                                       : SeqUtil.conc(SeqUtil.seq(f.eval(((Boolean) s.get(
                                    0)))),
                        bool_nat_map(SeqUtil.tail(s.clone())).eval(f));
                }
            };
    }

    public static Object Run() {
        Func_1<Boolean, Number> f = new Func_1<Boolean, Number>() {
                public Number eval(final Boolean b) {
                    return b ? 1L : 0L;
                }
            };

        VDMSeq xs = SeqUtil.seq(true, false, true, true, true);

        return bool_nat_map(xs).eval(f);
    }
}

##########
public interface Func_1<T_1, T_2> {
    public abstract T_2 eval(final T_1 param_1);
}

##########
