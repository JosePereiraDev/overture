import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Number op() {
        Vec recordPattern_1 = null;
        Boolean success_1 = false;
        VDMSet set_1 = SetUtil.set(new Vec(1L, 11L), new Vec(2L, 22L),
                new Vec(3L, 33L), new Vec(4L, 44L));
        Number a = null;

        for (Iterator iterator_1 = set_1.iterator();
                iterator_1.hasNext() && !(success_1);) {
            recordPattern_1 = ((Vec) iterator_1.next());
            success_1 = true;
            a = recordPattern_1.x;

            Number intPattern_1 = recordPattern_1.y;
            success_1 = intPattern_1.longValue() == 33L;

            if (!(success_1)) {
                continue;
            }

            success_1 = true;
        }

        if (!(success_1)) {
            throw new RuntimeException("Let Be St found no applicable bindings");
        }

        return a;
    }

    public static Object Run() {
        return op();
    }

    public String toString() {
        return "Entry{}";
    }

    public static class Vec implements Record {
        public Number x;
        public Number y;

        public Vec(final Number _x, final Number _y) {
            x = _x;
            y = _y;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Vec)) {
                return false;
            }

            Vec other = ((Vec) obj);

            return (x.longValue() == other.x.longValue()) &&
            (y.longValue() == other.y.longValue());
        }

        public int hashCode() {
            return Utils.hashCode(x, y);
        }

        public Vec clone() {
            return new Vec(x, y);
        }

        public String toString() {
            return Utils.recordToString(this, x, y);
        }
    }
}

##########

package quotes;

public interface Quotes {
    public static Number start = 1L;
    public static Number append = 2L;
}

##########
