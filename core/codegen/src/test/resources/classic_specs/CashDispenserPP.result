import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return new SimpleTest().Run();
    }
}

##########
import org.overture.codegen.runtime.*;

import quotes.*;

import java.util.*;


public class SimpleTest {
    private static final Card c1 = new Card(123456L, 1L, 1L);
    private static final VDMSet cards = SetUtil.set(c1);
    private static final CentralResource resource = new CentralResource();
    private static final VDMMap tills = MapUtil.map(new Maplet(1L,
                new Till(resource)));
    private Clock clock = new Clock();
    private Letterbox letterbox = new Letterbox();

    public SimpleTest() {
    }

    public Boolean Run() {
        clock.SetDate("150999");

        Cardholder peter = new Cardholder().Create("Peter Gorm Larsen",
                "Granvej 24");
        Account pglacc1 = new Account().Create(MapUtil.map(
                    new Maplet(1L, peter)), 5000L);
        Number pglid1 = 1L;
        resource.AddAccount(pglid1, pglacc1);
        resource.AddLetterbox(clock, new Letterbox());
        ((Till) tills.get(1L)).InsertCard(c1);

        if (((Till) tills.get(1L)).Validate(123456L) == Quotes.PinOk) {
            return ((Till) tills.get(1L)).MakeWithdrawal(800L);
        } else {
            return false;
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Account {
    private static final Number dailyLimit = 2000L;
    private VDMMap cards;
    private Number balance;
    private VDMSeq transactions = SeqUtil.seq();

    public Account() {
    }

    private Boolean ValidTransaction(final Transaction transaction) {
        throw new UnsupportedOperationException();
    }

    public Account Create(final VDMMap cs, final Number b) {
        cards = cs.clone();
        balance = b;

        return this;
    }

    public Number GetBalance() {
        return balance;
    }

    public Boolean Withdrawal(final Number cardId, final Number amount,
        final String date) {
        Transaction transaction = new Transaction(date, cardId, amount);

        if (((balance.longValue() - amount.longValue()) >= 0L) &&
                (DateTotal(date,
                    SeqUtil.conc(transactions.clone(),
                        SeqUtil.seq(transaction.clone()))).longValue() <= dailyLimit.longValue())) {
            balance = balance.longValue() - amount.longValue();
            transactions = SeqUtil.conc(transactions.clone(),
                    SeqUtil.seq(transaction.clone()));

            return true;
        } else {
            return false;
        }
    }

    public Letter MakeStatement(final Number cardId, final String date) {
        String nm = ((Cardholder) cards.get(cardId)).GetName();
        String addr = ((Cardholder) cards.get(cardId)).GetAddress();
        Letter letter = new Letter();

        return letter.Create(nm, addr, date, transactions.clone(), balance);
    }

    public VDMSet GetCardIds() {
        return MapUtil.dom(cards.clone());
    }

    public void AddCard(final Number cId, final Cardholder ch) {
        cards = MapUtil.munion(cards.clone(), MapUtil.map(new Maplet(cId, ch)));
    }

    public void RemoveCard(final Number cId) {
        cards = MapUtil.domResBy(SetUtil.set(cId), cards.clone());
    }

    private static Boolean TransactionsInvariant(final VDMSeq ts) {
        VDMSet setCompResult_1 = SetUtil.set();
        VDMSet set_2 = SeqUtil.inds(ts);

        for (Iterator iterator_2 = set_2.iterator(); iterator_2.hasNext();) {
            Number i = ((Number) iterator_2.next());
            setCompResult_1 = SetUtil.union(setCompResult_1.clone(),
                    SetUtil.set(((Transaction) ts.get(Utils.index(i))).date));
        }

        Boolean forAllExpResult_1 = true;
        VDMSet set_1 = setCompResult_1.clone();

        for (Iterator iterator_1 = set_1.iterator();
                iterator_1.hasNext() && forAllExpResult_1;) {
            String date = ((String) iterator_1.next());
            forAllExpResult_1 = DateTotal(date, ts).longValue() <= dailyLimit.longValue();
        }

        return forAllExpResult_1;
    }

    private static Number DateTotal(final String date, final VDMSeq ts) {
        VDMSeq seqCompResult_1 = SeqUtil.seq();
        VDMSet set_3 = SeqUtil.inds(ts);

        for (Iterator iterator_3 = set_3.iterator(); iterator_3.hasNext();) {
            Number i = ((Number) iterator_3.next());

            if (((Transaction) ts.get(Utils.index(i))).date.equals(date)) {
                seqCompResult_1 = SeqUtil.conc(seqCompResult_1.clone(),
                        SeqUtil.seq(
                            ((Transaction) ts.get(Utils.index(i))).amount));
            }
        }

        return Sum(seqCompResult_1);
    }

    private static Number Sum(final VDMSeq rs) {
        if (rs.isEmpty()) {
            return 0L;
        } else {
            return ((Number) rs.get(0)).doubleValue() +
            Sum(SeqUtil.tail(rs.clone())).doubleValue();
        }
    }

    public static class Transaction implements Record {
        public String date;
        public Number cardId;
        public Number amount;

        public Transaction(final String _date, final Number _cardId,
            final Number _amount) {
            date = (_date != null) ? _date : null;
            cardId = _cardId;
            amount = _amount;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Transaction)) {
                return false;
            }

            Transaction other = ((Transaction) obj);

            return (date.equals(other.date)) &&
            (cardId.longValue() == other.cardId.longValue()) &&
            (amount.longValue() == other.amount.longValue());
        }

        public int hashCode() {
            return Utils.hashCode(date, cardId, amount);
        }

        public Transaction clone() {
            return new Transaction(date, cardId, amount);
        }

        public String toString() {
            return Utils.recordToString(this, date, cardId, amount);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Card {
    private Number code;
    private Number cardId;
    private Number accountId;

    public Card(final Number c, final Number cid, final Number a) {
        code = c;
        cardId = cid;
        accountId = a;
    }

    public Card() {
    }

    public Number GetCode() {
        return code;
    }

    public Number GetAccountId() {
        return accountId;
    }

    public Number GetCardId() {
        return cardId;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Cardholder {
    private String name;
    private String address;

    public Cardholder() {
    }

    public Cardholder Create(final String nm, final String addr) {
        name = nm;
        address = addr;

        return this;
    }

    public String GetName() {
        return name;
    }

    public String GetAddress() {
        return address;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class CentralResource {
    private static final Number maxNumberOfTries = 3L;
    private VDMMap accounts = MapUtil.map();
    private VDMMap numberOfTries = MapUtil.map();
    private VDMSet illegalCards = SetUtil.set();
    private Letterbox letterbox;
    private Clock clock;

    public CentralResource() {
    }

    public void AddLetterbox(final Clock c, final Letterbox l) {
        clock = c;
        letterbox = l;
    }

    public Number GetBalance(final Number accountId) {
        if (MapUtil.dom(accounts.clone()).contains(accountId)) {
            return ((Account) accounts.get(accountId)).GetBalance();
        } else {
            return null;
        }
    }

    public Boolean Withdrawal(final Number accountId, final Number cardId,
        final Number amount) {
        if (IsLegalCard(accountId, cardId)) {
            return ((Account) accounts.get(accountId)).Withdrawal(cardId,
                amount, clock.GetDate());
        } else {
            return false;
        }
    }

    public Boolean PostStatement(final Number accountId, final Number cardId) {
        if (IsLegalCard(accountId, cardId)) {
            letterbox.PostStatement(((Account) accounts.get(accountId)).MakeStatement(
                    cardId, clock.GetDate()));

            return true;
        } else {
            return false;
        }
    }

    public Boolean IsLegalCard(final Number accountId, final Number cardId) {
        return !(illegalCards.contains(cardId)) &&
        MapUtil.dom(accounts.clone()).contains(accountId) &&
        ((Account) accounts.get(accountId)).GetCardIds().contains(cardId);
    }

    public Boolean NumberOfTriesExceeded(final Number cardId) {
        return ((Number) numberOfTries.get(cardId)).longValue() >= maxNumberOfTries.longValue();
    }

    public void ResetNumberOfTries(final Number cardId) {
        numberOfTries.put(cardId, 0L);
    }

    public void IncrNumberOfTries(final Number cardId) {
        numberOfTries.put(cardId,
            ((Number) numberOfTries.get(cardId)).longValue() + 1L);
    }

    public void AddAccount(final Number accId, final Account acc) {
        accounts = MapUtil.override(accounts.clone(),
                MapUtil.map(new Maplet(accId, acc)));

        VDMMap mapCompResult_1 = MapUtil.map();
        VDMSet set_4 = acc.GetCardIds();

        for (Iterator iterator_4 = set_4.iterator(); iterator_4.hasNext();) {
            Number cId = ((Number) iterator_4.next());
            mapCompResult_1 = MapUtil.munion(mapCompResult_1.clone(),
                    MapUtil.map(new Maplet(cId, 0L)));
        }

        numberOfTries = MapUtil.override(numberOfTries.clone(),
                mapCompResult_1.clone());
    }

    public void AddIllegalCard(final Number cId) {
        illegalCards = SetUtil.union(illegalCards.clone(), SetUtil.set(cId));
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Clock {
    private String date = "";

    public Clock() {
    }

    public void SetDate(final String d) {
        date = d;
    }

    public String GetDate() {
        return date;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Letter {
    public String name;
    public String address;
    public String date;
    public VDMSeq transactions;
    public Number balance;

    public Letter() {
    }

    public Letter Create(final String nm, final String addr, final String d,
        final VDMSeq ts, final Number b) {
        name = nm;
        address = addr;
        date = d;
        transactions = ts.clone();
        balance = b;

        return this;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Letterbox {
    private VDMSeq statements = SeqUtil.seq();

    public Letterbox() {
    }

    public void PostStatement(final Letter letter) {
        statements = SeqUtil.conc(statements.clone(), SeqUtil.seq(letter));
    }

    public Letter GetLastStatement() {
        return ((Letter) statements.get(Utils.index(statements.size())));
    }
}

##########
import org.overture.codegen.runtime.*;

import quotes.*;

import java.util.*;


public class Till {
    private Card curCard = null;
    private Boolean cardOk = false;
    private VDMSet retainedCards = SetUtil.set();
    private CentralResource resource;

    public Till(final CentralResource res) {
        resource = res;
    }

    public Till() {
    }

    public void InsertCard(final Card c) {
        curCard = c;
    }

    public Object Validate(final Number pin) {
        Number cardId = curCard.GetCardId();
        Boolean codeOk = curCard.GetCode().longValue() == Encode(pin).longValue();
        Boolean cardLegal = IsLegalCard();
        cardOk = codeOk && cardLegal;

        if (!(cardLegal)) {
            retainedCards = SetUtil.union(retainedCards.clone(),
                    SetUtil.set(curCard));
            curCard = null;

            return Quotes.Retained;
        } else if (codeOk) {
            resource.ResetNumberOfTries(cardId);
        } else {
            resource.IncrNumberOfTries(cardId);

            if (resource.NumberOfTriesExceeded(cardId)) {
                retainedCards = SetUtil.union(retainedCards.clone(),
                        SetUtil.set(curCard));
                cardOk = false;
                curCard = null;

                return Quotes.Retained;
            }
        }

        return cardOk ? Quotes.PinOk : Quotes.PinNotOk;
    }

    public void ReturnCard() {
        cardOk = false;
        curCard = null;
    }

    public Number GetBalance() {
        return resource.GetBalance(curCard.GetAccountId());
    }

    public Boolean MakeWithdrawal(final Number amount) {
        return resource.Withdrawal(curCard.GetAccountId(), curCard.GetCardId(),
            amount);
    }

    public Boolean RequestStatement() {
        return resource.PostStatement(curCard.GetAccountId(),
            curCard.GetCardId());
    }

    public Boolean IsLegalCard() {
        return resource.IsLegalCard(curCard.GetAccountId(), curCard.GetCardId());
    }

    public Boolean CardValidated() {
        return (curCard != null) && cardOk;
    }

    public Boolean CardInside() {
        return curCard != null;
    }

    private static Number Encode(final Number pin) {
        return pin;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


abstract public class Event {
    public Event() {
    }

    public abstract Object execute(final System system);
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class GetBalance extends Event {
    private Number tillid;

    public GetBalance() {
    }

    public GetBalance Init(final Number tid) {
        tillid = tid;

        return this;
    }

    public Object execute(final System sys) {
        Till till = sys.GetTill(tillid);

        if (till.CardValidated()) {
            return till.GetBalance();
        } else {
            return false;
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class IllegalCard extends Event {
    private Number mycard;

    public IllegalCard() {
    }

    public IllegalCard Init(final Number c) {
        mycard = c;

        return this;
    }

    public Object execute(final System sys) {
        sys.GetResource().AddIllegalCard(mycard);

        return true;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class InsertCard extends Event {
    private Number tillid;
    private Card mycard;

    public InsertCard() {
    }

    public InsertCard Init(final Number tid, final Card c) {
        tillid = tid;
        mycard = c;

        return this;
    }

    public Object execute(final System sys) {
        sys.GetTill(tillid).InsertCard(mycard);

        return true;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class ReturnCard extends Event {
    private Number tillid;

    public ReturnCard() {
    }

    public ReturnCard Init(final Number tid) {
        tillid = tid;

        return this;
    }

    public Object execute(final System sys) {
        Till till = sys.GetTill(tillid);

        if (till.CardInside()) {
            till.ReturnCard();
        } else {
            return false;
        }

        return true;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class SendStatement extends Event {
    private Number tillid;

    public SendStatement() {
    }

    public SendStatement Init(final Number tid) {
        tillid = tid;

        return this;
    }

    public Object execute(final System sys) {
        Till till = sys.GetTill(tillid);

        if (till.CardValidated()) {
            return till.RequestStatement();
        } else {
            return false;
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class System {
    private static final Card c1 = new Card(123456L, 1L, 1L);
    private static final Card c2 = new Card(123457L, 2L, 2L);
    private static final Card c3 = new Card(123458L, 3L, 3L);
    private static final Card c4 = new Card(123459L, 4L, 4L);
    private static final Card c5 = new Card(123460L, 5L, 5L);
    private static final Card c6 = new Card(123461L, 6L, 5L);
    private static final Card c7 = new Card(123462L, 7L, 5L);
    private static final VDMSet cards = SetUtil.set(c1, c2, c3, c4, c5, c6, c7);
    private static final CentralResource resource = new CentralResource();
    private static final VDMMap tills = MapUtil.map(new Maplet(1L,
                new Till(resource)), new Maplet(2L, new Till(resource)),
            new Maplet(3L, new Till(resource)));
    private Clock clock = new Clock();
    private Letterbox letterbox = new Letterbox();

    public System() {
        clock.SetDate("150999");

        Cardholder peter = new Cardholder().Create("Peter Gorm Larsen",
                "Granvej 24");
        Cardholder paul = new Cardholder().Create("Paul Mukherjee",
                "Rugaardsvej 47");
        Cardholder sten = new Cardholder().Create("Sten Agerholm",
                "Teisensvej ??");
        Cardholder kim = new Cardholder().Create("Kim Sunesen", "??");
        Cardholder CSK = new Cardholder().Create("CSK", "Forskerparken 10A");
        Account pglacc1 = new Account().Create(MapUtil.map(
                    new Maplet(1L, peter)), 5000L);
        Account saacc1 = new Account().Create(MapUtil.map(new Maplet(2L, sten)),
                0L);
        Account ksacc1 = new Account().Create(MapUtil.map(new Maplet(3L, kim)),
                9000L);
        Account pmacc1 = new Account().Create(MapUtil.map(new Maplet(4L, paul)),
                6000L);
        Account ifacc1 = new Account().Create(MapUtil.map(
                    new Maplet(5L, peter), new Maplet(6L, sten),
                    new Maplet(7L, CSK)), 70000L);
        Number pglid1 = 1L;
        Number said1 = 2L;
        Number ksid1 = 3L;
        Number pmid1 = 4L;
        Number ifid1 = 5L;
        resource.AddAccount(pglid1, pglacc1);
        resource.AddAccount(said1, saacc1);
        resource.AddAccount(ksid1, ksacc1);
        resource.AddAccount(pmid1, pmacc1);
        resource.AddAccount(ifid1, ifacc1);
        resource.AddLetterbox(clock, new Letterbox());
    }

    public Till GetTill(final Number tid) {
        return ((Till) tills.get(tid));
    }

    public CentralResource GetResource() {
        return resource;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Validate extends Event {
    private Number tillid;
    private Number code;

    public Validate() {
    }

    public Validate Init(final Number tid, final Number pin) {
        tillid = tid;
        code = pin;

        return this;
    }

    public Object execute(final System sys) {
        return sys.GetTill(tillid).Validate(code);
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Withdrawal extends Event {
    private Number tillid;
    private Number amount;

    public Withdrawal() {
    }

    public Withdrawal Init(final Number t, final Number a) {
        tillid = t;
        amount = a;

        return this;
    }

    public Object execute(final System sys) {
        Till till = sys.GetTill(tillid);

        if (till.CardValidated()) {
            return till.MakeWithdrawal(amount);
        } else {
            return false;
        }
    }
}

##########

package quotes;

public interface Quotes {
    public static Number PinNotOk = 1L;
    public static Number PinOk = 2L;
    public static Number Retained = 3L;
}

##########
