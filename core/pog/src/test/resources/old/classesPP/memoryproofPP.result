<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="36" line="30" message="Alloc(ADDR, State), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 30:36&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; (addr not in set used) =&gt;&#10;  exists c:CON)&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc(ADDR, State), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 30:36&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; (addr not in set used) =&gt;&#10;  exists c:CON)&#10;"/>
<po column="7" line="32" message="Alloc(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 32:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; (addr not in set used) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem ++ {addr |-&gt; let c:CON in c}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 32:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; (addr not in set used) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem ++ {addr |-&gt; let c:CON in c}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;"/>
<po column="40" line="39" message="Alloc2(ADDR, State), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 39:40&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  exists c:CON)&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc2(ADDR, State), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 39:40&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  exists c:CON)&#10;"/>
<po column="15" line="39" message="Alloc2(ADDR, State), mem': map compatible obligation in 'Example3' (memoryproofPP) at line 39:15&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  forall ldom1 in set dom mem, rdom2 in set dom {addr |-&gt; let c:CON in c} &amp;&#10;  ldom1 = rdom2 =&gt; mem(ldom1) = {addr |-&gt; let c:CON in c}(rdom2))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc2(ADDR, State), mem': map compatible obligation in 'Example3' (memoryproofPP) at line 39:15&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  forall ldom1 in set dom mem, rdom2 in set dom {addr |-&gt; let c:CON in c} &amp;&#10;  ldom1 = rdom2 =&gt; mem(ldom1) = {addr |-&gt; let c:CON in c}(rdom2))&#10;"/>
<po column="7" line="41" message="Alloc2(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 41:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc2(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 41:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;"/>
<po column="7" line="50" message="Alloc20(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 50:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to ((&lt;c0&gt; | CON)) = (mem ++ {addr |-&gt; &lt;c0&gt;}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc20(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 50:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to ((&lt;c0&gt; | CON)) = (mem ++ {addr |-&gt; &lt;c0&gt;}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;"/>
<po column="29" line="58" message="Alloc21(ADDR, State), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 58:29&#10;(forall addr:ADDR, mk_State(-, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  exists c:CON)&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc21(ADDR, State), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 58:29&#10;(forall addr:ADDR, mk_State(-, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  exists c:CON)&#10;"/>
<po column="7" line="60" message="Alloc21(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 60:7&#10;(forall addr:ADDR, mk_State(-, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = {addr |-&gt; let c:CON in c} in&#10;    inv_State(mk_State(mem', access, used'))))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc21(ADDR, State): subtype obligation in 'Example3' (memoryproofPP) at line 60:7&#10;(forall addr:ADDR, mk_State(-, access, used):State &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = {addr |-&gt; let c:CON in c} in&#10;    inv_State(mk_State(mem', access, used'))))&#10;"/>
<po column="1" line="65" message="Alloc3(ADDR, State, map (ADDR) to (CON)): post condition obligation in 'Example3' (memoryproofPP) at line 65:1&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp;&#10;  pre_Alloc3(addr, mk_State(mem, access, used), mem2) =&gt; post_Alloc3(addr, mk_State(mem, access, used), mem2, let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in mk_State(mem', access, used')))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc3(ADDR, State, map (ADDR) to (CON)): post condition obligation in 'Example3' (memoryproofPP) at line 65:1&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp;&#10;  pre_Alloc3(addr, mk_State(mem, access, used), mem2) =&gt; post_Alloc3(addr, mk_State(mem, access, used), mem2, let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in mk_State(mem', access, used')))&#10;"/>
<po column="39" line="74" message="Alloc3(ADDR, State, map (ADDR) to (CON)): let be st existence obligation in 'Example3' (memoryproofPP) at line 74:39&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp;&#10;  (((addr not in set used) and (addr in set access)) =&gt; let RESULT:State = let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in mk_State(mem', access, used') in &#10;    exists c:CON))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc3(ADDR, State, map (ADDR) to (CON)): let be st existence obligation in 'Example3' (memoryproofPP) at line 74:39&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp;&#10;  (((addr not in set used) and (addr in set access)) =&gt; let RESULT:State = let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in mk_State(mem', access, used') in &#10;    exists c:CON))&#10;"/>
<po column="14" line="74" message="Alloc3(ADDR, State, map (ADDR) to (CON)): map compatible obligation in 'Example3' (memoryproofPP) at line 74:14&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp;&#10;  (((addr not in set used) and (addr in set access)) =&gt; let RESULT:State = let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in mk_State(mem', access, used') in &#10;    forall ldom1 in set dom mem, rdom2 in set dom {addr |-&gt; let c:CON in c} &amp;&#10;    ldom1 = rdom2 =&gt; mem(ldom1) = {addr |-&gt; let c:CON in c}(rdom2)))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc3(ADDR, State, map (ADDR) to (CON)): map compatible obligation in 'Example3' (memoryproofPP) at line 74:14&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp;&#10;  (((addr not in set used) and (addr in set access)) =&gt; let RESULT:State = let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in mk_State(mem', access, used') in &#10;    forall ldom1 in set dom mem, rdom2 in set dom {addr |-&gt; let c:CON in c} &amp;&#10;    ldom1 = rdom2 =&gt; mem(ldom1) = {addr |-&gt; let c:CON in c}(rdom2)))&#10;"/>
<po column="40" line="69" message="Alloc3(ADDR, State, map (ADDR) to (CON)), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 69:40&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  exists c:CON)&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc3(ADDR, State, map (ADDR) to (CON)), mem': let be st existence obligation in 'Example3' (memoryproofPP) at line 69:40&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  exists c:CON)&#10;"/>
<po column="15" line="69" message="Alloc3(ADDR, State, map (ADDR) to (CON)), mem': map compatible obligation in 'Example3' (memoryproofPP) at line 69:15&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  forall ldom1 in set dom mem, rdom2 in set dom {addr |-&gt; let c:CON in c} &amp;&#10;  ldom1 = rdom2 =&gt; mem(ldom1) = {addr |-&gt; let c:CON in c}(rdom2))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc3(ADDR, State, map (ADDR) to (CON)), mem': map compatible obligation in 'Example3' (memoryproofPP) at line 69:15&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  forall ldom1 in set dom mem, rdom2 in set dom {addr |-&gt; let c:CON in c} &amp;&#10;  ldom1 = rdom2 =&gt; mem(ldom1) = {addr |-&gt; let c:CON in c}(rdom2))&#10;"/>
<po column="7" line="71" message="Alloc3(ADDR, State, map (ADDR) to (CON)): subtype obligation in 'Example3' (memoryproofPP) at line 71:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;" number="0" object="" resource="memoryproofPP" toString="Alloc3(ADDR, State, map (ADDR) to (CON)): subtype obligation in 'Example3' (memoryproofPP) at line 71:7&#10;(forall addr:ADDR, mk_State(mem, access, used):State, mem2:map (ADDR) to (CON) &amp; ((addr not in set used) and (addr in set access)) =&gt;&#10;  (let used':set of (ADDR) = (used union {addr}), mem':map (ADDR) to (CON) = (mem munion {addr |-&gt; let c:CON in c}) in&#10;    inv_State(mk_State(mem', access, used'))))&#10;"/>
<po column="1" line="78" message="AllocSafe(ADDR, State): post condition obligation in 'Example3' (memoryproofPP) at line 78:1&#10;(forall addr:ADDR, sta:State &amp;&#10;  post_AllocSafe(addr, sta, (Safe(sta) =&gt; Safe(Alloc(addr, sta)))))&#10;" number="0" object="" resource="memoryproofPP" toString="AllocSafe(ADDR, State): post condition obligation in 'Example3' (memoryproofPP) at line 78:1&#10;(forall addr:ADDR, sta:State &amp;&#10;  post_AllocSafe(addr, sta, (Safe(sta) =&gt; Safe(Alloc(addr, sta)))))&#10;"/>
<po column="24" line="80" message="AllocSafe(ADDR, State): function apply obligation in 'Example3' (memoryproofPP) at line 80:24&#10;(forall addr:ADDR, sta:State &amp;&#10;  pre_Alloc(addr, sta))&#10;" number="0" object="" resource="memoryproofPP" toString="AllocSafe(ADDR, State): function apply obligation in 'Example3' (memoryproofPP) at line 80:24&#10;(forall addr:ADDR, sta:State &amp;&#10;  pre_Alloc(addr, sta))&#10;"/>
<po column="1" line="83" message="AllocSafe0(ADDR, State): post condition obligation in 'Example3' (memoryproofPP) at line 83:1&#10;(forall addr:ADDR, sta:State &amp;&#10;  pre_AllocSafe0(addr, sta) =&gt; post_AllocSafe0(addr, sta, (Safe(sta) =&gt; Safe(Alloc(addr, sta)))))&#10;" number="0" object="" resource="memoryproofPP" toString="AllocSafe0(ADDR, State): post condition obligation in 'Example3' (memoryproofPP) at line 83:1&#10;(forall addr:ADDR, sta:State &amp;&#10;  pre_AllocSafe0(addr, sta) =&gt; post_AllocSafe0(addr, sta, (Safe(sta) =&gt; Safe(Alloc(addr, sta)))))&#10;"/>
<po column="24" line="85" message="AllocSafe0(ADDR, State): function apply obligation in 'Example3' (memoryproofPP) at line 85:24&#10;(forall addr:ADDR, sta:State &amp; (addr not in set (sta.used)) =&gt;&#10;  pre_Alloc(addr, sta))&#10;" number="0" object="" resource="memoryproofPP" toString="AllocSafe0(ADDR, State): function apply obligation in 'Example3' (memoryproofPP) at line 85:24&#10;(forall addr:ADDR, sta:State &amp; (addr not in set (sta.used)) =&gt;&#10;  pre_Alloc(addr, sta))&#10;"/>
<po column="1" line="89" message="AllocSafe2(ADDR, State): post condition obligation in 'Example3' (memoryproofPP) at line 89:1&#10;(forall addr:ADDR, sta:State &amp;&#10;  pre_AllocSafe2(addr, sta) =&gt; post_AllocSafe2(addr, sta, (Safe(sta) =&gt; Safe(Alloc(addr, sta)))))&#10;" number="0" object="" resource="memoryproofPP" toString="AllocSafe2(ADDR, State): post condition obligation in 'Example3' (memoryproofPP) at line 89:1&#10;(forall addr:ADDR, sta:State &amp;&#10;  pre_AllocSafe2(addr, sta) =&gt; post_AllocSafe2(addr, sta, (Safe(sta) =&gt; Safe(Alloc(addr, sta)))))&#10;"/>
<po column="24" line="91" message="AllocSafe2(ADDR, State): function apply obligation in 'Example3' (memoryproofPP) at line 91:24&#10;(forall addr:ADDR, sta:State &amp; ((addr not in set (sta.used)) and (addr in set (sta.access))) =&gt;&#10;  pre_Alloc(addr, sta))&#10;" number="0" object="" resource="memoryproofPP" toString="AllocSafe2(ADDR, State): function apply obligation in 'Example3' (memoryproofPP) at line 91:24&#10;(forall addr:ADDR, sta:State &amp; ((addr not in set (sta.used)) and (addr in set (sta.access))) =&gt;&#10;  pre_Alloc(addr, sta))&#10;"/>
<po column="20" line="100" message="RunTest(), s: subtype obligation in 'Example3' (memoryproofPP) at line 100:20&#10;inv_State(mk_State({&lt;a0&gt; |-&gt; &lt;c0&gt;}, {&lt;a0&gt;, &lt;a1&gt;}, {&lt;a0&gt;}))&#10;" number="0" object="" resource="memoryproofPP" toString="RunTest(), s: subtype obligation in 'Example3' (memoryproofPP) at line 100:20&#10;inv_State(mk_State({&lt;a0&gt; |-&gt; &lt;c0&gt;}, {&lt;a0&gt;, &lt;a1&gt;}, {&lt;a0&gt;}))&#10;"/>
</result>
</testResult>
