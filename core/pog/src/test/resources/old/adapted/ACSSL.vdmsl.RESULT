[{"poKind":"subtype","poExp":"(forall k:(Inf | real) \u0026 ((k \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_(k, real)))"},{"poKind":"function apply","poExp":"(forall q:seq of (Point) \u0026 (((len q) \u003d 4) \u003d\u003e pre_rectangular(q)))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"sequence apply","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (1 in set (inds (exs.vertices)))))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"sequence apply","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (1 in set (inds (exs.vertices))))))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"subtype","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"sequence apply","poExp":"(forall exs:Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (1 in set (inds (exs.vertices))))))"},{"poKind":"sequence apply","poExp":"(forall exs:Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e (1 in set (inds (exs.vertices))))))))"},{"poKind":"sequence apply","poExp":"(forall exs:Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e (i in set (inds (exs.vertices))))))))"},{"poKind":"sequence apply","poExp":"(forall exs:Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e ((distance((exs.vertices)(1), (exs.vertices)(i)) \u003d ((exs.building).length)) \u003d\u003e (1 in set (inds (exs.vertices)))))))))"},{"poKind":"sequence apply","poExp":"(forall exs:Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e ((distance((exs.vertices)(1), (exs.vertices)(i)) \u003d ((exs.building).length)) \u003d\u003e (j in set (inds (exs.vertices)))))))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (1 in set (inds (pes.vertices)))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (inv_Realp(0) and is_(0, real))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (1 in set (inds (pes.vertices))))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (inv_Realp(0) and is_(0, real)))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (1 in set (inds (pes.vertices))))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 (1 in set (inds (pes.vertices)))))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 (i in set (inds (pes.vertices)))))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 ((distance((pes.vertices)(1), (pes.vertices)(i)) \u003d ((pes.mgzn).length)) \u003d\u003e (1 in set (inds (pes.vertices))))))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 ((distance((pes.vertices)(1), (pes.vertices)(i)) \u003d ((pes.mgzn).length)) \u003d\u003e (j in set (inds (pes.vertices))))))))"},{"poKind":"map set compatible","poExp":"(forall m1, m2 in set {{h |-\u003e let m:map (Table_Co_ordinate) to (real) in m} | h:Hzd} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"let be st existence","poExp":"(forall h:Hzd \u0026 (exists m:map (Table_Co_ordinate) to (real) \u0026 true))"},{"poKind":"finite map","poExp":"(exists finmap1:map (nat) to (map (Hzd) to (map (Table_Co_ordinate) to (real))) \u0026 (forall h:Hzd \u0026 (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d {h |-\u003e let m:map (Table_Co_ordinate) to (real) in m}))))"},{"poKind":"map set compatible","poExp":"(forall m1, m2 in set {{h |-\u003e let m:map (Table_Co_ordinate) to (real) in m} | h:Hzd} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"let be st existence","poExp":"(forall h:Hzd \u0026 (exists m:map (Table_Co_ordinate) to (real) \u0026 true))"},{"poKind":"finite map","poExp":"(exists finmap1:map (nat) to (map (Hzd) to (map (Table_Co_ordinate) to (real))) \u0026 (forall h:Hzd \u0026 (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d {h |-\u003e let m:map (Table_Co_ordinate) to (real) in m}))))"},{"poKind":"let be st existence","poExp":"(exists s:set of (Table_Co_ordinate) \u0026 true)"},{"poKind":"let be st existence","poExp":"(exists s:set of (Table_Co_ordinate) \u0026 true)"},{"poKind":"let be st existence","poExp":"(exists s:set of (Table_Co_ordinate) \u0026 true)"},{"poKind":"let be st existence","poExp":"(exists s:set of (Table_Co_ordinate) \u0026 true)"},{"poKind":"map sequence compatible","poExp":"(forall m1, m2 in set {{1 |-\u003e 2}, {2 |-\u003e 3}, {3 |-\u003e 4}, {4 |-\u003e 1}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"map sequence compatible","poExp":"(forall m1, m2 in set {{\u003cONEPONE\u003e |-\u003e 1}, {\u003cONEPTWO\u003e |-\u003e 2}, {\u003cONEPTHREE\u003e |-\u003e 3}, {\u003cONEPFOUR\u003e |-\u003e 4}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"map sequence compatible","poExp":"(forall m1, m2 in set {{0 |-\u003e \u003cPERP\u003e}, {1 |-\u003e \u003cFACING\u003e}, {2 |-\u003e \u003cPERP\u003e}, {3 |-\u003e \u003cAWAY\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"},{"poKind":"let be st existence","poExp":"(exists x:nat \u0026 true)"},{"poKind":"map apply","poExp":"(forall mk_Store(pes, exs, xmax, ymax):Store \u0026 ((xmax \u003e 0) \u003d\u003e ((ymax \u003e 0) \u003d\u003e (((dom pes) subset (dom exs)) \u003d\u003e (forall p in set (dom pes) \u0026 (p in set (dom exs)))))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e (1 in set (inds v))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e (2 in set (inds v))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e (3 in set (inds v))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e (4 in set (inds v))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (1 in set (inds v)))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (4 in set (inds v)))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (2 in set (inds v)))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (3 in set (inds v)))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (1 in set (inds v))))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (3 in set (inds v))))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (2 in set (inds v))))))"},{"poKind":"sequence apply","poExp":"(forall v:seq of (Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (4 in set (inds v))))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point \u0026 pre_sqrt(((((p2.x) - (p1.x)) ** 2) + (((p2.y) - (p1.y)) ** 2))))"},{"poKind":"function satisfiability","poExp":"(forall x:real \u0026 (pre_sqrt(x) \u003d\u003e (exists s:Realp \u0026 post_sqrt(x, s))))"},{"poKind":"function satisfiability","poExp":"(forall o:Object, m:Magazine \u0026 (pre_find_point(o, m) \u003d\u003e (exists pt:Point \u0026 post_find_point(o, m, pt))))"},{"poKind":"map apply","poExp":"(forall o:Object, m:Magazine \u0026 ((o.hzd) in set (dom hzdnum)))"},{"poKind":"map apply","poExp":"(forall o:Object, m:Magazine \u0026 ((m.hzd) in set (dom hzdnum)))"},{"poKind":"let be st existence","poExp":"(forall s:set of (real) \u0026 ((not (s \u003d {})) \u003d\u003e (exists x:real \u0026 (x in set s))))"},{"poKind":"recursive function","poExp":"(forall s:set of (real) \u0026 ((not (s \u003d {})) \u003d\u003e (forall x:real \u0026 ((x in set s) \u003d\u003e (Card(s) \u003e Card((s \\ {x})))))))"},{"poKind":"subtype","poExp":"(forall o:Object, m:Magazine \u0026 (((m.max_neq) \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_((m.max_neq), real)))"},{"poKind":"subtype","poExp":"(forall o:Object, m:Magazine \u0026 (((m.max_neq) \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_((o.neq), real)))"},{"poKind":"subtype","poExp":"(forall o:Object, m:Magazine \u0026 (((m.max_neq) \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_({((elt.object).neq) | elt in set (rng (m.elements))}, set of (real))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (((floor ang_sep(pes, exs)) div 90) \u003e\u003d 0))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in (is_(((exs.building).type), Storage_building) \u003d\u003e (((inc + (exs.door)) mod 4) in set (dom orientation))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in (is_(((exs.building).type), Storage_building) \u003d\u003e (((inc + (exs.door)) mod 4) \u003e\u003d 0)))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in ((((pes.mgzn).type) \u003d \u003cEARTHCOVEREDBUILDING\u003e) \u003d\u003e (((inc + (pes.door)) mod 4) in set (dom orientation))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in ((((pes.mgzn).type) \u003d \u003cEARTHCOVEREDBUILDING\u003e) \u003d\u003e (((inc + (pes.door)) mod 4) \u003e\u003d 0)))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 is_(let inc:nat \u003d rel_pos(pes, exs) in let exs_ro:(\u003cNONE\u003e | RelOrientation) \u003d (if is_(((exs.building).type), Storage_building)\nthen orientation(((inc + (exs.door)) mod 4))\nelse \u003cNONE\u003e), pes_ro:(\u003cNONE\u003e | RelOrientation) \u003d (if (((pes.mgzn).type) \u003d \u003cEARTHCOVEREDBUILDING\u003e)\nthen orientation(((inc + (pes.door)) mod 4))\nelse \u003cNONE\u003e) in let o_exs:(Exs_types * (\u003cNONE\u003e | RelOrientation)) \u003d mk_(((exs.building).type), exs_ro), o_pes:(Pes_types * (\u003cNONE\u003e | RelOrientation)) \u003d mk_(((pes.mgzn).type), pes_ro) in mk_(o_exs, o_pes), (OrientedExs * OrientedPes)))"},{"poKind":"function satisfiability","poExp":"(forall s:set of (Realp) \u0026 (pre_min(s) \u003d\u003e (exists m:Realp \u0026 post_min(s, m))))"},{"poKind":"function satisfiability","poExp":"(forall s:set of (Realp) \u0026 (pre_max(s) \u003d\u003e (exists m:Realp \u0026 post_max(s, m))))"},{"poKind":"finite set","poExp":"(forall p1:Point, p2:Point \u0026 (((p2.x) \u003d (p1.x)) \u003d\u003e (exists finmap1:map (nat) to (Point) \u0026 (forall y:Realp \u0026 ((truncated(y) and ((min({(p1.y), (p2.y)}) \u003c\u003d y) and (y \u003c\u003d max({(p1.y), (p2.y)})))) \u003d\u003e (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d mk_Point((p1.x), y))))))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point \u0026 (((p2.x) \u003d (p1.x)) \u003d\u003e (forall y:Realp \u0026 (truncated(y) \u003d\u003e pre_min({(p1.y), (p2.y)})))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point \u0026 (((p2.x) \u003d (p1.x)) \u003d\u003e (forall y:Realp \u0026 (truncated(y) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e pre_max({(p1.y), (p2.y)}))))))"},{"poKind":"finite set","poExp":"(forall p1:Point, p2:Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (exists finmap1:map (nat) to (Point) \u0026 (forall x:Realp, y:Realp \u0026 ((truncated(x) and (truncated(y) and ((min({(p1.x), (p2.x)}) \u003c\u003d x) and ((x \u003c\u003d max({(p1.x), (p2.x)})) and ((min({(p1.y), (p2.y)}) \u003c\u003d y) and ((y \u003c\u003d max({(p1.y), (p2.y)})) and (if (x \u003c\u003e (p1.x))\nthen (((y - (p1.y)) / (x - (p1.x))) \u003d (((p2.y) - (p1.y)) / ((p2.x) - (p1.x))))\nelse (y \u003d (p1.y))))))))) \u003d\u003e (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d mk_Point(x, y))))))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:Realp, y:Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e pre_min({(p1.x), (p2.x)}))))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:Realp, y:Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e pre_max({(p1.x), (p2.x)})))))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:Realp, y:Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e pre_min({(p1.y), (p2.y)}))))))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:Realp, y:Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e pre_max({(p1.y), (p2.y)})))))))))"},{"poKind":"non-zero","poExp":"(forall p1:Point, p2:Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:Realp, y:Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e ((y \u003c\u003d max({(p1.y), (p2.y)})) \u003d\u003e ((x \u003c\u003e (p1.x)) \u003d\u003e ((x - (p1.x)) \u003c\u003e 0)))))))))))"},{"poKind":"non-zero","poExp":"(forall p1:Point, p2:Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:Realp, y:Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e ((y \u003c\u003d max({(p1.y), (p2.y)})) \u003d\u003e ((x \u003c\u003e (p1.x)) \u003d\u003e (((p2.x) - (p1.x)) \u003c\u003e 0)))))))))))"},{"poKind":"sequence apply","poExp":"(forall site:(Exposed_site | Pot_explosion_site) \u0026 (forall i in set {1, ... ,4} \u0026 (i in set (inds (site.vertices)))))"},{"poKind":"sequence apply","poExp":"(forall site:(Exposed_site | Pot_explosion_site) \u0026 (forall i in set {1, ... ,4} \u0026 (next_point(i) in set (inds (site.vertices)))))"},{"poKind":"map apply","poExp":"(forall site:(Exposed_site | Pot_explosion_site) \u0026 (forall i in set {1, ... ,4} \u0026 (i in set (dom next_point))))"},{"poKind":"subtype","poExp":"(forall site:(Exposed_site | Pot_explosion_site) \u0026 (forall i in set {1, ... ,4} \u0026 (i \u003e\u003d 0)))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 pre_min({distance(p1, p2) | p1:Point, p2:Point \u0026 ((p1 in set perimeter(pes)) and (p2 in set perimeter(exs)))}))"},{"poKind":"finite set","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists finmap1:map (nat) to (Metre) \u0026 (forall p1:Point, p2:Point \u0026 (((p1 in set perimeter(pes)) and (p2 in set perimeter(exs))) \u003d\u003e (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d distance(p1, p2)))))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (table_entry(pes, exs) in set (dom bsharp(((pes.mgzn).hzd)))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (((pes.mgzn).hzd) in set (dom bsharp)))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_1)) \u003d\u003e (tbe in set (dom asharp(\u003cONEPONE\u003e))))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_1)) \u003d\u003e (\u003cONEPONE\u003e in set (dom asharp)))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_2)) \u003d\u003e (tbe in set (dom asharp(\u003cONEPTWO\u003e)))))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_2)) \u003d\u003e (\u003cONEPTWO\u003e in set (dom asharp))))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((tbe in set exceptions_hd1_3b) \u003d\u003e (tbe in set (dom asharp(\u003cONEPTHREE\u003e)))))))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((tbe in set exceptions_hd1_3b) \u003d\u003e (\u003cONEPTHREE\u003e in set (dom asharp))))))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((not (tbe in set exceptions_hd1_3b)) \u003d\u003e (tbe in set (dom asharp(\u003cONEPTHREE\u003e)))))))))"},{"poKind":"map apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((not (tbe in set exceptions_hd1_3b)) \u003d\u003e (\u003cONEPTHREE\u003e in set (dom asharp))))))))"},{"poKind":"cases exhaustive","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in ((((((pes.mgzn).hzd) \u003d \u003cONEPONE\u003e) or (((pes.mgzn).hzd) \u003d \u003cONEPTWO\u003e)) or (((pes.mgzn).hzd) \u003d \u003cONEPTHREE\u003e)) or (((pes.mgzn).hzd) \u003d \u003cONEPFOUR\u003e)))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (inv_Kg(let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :\n(\u003cONEPONE\u003e) -\u003e (if (tbe in set exceptions_hd1_1)\nthen (if (d \u003c 180)\nthen (0.54 * (d ** (3 / 2)))\nelseif ((180 \u003c\u003d d) and (d \u003c 240))\nthen (0.03 * (d ** 2))\nelse ((9.1 * (10 ** -5)) * (d ** 3)))\nelse (asharp(\u003cONEPONE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPTWO\u003e) -\u003e (if (tbe in set exceptions_hd1_2)\nthen \u003cINFINITY\u003e\nelse (asharp(\u003cONEPTWO\u003e)(tbe) * (d ** 5.5))),\n(\u003cONEPTHREE\u003e) -\u003e (if (tbe in set exceptions_hd1_3a)\nthen \u003cINFINITY\u003e\nelseif (tbe in set exceptions_hd1_3b)\nthen (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 2))\nelse (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPFOUR\u003e) -\u003e \u003cINFINITY\u003e\n end)) and (is_(let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :\n(\u003cONEPONE\u003e) -\u003e (if (tbe in set exceptions_hd1_1)\nthen (if (d \u003c 180)\nthen (0.54 * (d ** (3 / 2)))\nelseif ((180 \u003c\u003d d) and (d \u003c 240))\nthen (0.03 * (d ** 2))\nelse ((9.1 * (10 ** -5)) * (d ** 3)))\nelse (asharp(\u003cONEPONE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPTWO\u003e) -\u003e (if (tbe in set exceptions_hd1_2)\nthen \u003cINFINITY\u003e\nelse (asharp(\u003cONEPTWO\u003e)(tbe) * (d ** 5.5))),\n(\u003cONEPTHREE\u003e) -\u003e (if (tbe in set exceptions_hd1_3a)\nthen \u003cINFINITY\u003e\nelseif (tbe in set exceptions_hd1_3b)\nthen (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 2))\nelse (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPFOUR\u003e) -\u003e \u003cINFINITY\u003e\n end), Inf) or is_(let d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :\n(\u003cONEPONE\u003e) -\u003e (if (tbe in set exceptions_hd1_1)\nthen (if (d \u003c 180)\nthen (0.54 * (d ** (3 / 2)))\nelseif ((180 \u003c\u003d d) and (d \u003c 240))\nthen (0.03 * (d ** 2))\nelse ((9.1 * (10 ** -5)) * (d ** 3)))\nelse (asharp(\u003cONEPONE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPTWO\u003e) -\u003e (if (tbe in set exceptions_hd1_2)\nthen \u003cINFINITY\u003e\nelse (asharp(\u003cONEPTWO\u003e)(tbe) * (d ** 5.5))),\n(\u003cONEPTHREE\u003e) -\u003e (if (tbe in set exceptions_hd1_3a)\nthen \u003cINFINITY\u003e\nelseif (tbe in set exceptions_hd1_3b)\nthen (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 2))\nelse (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPFOUR\u003e) -\u003e \u003cINFINITY\u003e\n end), real))))"},{"poKind":"function satisfiability","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (pre_nearest_storage_building(pes, exs) \u003d\u003e (exists e:Exposed_site \u0026 post_nearest_storage_building(pes, exs, e))))"},{"poKind":"function satisfiability","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (pre_nearest_inhabited_building(pes, exs) \u003d\u003e (exists e:Exposed_site \u0026 post_nearest_inhabited_building(pes, exs, e))))"},{"poKind":"function satisfiability","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (pre_nearest_traffic_route(pes, exs) \u003d\u003e (exists e:Exposed_site \u0026 post_nearest_traffic_route(pes, exs, e))))"},{"poKind":"function satisfiability","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (pre_nearest_process_building(pes, exs) \u003d\u003e (exists e:Exposed_site \u0026 post_nearest_process_building(pes, exs, e))))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (exists exset:set of (Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e pre_nearest_storage_building(pes, exs))))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (exists exset:set of (Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e (((nearest_storage_building(pes, exs) in set exset) and (exists e in set exs \u0026 is_(((e.building).type), Process_building))) \u003d\u003e pre_nearest_process_building(pes, exs)))))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (exists exset:set of (Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e (((nearest_storage_building(pes, exs) in set exset) and (exists e in set exs \u0026 is_(((e.building).type), Process_building))) \u003d\u003e (((nearest_process_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e))) \u003d\u003e pre_nearest_inhabited_building(pes, exs))))))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (exists exset:set of (Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e (((nearest_storage_building(pes, exs) in set exset) and (exists e in set exs \u0026 is_(((e.building).type), Process_building))) \u003d\u003e (((nearest_process_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e))) \u003d\u003e (((nearest_inhabited_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cTRAFFICROUTE\u003e))) \u003d\u003e pre_nearest_traffic_route(pes, exs)))))))"},{"poKind":"function satisfiability","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 (exists exset:set of (Exposed_site) \u0026 post_nearest_buildings(pes, exs, exset)))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 ((exs \u003c\u003e {}) \u003d\u003e pre_min({qd(pes, e) | e in set nearest_buildings(pes, exs)})))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 ((exs \u003c\u003e {}) \u003d\u003e is_({qd(pes, e) | e in set nearest_buildings(pes, exs)}, set of (Realp))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:set of (Exposed_site) \u0026 ((exs \u003c\u003e {}) \u003d\u003e inv_Kg(min({qd(pes, e) | e in set nearest_buildings(pes, exs)}))))"},{"poKind":"sequence apply","poExp":"(forall v:Quad \u0026 (exists p:Point \u0026 (forall i in set {1, ... ,3} \u0026 (i in set (inds v)))))"},{"poKind":"sequence apply","poExp":"(forall v:Quad \u0026 (exists p:Point \u0026 (forall i in set {1, ... ,3} \u0026 (1 in set (inds v)))))"},{"poKind":"function satisfiability","poExp":"(forall v:Quad \u0026 (exists p:Point \u0026 post_centre(v, p)))"},{"poKind":"non-zero","poExp":"(forall p1:Point, p2:Point, p3:Point \u0026 ((distance(p1, p3) \u003d distance(p2, p3)) \u003d\u003e ((((p1.x) + (p2.x)) - (2 * (p3.x))) \u003c\u003e 0)))"},{"poKind":"non-zero","poExp":"(forall p1:Point, p2:Point, p3:Point \u0026 ((distance(p1, p3) \u003d distance(p2, p3)) \u003d\u003e ((((p1.x) + (p2.x)) - (2 * (p3.x))) \u003c\u003e 0)))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 ((distance(p1, p2) \u003d distance(p1, p4)) \u003d\u003e ((distance(p2, p5) \u003d distance(p2, p6)) \u003d\u003e pre_line_eqn(p5, p6, p2))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 ((distance(p1, p2) \u003d distance(p1, p4)) \u003d\u003e ((distance(p2, p5) \u003d distance(p2, p6)) \u003d\u003e pre_line_eqn(p3, p4, p1))))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e pre_line_eqn(p5, p6, p2)))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):Line \u003d line_eqn(p5, p6, p2) in pre_line_eqn(p3, p4, p1)))"},{"poKind":"non-zero","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):Line \u003d line_eqn(p3, p4, p1) in ((m2 - m1) \u003c\u003e 0)))"},{"poKind":"non-zero","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):Line \u003d line_eqn(p3, p4, p1) in let x3:real \u003d ((c1 - c2) / (m2 - m1)) in ((m2 - m1) \u003c\u003e 0)))"},{"poKind":"function apply","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):Line \u003d line_eqn(p3, p4, p1) in let x3:real \u003d ((c1 - c2) / (m2 - m1)) in let y3:real \u003d (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in pre_sqrt(((((x3 - (p2.x)) ** 2) + ((y3 - (p2.y)) ** 2)) / (((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2))))))"},{"poKind":"non-zero","poExp":"(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):Line \u003d line_eqn(p3, p4, p1) in let x3:real \u003d ((c1 - c2) / (m2 - m1)) in let y3:real \u003d (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in ((((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2)) \u003c\u003e 0)))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 pre_incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 (inv_Quad((pes.vertices)) and is_((pes.vertices), seq of (Point)))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 (1 in set (inds (pes.vertices)))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 (4 in set (inds (pes.vertices)))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 (1 in set (inds (exs.vertices)))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 (2 in set (inds (exs.vertices)))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in (inv_Quad((pes.vertices)) and is_((pes.vertices), seq of (Point)))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in (((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x)) \u003d\u003e (inv_Quad((pes.vertices)) and is_((pes.vertices), seq of (Point))))))"},{"poKind":"function apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e pre_line_eqn((pes.vertices)(1), (pes.vertices)(4), centre((pes.vertices))))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (1 in set (inds (pes.vertices))))))"},{"poKind":"sequence apply","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (4 in set (inds (pes.vertices))))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (inv_Quad((pes.vertices)) and is_((pes.vertices), seq of (Point))))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (inv_Quad((pes.vertices)) and is_((pes.vertices), seq of (Point))))))"},{"poKind":"subtype","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (inv_Quad((pes.vertices)) and is_((pes.vertices), seq of (Point))))))"},{"poKind":"non-zero","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (((centre((exs.vertices)).x) - (centre((pes.vertices)).x)) \u003c\u003e 0))))"},{"poKind":"function satisfiability","poExp":"(forall pes:Pot_explosion_site, exs:Exposed_site \u0026 (exists qsharp:real \u0026 post_ang_sep(pes, exs, qsharp)))"},{"poKind":"let be st existence","poExp":"(forall r:real \u0026 (exists res:real \u0026 true))"},{"poKind":"map apply","poExp":"((site in set (dom pes)) \u003d\u003e (forall pt:Point \u0026 (site in set (dom pes))))"},{"poKind":"map apply","poExp":"((site in set (dom pes)) \u003d\u003e (forall pt:Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) \u003d\u003e (site in set (dom pes)))))"},{"poKind":"map apply","poExp":"(((site in set (dom pes)) and (exists pt:Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) and (elt not in set (dom ((pes(site).mgzn).elements)))))) \u003d\u003e (site in set (dom pes~)))"},{"poKind":"function apply","poExp":"(((site in set (dom pes)) and (exists pt:Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) and (elt not in set (dom ((pes(site).mgzn).elements)))))) \u003d\u003e let p:Pot_explosion_site \u003d pes~(site) in pre_find_point(o, (p.mgzn)))"},{"poKind":"subtype","poExp":"(((site in set (dom pes)) and (exists pt:Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) and (elt not in set (dom ((pes(site).mgzn).elements)))))) \u003d\u003e let p:Pot_explosion_site \u003d pes~(site) in let mk_Point(x, y):Point \u003d find_point(o, (p.mgzn)) in let new_elems:map (Element_label) to (Element) \u003d (((p.mgzn).elements) ++ {elt |-\u003e mk_Element(o, x, y)}) in is_(new_elems, inmap (Element_label) to (Element)))"},{"poKind":"operation satisfiability","poExp":"(forall o:Object, elt:Element_label, site:Site_label, oldstate:Store \u0026 (pre_ADD_OBJECT(o, elt, site, oldstate) \u003d\u003e (exists newstate:Store \u0026 post_ADD_OBJECT(o, elt, site, oldstate, newstate))))"},{"poKind":"map apply","poExp":"((site in set (dom pes)) \u003d\u003e (site in set (dom pes)))"},{"poKind":"map apply","poExp":"(((site in set (dom pes)) and (elt in set (dom ((pes(site).mgzn).elements)))) \u003d\u003e (site in set (dom pes~)))"},{"poKind":"operation satisfiability","poExp":"(forall elt:Element_label, site:Site_label, oldstate:Store \u0026 (pre_REMOVE_OBJECT(elt, site, oldstate) \u003d\u003e (exists newstate:Store \u0026 post_REMOVE_OBJECT(elt, site, oldstate, newstate))))"},{"poKind":"function apply","poExp":"((forall exp in set (rng exs) \u0026 (min_separation(pex, exp) and (forall v in set (elems (pex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and (label not in set (dom pes)))))) \u003d\u003e pre_find_max_neq(pex, (rng exs~)))"},{"poKind":"subtype","poExp":"((forall exp in set (rng exs) \u0026 (min_separation(pex, exp) and (forall v in set (elems (pex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and (label not in set (dom pes)))))) \u003d\u003e let new_neq:Kg \u003d find_max_neq(pex, (rng exs~)) in let new_mgzn:Magazine \u003d mu((pex.mgzn), max_neq |-\u003e new_neq) in let new_pex:Pot_explosion_site \u003d mu(pex, mgzn |-\u003e new_mgzn) in let new_building:Building \u003d mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in (inv_Quad((pex.vertices)) and is_((pex.vertices), seq of (Point))))"},{"poKind":"subtype","poExp":"((forall exp in set (rng exs) \u0026 (min_separation(pex, exp) and (forall v in set (elems (pex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and (label not in set (dom pes)))))) \u003d\u003e let new_neq:Kg \u003d find_max_neq(pex, (rng exs~)) in let new_mgzn:Magazine \u003d mu((pex.mgzn), max_neq |-\u003e new_neq) in let new_pex:Pot_explosion_site \u003d mu(pex, mgzn |-\u003e new_mgzn) in let new_building:Building \u003d mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in (inv_Exposed_site(mk_Exposed_site(new_building, (pex.vertices), (pex.door))) and (inv_Quad((pex.vertices)) and is_((pex.vertices), seq of (Point)))))"},{"poKind":"operation satisfiability","poExp":"(forall pex:Pot_explosion_site, label:Site_label, type:Storage_building, oldstate:Store \u0026 (pre_ADD_PES(pex, label, type, oldstate) \u003d\u003e (exists newstate:Store \u0026 post_ADD_PES(pex, label, type, oldstate, newstate))))"},{"poKind":"function apply","poExp":"((not is_(((ex.building).type), Storage_building)) \u003d\u003e (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) \u003d\u003e ((label not in set (dom exs)) \u003d\u003e (forall pex in set (rng pes) \u0026 pre_find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))))))))"},{"poKind":"subtype","poExp":"((not is_(((ex.building).type), Storage_building)) \u003d\u003e (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) \u003d\u003e ((label not in set (dom exs)) \u003d\u003e (forall pex in set (rng pes) \u0026 let proposed_neq:Kg \u003d find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))) in ((proposed_neq \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_(find_max_neq(pex, (rng exs)), real)))))))"},{"poKind":"subtype","poExp":"((not is_(((ex.building).type), Storage_building)) \u003d\u003e (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) \u003d\u003e ((label not in set (dom exs)) \u003d\u003e (forall pex in set (rng pes) \u0026 let proposed_neq:Kg \u003d find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))) in ((proposed_neq \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_(proposed_neq, real)))))))"},{"poKind":"function apply","poExp":"((not is_(((ex.building).type), Storage_building)) \u003d\u003e (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) \u003d\u003e ((label not in set (dom exs)) \u003d\u003e (forall pex in set (rng pes) \u0026 let proposed_neq:Kg \u003d find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))) in ((proposed_neq \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e pre_find_max_neq(pex, (rng exs))))))))"},{"poKind":"operation satisfiability","poExp":"(forall ex:Exposed_site, label:Site_label, oldstate:Store \u0026 (pre_ADD_EXP(ex, label, oldstate) \u003d\u003e (exists newstate:Store \u0026 post_ADD_EXP(ex, label, oldstate, newstate))))"}]