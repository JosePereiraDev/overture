["type invariant satisfiable obligation:(exists mk_Planning_Problem(AS, I, G):Planning_Problem \u0026 (forall l in set G \u0026 (((l in set I) or (exists A in set AS \u0026 (l in set (A.add)))) and ((not (G subset I)) and (forall A in set AS \u0026 (not (exists p:Literal \u0026 ((p in set (A.add)) and (p in set (A.del))))))))))","type invariant satisfiable obligation:(exists p:Bounded_Poset \u0026 (forall x, y in set get_nodes(p) \u0026 (((not (before(x, y, p) and before(y, x, p))) and (x \u003c\u003e mk_token(\"pinit\"))) \u003d\u003e ((before(mk_token(\"pinit\"), x, p) and (x \u003c\u003e mk_token(\"goal\"))) \u003d\u003e before(x, mk_token(\"goal\"), p)))))","legal map application obligation:(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan \u0026 (mk_token(\"pinit\") in set (dom Os)))","legal map application obligation:(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan \u0026 ((Os(mk_token(\"pinit\")) \u003d mk_Action([mk_token(\"pinit\")], {}, (pp.I), {})) \u003d\u003e (mk_token(\"goal\") in set (dom Os))))","legal map application obligation:(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan \u0026 ((Os(mk_token(\"pinit\")) \u003d mk_Action([mk_token(\"pinit\")], {}, (pp.I), {})) \u003d\u003e ((Os(mk_token(\"goal\")) \u003d mk_Action([mk_token(\"goal\")], (pp.G), {}, {})) \u003d\u003e (mk_token(\"pinit\") in set (dom Os)))))","legal map application obligation:(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan \u0026 ((Os(mk_token(\"pinit\")) \u003d mk_Action([mk_token(\"pinit\")], {}, (pp.I), {})) \u003d\u003e ((Os(mk_token(\"goal\")) \u003d mk_Action([mk_token(\"goal\")], (pp.G), {}, {})) \u003d\u003e (mk_token(\"goal\") in set (dom Os)))))","legal map application obligation:(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan \u0026 ((Os(mk_token(\"pinit\")) \u003d mk_Action([mk_token(\"pinit\")], {}, (pp.I), {})) \u003d\u003e ((Os(mk_token(\"goal\")) \u003d mk_Action([mk_token(\"goal\")], (pp.G), {}, {})) \u003d\u003e (((rng Os) subset ((pp.AS) union {Os(mk_token(\"pinit\")), Os(mk_token(\"goal\"))})) \u003d\u003e (((dom Os) \u003d get_nodes(Ts)) \u003d\u003e (((As inter Ps) \u003d {}) \u003d\u003e (forall A in set (dom Os) \u0026 (A in set (dom Os)))))))))","type compatibility obligation:(inv_Bounded_Poset({mk_Arc(mk_token(\"pinit\"), mk_token(\"goal\"))}) and is_({mk_Arc(mk_token(\"pinit\"), mk_token(\"goal\"))}, set of (Arc)))","type compatibility obligation:(forall u:Action_id, p:Bounded_Poset \u0026 (inv_Bounded_Poset((p union {mk_Arc(mk_token(\"pinit\"), u), mk_Arc(u, mk_token(\"goal\"))})) and is_((p union {mk_Arc(mk_token(\"pinit\"), u), mk_Arc(u, mk_token(\"goal\"))}), set of (Arc))))","type compatibility obligation:(forall u:Action_id, v:Action_id, p:Bounded_Poset \u0026 (inv_Bounded_Poset((if (possibly_before(u, v, p) and ({u, v} subset get_nodes(p)))\nthen (p union {mk_Arc(u, v)})\nelse p)) and is_((if (possibly_before(u, v, p) and ({u, v} subset get_nodes(p)))\nthen (p union {mk_Arc(u, v)})\nelse p), set of (Arc))))","function postcondition satisfiable obligation:(forall isa:set of (Action_id) \u0026 (exists i:Action_id \u0026 post_newid(isa, i)))","legal map application obligation:(forall Os:Action_instances, Ts:Bounded_Poset, A:Action_id, mk_Goal_instance(p, O):Goal_instance \u0026 (before(A, O, Ts) \u003d\u003e (A in set (dom Os))))","legal map application obligation:(forall Os:Action_instances, Ts:Bounded_Poset, A:Action_id, mk_Goal_instance(p, O):Goal_instance \u0026 (before(A, O, Ts) \u003d\u003e ((p in set (Os(A).add)) \u003d\u003e (forall C in set (dom Os) \u0026 (possibly_before(C, O, Ts) \u003d\u003e (possibly_before(A, C, Ts) \u003d\u003e (C in set (dom Os))))))))","legal map application obligation:(forall Os:Action_instances, Ts:Bounded_Poset, NewA:Action_id, mk_Goal_instance(q, C):Goal_instance \u0026 ((not before(C, NewA, Ts)) \u003d\u003e (NewA in set (dom Os))))","legal map application obligation:(forall Os:Action_instances, Ts:Bounded_Poset, NewA:Action_id, mk_Goal_instance(q, C):Goal_instance \u0026 ((not before(C, NewA, Ts)) \u003d\u003e ((not (not (q in set (Os(NewA).del)))) \u003d\u003e (forall W in set (dom Os) \u0026 (before(NewA, W, Ts) \u003d\u003e (before(W, C, Ts) \u003d\u003e (W in set (dom Os))))))))","enumeration map injectivity obligation:((pp \u003d ppi) \u003d\u003e (forall m1, m2 in set {{mk_token(\"pinit\") |-\u003e mk_Action([mk_token(\"pinit\")], {}, (ppi.I), {})}, {mk_token(\"goal\") |-\u003e mk_Action([mk_token(\"goal\")], (ppi.G), {}, {})}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","operation postcondition satisfiable obligation:(forall ppi:Planning_Problem, oldstate:Partial_Plan \u0026 (exists newstate:Partial_Plan \u0026 post_INIT(ppi, oldstate, newstate)))","operation postcondition satisfiable obligation:(forall gi:Goal_instance, oldstate:Partial_Plan \u0026 (pre_ACHIEVE_1(gi, oldstate) \u003d\u003e (exists newstate:Partial_Plan \u0026 post_ACHIEVE_1(gi, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall gi:Goal_instance, oldstate:Partial_Plan \u0026 (pre_ACHIEVE_2(gi, oldstate) \u003d\u003e (exists newstate:Partial_Plan \u0026 post_ACHIEVE_2(gi, oldstate, newstate))))"]