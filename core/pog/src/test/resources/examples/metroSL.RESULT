["state invariant holds obligation:((doors \u003d \u003cClosed\u003e) \u003d\u003e let mk_Metro(doors, train) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e))))","state invariant holds obligation:let mk_Metro(doors, train) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))","state invariant holds obligation:((train \u003d \u003cStopped\u003e) \u003d\u003e let mk_Metro(doors, train) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e))))","state invariant holds obligation:let mk_Metro(doors, train) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))","operation postcondition satisfiable obligation:(pre_Accelerate(oldstate) \u003d\u003e (exists newstate:Metro \u0026 post_Accelerate(oldstate, newstate)))","operation postcondition satisfiable obligation:(exists newstate:Metro \u0026 post_Break(oldstate, newstate))","operation postcondition satisfiable obligation:(pre_Open(oldstate) \u003d\u003e (exists newstate:Metro \u0026 post_Open(oldstate, newstate)))","operation postcondition satisfiable obligation:(exists newstate:Metro \u0026 post_Close(oldstate, newstate))","state invariant holds obligation:((doors \u003d \u003cOpen\u003e) \u003d\u003e let mk_Metro(doors, train, bellon) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e))))","state invariant holds obligation:let mk_Metro(doors, train, bellon) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))","state invariant holds obligation:((train \u003d \u003cStopped\u003e) \u003d\u003e let mk_Metro(doors, train, bellon) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e))))","state invariant holds obligation:(forall t:Time, oldstate:Metro \u0026 ((bellon \u003d nil) \u003d\u003e let mk_Metro(doors, train, bellon) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))))","state invariant holds obligation:(forall t:Time, oldstate:Metro \u0026 ((bellon \u003c\u003e nil) \u003d\u003e let mk_Metro(doors, train, bellon) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))))","state invariant holds obligation:(forall t:Time, oldstate:Metro \u0026 ((bellon \u003c\u003e nil) \u003d\u003e let mk_Metro(doors, train, bellon) \u003d Metro in (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))))","type invariant satisfiable obligation:(exists t:Time \u0026 (t \u003e 0))","type invariant satisfiable obligation:(exists mk_Interval(s, e):Interval \u0026 (s \u003c e))","legal sequence application obligation:(forall s:seq of (Interval) \u0026 (forall i in set {1, ... ,((len s) - 1)} \u0026 (i in set (inds s))))","legal sequence application obligation:(forall s:seq of (Interval) \u0026 (forall i in set {1, ... ,((len s) - 1)} \u0026 ((i + 1) in set (inds s))))","type invariant satisfiable obligation:(exists s:LifeTime \u0026 (forall i in set {1, ... ,((len s) - 1)} \u0026 ((s(i).stop) \u003c (s((i + 1)).start))))","type invariant satisfiable obligation:(exists mk_System(train, doors, bell, closebut, closeassist):System \u0026 (NotMovingAndOpen(train, doors) and (BellOnWhenCloseBut(bell, closebut) and CloseAssistAfter3Secs(closeassist, bell))))","legal sequence application obligation:(forall train:LifeTime, doors:LifeTime \u0026 (forall i in set (inds train), j in set (inds doors) \u0026 (i in set (inds train))))","legal sequence application obligation:(forall train:LifeTime, doors:LifeTime \u0026 (forall i in set (inds train), j in set (inds doors) \u0026 (j in set (inds doors))))","legal sequence application obligation:(forall closeassist:LifeTime, bell:LifeTime \u0026 (forall i in set (inds closeassist) \u0026 (forall j in set (inds bell) \u0026 (j in set (inds bell)))))","legal sequence application obligation:(forall closeassist:LifeTime, bell:LifeTime \u0026 (forall i in set (inds closeassist) \u0026 (forall j in set (inds bell) \u0026 (j in set (inds bell)))))","legal sequence application obligation:(forall closeassist:LifeTime, bell:LifeTime \u0026 (forall i in set (inds closeassist) \u0026 (forall j in set (inds bell) \u0026 (((bell(j).stop) \u003e\u003d ((bell(j).start) + 3)) \u003d\u003e (i in set (inds closeassist))))))","legal sequence application obligation:(forall closeassist:LifeTime, bell:LifeTime \u0026 (forall i in set (inds closeassist) \u0026 (forall j in set (inds bell) \u0026 (((bell(j).stop) \u003e\u003d ((bell(j).start) + 3)) \u003d\u003e (j in set (inds bell))))))","legal sequence application obligation:(forall bell:LifeTime, closebut:LifeTime \u0026 (forall i in set (inds bell) \u0026 (forall j in set (inds closebut) \u0026 (i in set (inds bell)))))","legal sequence application obligation:(forall bell:LifeTime, closebut:LifeTime \u0026 (forall i in set (inds bell) \u0026 (forall j in set (inds closebut) \u0026 (j in set (inds closebut)))))"]