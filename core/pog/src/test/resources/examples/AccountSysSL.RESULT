["type invariant satisfiable obligation:(exists mk_Transaction(-, a, -):Transaction \u0026 (a \u003e 0))","type invariant satisfiable obligation:(exists mk_Account(-, -, b, l, t):Account \u0026 ((l \u003e\u003d 0) and ((b \u003e\u003d l) and (balanceOf(t) \u003d b))))","legal map application obligation:(forall mk_AccountSys(a):AccountSys \u0026 (forall num in set (dom a) \u0026 (num in set (dom a))))","legal sequence application obligation:(forall transln:seq of (Transaction) \u0026 (forall i in set (inds transln) \u0026 (((transln(i).transaction_type) \u003d \u003cDeposit\u003e) \u003d\u003e (i in set (inds transln)))))","legal sequence application obligation:(forall transln:seq of (Transaction) \u0026 (forall i in set (inds transln) \u0026 (i in set (inds transln))))","legal sequence application obligation:(forall transln:seq of (Transaction) \u0026 (forall i in set (inds transln) \u0026 (((transln(i).transaction_type) \u003d \u003cWithdrawal\u003e) \u003d\u003e (i in set (inds transln)))))","legal sequence application obligation:(forall transln:seq of (Transaction) \u0026 (forall i in set (inds transln) \u0026 (i in set (inds transln))))","non-empty sequence obligation:(forall seqln:seq of (real) \u0026 ((not (seqln \u003d [])) \u003d\u003e (seqln \u003c\u003e [])))","recursive function obligation:(forall seqln:seq of (real) \u0026 ((not (seqln \u003d [])) \u003d\u003e (Len(seqln) \u003e Len((tl seqln)))))","non-empty sequence obligation:(forall seqln:seq of (real) \u0026 ((not (seqln \u003d [])) \u003d\u003e (seqln \u003c\u003e [])))","type compatibility obligation:(((numberIn not in set (dom accounts)) and (limitIn \u003e\u003d 0)) \u003d\u003e inv_Account(mk_Account(numberIn, detailsIn, 0, limitIn, [])))","map compatible obligation:(((numberIn not in set (dom accounts)) and (limitIn \u003e\u003d 0)) \u003d\u003e (forall ldom1 in set (dom accounts~), rdom2 in set (dom {numberIn |-\u003e mk_Account(numberIn, detailsIn, 0, limitIn, [])}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (accounts~(ldom1) \u003d {numberIn |-\u003e mk_Account(numberIn, detailsIn, 0, limitIn, [])}(rdom2)))))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, detailsIn:Details, limitIn:real, oldstate:AccountSys \u0026 (pre_addAccount(numberIn, detailsIn, limitIn, oldstate) \u003d\u003e (exists newstate:AccountSys \u0026 post_addAccount(numberIn, detailsIn, limitIn, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, oldstate:AccountSys \u0026 (pre_removeAccount(numberIn, oldstate) \u003d\u003e (exists newstate:AccountSys \u0026 post_removeAccount(numberIn, oldstate, newstate))))","legal map application obligation:(((numberIn in set (dom accounts)) and (amountIn \u003e\u003d 0)) \u003d\u003e (numberIn in set (dom accounts~)))","legal map application obligation:(((numberIn in set (dom accounts)) and (amountIn \u003e\u003d 0)) \u003d\u003e (numberIn in set (dom accounts~)))","type compatibility obligation:(((numberIn in set (dom accounts)) and (amountIn \u003e\u003d 0)) \u003d\u003e let bal:real \u003d (accounts~(numberIn).balance), trans:seq of (Transaction) \u003d (accounts~(numberIn).transactions) in inv_Transaction(mk_Transaction(dateIn, amountIn, \u003cDeposit\u003e)))","legal map application obligation:(((numberIn in set (dom accounts)) and (amountIn \u003e\u003d 0)) \u003d\u003e let bal:real \u003d (accounts~(numberIn).balance), trans:seq of (Transaction) \u003d (accounts~(numberIn).transactions) in let newTrans:Transaction \u003d mk_Transaction(dateIn, amountIn, \u003cDeposit\u003e) in (numberIn in set (dom accounts~)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, dateIn:Date, amountIn:real, oldstate:AccountSys \u0026 (pre_deposit(numberIn, dateIn, amountIn, oldstate) \u003d\u003e (exists newstate:AccountSys \u0026 post_deposit(numberIn, dateIn, amountIn, oldstate, newstate))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e ((amountIn \u003e\u003d 0) \u003d\u003e (numberIn in set (dom accounts))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e ((amountIn \u003e\u003d 0) \u003d\u003e (numberIn in set (dom accounts))))","legal map application obligation:(((numberIn in set (dom accounts)) and ((amountIn \u003e\u003d 0) and (((accounts(numberIn).balance) - amountIn) \u003e\u003d (accounts(numberIn).limit)))) \u003d\u003e (numberIn in set (dom accounts~)))","legal map application obligation:(((numberIn in set (dom accounts)) and ((amountIn \u003e\u003d 0) and (((accounts(numberIn).balance) - amountIn) \u003e\u003d (accounts(numberIn).limit)))) \u003d\u003e (numberIn in set (dom accounts~)))","type compatibility obligation:(((numberIn in set (dom accounts)) and ((amountIn \u003e\u003d 0) and (((accounts(numberIn).balance) - amountIn) \u003e\u003d (accounts(numberIn).limit)))) \u003d\u003e let bal:real \u003d (accounts~(numberIn).balance), trans:seq of (Transaction) \u003d (accounts~(numberIn).transactions) in inv_Transaction(mk_Transaction(dateIn, amountIn, \u003cWithdrawal\u003e)))","legal map application obligation:(((numberIn in set (dom accounts)) and ((amountIn \u003e\u003d 0) and (((accounts(numberIn).balance) - amountIn) \u003e\u003d (accounts(numberIn).limit)))) \u003d\u003e let bal:real \u003d (accounts~(numberIn).balance), trans:seq of (Transaction) \u003d (accounts~(numberIn).transactions) in let newTrans:Transaction \u003d mk_Transaction(dateIn, amountIn, \u003cWithdrawal\u003e) in (numberIn in set (dom accounts~)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, dateIn:Date, amountIn:real, oldstate:AccountSys \u0026 (pre_withdraw(numberIn, dateIn, amountIn, oldstate) \u003d\u003e (exists newstate:AccountSys \u0026 post_withdraw(numberIn, dateIn, amountIn, oldstate, newstate))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e (numberIn in set (dom accounts~)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, detailsIn:Details, oldstate:AccountSys \u0026 (pre_changeDetails(numberIn, detailsIn, oldstate) \u003d\u003e (exists newstate:AccountSys \u0026 post_changeDetails(numberIn, detailsIn, oldstate, newstate))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e ((limitIn \u003e\u003d 0) \u003d\u003e (numberIn in set (dom accounts))))","legal map application obligation:(((numberIn in set (dom accounts)) and ((limitIn \u003e\u003d 0) and ((accounts(numberIn).balance) \u003e\u003d limitIn))) \u003d\u003e (numberIn in set (dom accounts~)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, limitIn:real, oldstate:AccountSys \u0026 (pre_changeLimits(numberIn, limitIn, oldstate) \u003d\u003e (exists newstate:AccountSys \u0026 post_changeLimits(numberIn, limitIn, oldstate, newstate))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e (numberIn in set (dom accounts)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, oldstate:AccountSys \u0026 (pre_getDetails(numberIn, oldstate) \u003d\u003e (exists detailsOut:Details \u0026 post_getDetails(numberIn, oldstate, detailsOut, oldstate, newstate))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e (numberIn in set (dom accounts)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, oldstate:AccountSys \u0026 (pre_getBalance(numberIn, oldstate) \u003d\u003e (exists balanceOut:real \u0026 post_getBalance(numberIn, oldstate, balanceOut, oldstate, newstate))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e (numberIn in set (dom accounts)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, oldstate:AccountSys \u0026 (pre_getLimit(numberIn, oldstate) \u003d\u003e (exists limitOut:real \u0026 post_getLimit(numberIn, oldstate, limitOut, oldstate, newstate))))","legal map application obligation:((numberIn in set (dom accounts)) \u003d\u003e (numberIn in set (dom accounts)))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, oldstate:AccountSys \u0026 (pre_getAllTransactions(numberIn, oldstate) \u003d\u003e (exists transactionsOut:seq of (Transaction) \u0026 post_getAllTransactions(numberIn, oldstate, transactionsOut, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall numberIn:AccNum, oldstate:AccountSys \u0026 (exists query:bool \u0026 post_contains(numberIn, oldstate, query, oldstate, newstate)))","operation postcondition satisfiable obligation:(exists query:bool \u0026 post_isEmpty(oldstate, query, oldstate, newstate))","operation postcondition satisfiable obligation:(exists totalOut:nat \u0026 post_getTotal(oldstate, totalOut, oldstate, newstate))"]