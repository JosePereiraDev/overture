["type invariant satisfiable obligation:(exists mk_Tracker(containers, phases):Tracker \u0026 (Consistent(containers, phases) and (PhasesDistinguished(phases) and MaterialSafe(containers, phases))))","type invariant satisfiable obligation:(exists p:Phase \u0026 (((card (p.contents)) \u003c\u003d (p.capacity)) and ((p.expected_materials) \u003c\u003e {})))","map compatible obligation:(forall trk:Tracker, cid:ContainerId, quan:real, mat:Material \u0026 ((cid not in set (dom (trk.containers))) \u003d\u003e (forall ldom1 in set (dom (trk.containers)), rdom2 in set (dom {cid |-\u003e mk_Container(quan, mat)}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e ((trk.containers)(ldom1) \u003d {cid |-\u003e mk_Container(quan, mat)}(rdom2))))))","type compatibility obligation:(forall trk:Tracker, cid:ContainerId, quan:real, mat:Material \u0026 ((cid not in set (dom (trk.containers))) \u003d\u003e inv_Tracker(mk_Tracker(((trk.containers) munion {cid |-\u003e mk_Container(quan, mat)}), (trk.phases)))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, dest:PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (dest in set (dom phases)))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, dest:PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (dest in set (dom phases)))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, dest:PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) \u003d\u003e (cid in set (dom containers))))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, dest:PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) \u003d\u003e (dest in set (dom phases))))))","legal map application obligation:(forall trk:Tracker, cid:ContainerId, ptoid:PhaseId, pfromid:PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e (ptoid in set (dom (trk.phases)))))","legal map application obligation:(forall trk:Tracker, cid:ContainerId, ptoid:PhaseId, pfromid:PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e (ptoid in set (dom (trk.phases)))))","legal map application obligation:(forall trk:Tracker, cid:ContainerId, ptoid:PhaseId, pfromid:PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e (ptoid in set (dom (trk.phases)))))","type compatibility obligation:(forall trk:Tracker, cid:ContainerId, ptoid:PhaseId, pfromid:PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e inv_Phase(mk_Phase((((trk.phases)(ptoid).contents) union {cid}), ((trk.phases)(ptoid).expected_materials), ((trk.phases)(ptoid).capacity)))))","legal function application obligation:(forall trk:Tracker, cid:ContainerId, ptoid:PhaseId, pfromid:PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e let pha:Phase \u003d mk_Phase((((trk.phases)(ptoid).contents) union {cid}), ((trk.phases)(ptoid).expected_materials), ((trk.phases)(ptoid).capacity)) in pre_Remove(trk, cid, pfromid)))","type compatibility obligation:(forall trk:Tracker, cid:ContainerId, ptoid:PhaseId, pfromid:PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e let pha:Phase \u003d mk_Phase((((trk.phases)(ptoid).contents) union {cid}), ((trk.phases)(ptoid).expected_materials), ((trk.phases)(ptoid).capacity)) in inv_Tracker(mk_Tracker((trk.containers), ((Remove(trk, cid, pfromid).phases) ++ {ptoid |-\u003e pha})))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, source:PhaseId \u0026 ((source in set (dom phases)) \u003d\u003e (source in set (dom phases))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, source:PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, source:PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","legal map application obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, source:PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","type compatibility obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, source:PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e inv_Phase(mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)))))","type compatibility obligation:(forall mk_Tracker(containers, phases):Tracker, cid:ContainerId, source:PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e let pha:Phase \u003d mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)) in inv_Tracker(mk_Tracker(containers, (phases ++ {source |-\u003e pha})))))","legal function application obligation:(forall tkr:Tracker, cid:ContainerId, source:PhaseId \u0026 (pre_Remove(tkr, cid, source) \u003d\u003e pre_Remove(tkr, cid, source)))","type compatibility obligation:(forall tkr:Tracker, cid:ContainerId, source:PhaseId \u0026 (pre_Remove(tkr, cid, source) \u003d\u003e inv_Tracker(mk_Tracker(({cid} \u003c-: (tkr.containers)), (Remove(tkr, cid, source).phases)))))","legal map application obligation:(forall phases:PhaseInfo \u0026 (forall p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) \u003d\u003e (p1 in set (dom phases)))))","legal map application obligation:(forall phases:PhaseInfo \u0026 (forall p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) \u003d\u003e (p2 in set (dom phases)))))","legal map application obligation:(forall containers:ContainerInfo, phases:PhaseInfo \u0026 (forall ph in set (rng phases) \u0026 (forall cid in set (ph.contents) \u0026 ((cid in set (dom containers)) \u003d\u003e (cid in set (dom containers))))))"]