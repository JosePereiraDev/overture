["legal map application obligation:(forall mk_Exchange(status, calls):Exchange \u0026 (forall i in set (dom calls) \u0026 (i in set (dom status))))","legal map application obligation:(forall mk_Exchange(status, calls):Exchange \u0026 (forall i in set (dom calls) \u0026 ((status(i) \u003d \u003cWI\u003e) \u003d\u003e (calls(i) in set (dom status)))))","legal map application obligation:(forall mk_Exchange(status, calls):Exchange \u0026 (forall i in set (dom calls) \u0026 ((status(i) \u003d \u003cWI\u003e) \u003d\u003e (i in set (dom calls)))))","legal map application obligation:(forall mk_Exchange(status, calls):Exchange \u0026 (forall i in set (dom calls) \u0026 ((not ((status(i) \u003d \u003cWI\u003e) and (status(calls(i)) \u003d \u003cWR\u003e))) \u003d\u003e (i in set (dom status)))))","legal map application obligation:(forall mk_Exchange(status, calls):Exchange \u0026 (forall i in set (dom calls) \u0026 ((not ((status(i) \u003d \u003cWI\u003e) and (status(calls(i)) \u003d \u003cWR\u003e))) \u003d\u003e ((status(i) \u003d \u003cSI\u003e) \u003d\u003e (calls(i) in set (dom status))))))","legal map application obligation:(forall mk_Exchange(status, calls):Exchange \u0026 (forall i in set (dom calls) \u0026 ((not ((status(i) \u003d \u003cWI\u003e) and (status(calls(i)) \u003d \u003cWR\u003e))) \u003d\u003e ((status(i) \u003d \u003cSI\u003e) \u003d\u003e (i in set (dom calls))))))","operation postcondition satisfiable obligation:(forall s:Subscriber, oldstate:Exchange \u0026 (pre_Lift(s, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_Lift(s, oldstate, newstate))))","enumeration map injectivity obligation:(((i in set (dom (status :\u003e {\u003cAI\u003e}))) and (r in set (dom (status :\u003e {\u003cfr\u003e})))) \u003d\u003e (forall m1, m2 in set {{i |-\u003e \u003cWI\u003e}, {r |-\u003e \u003cWR\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","operation postcondition satisfiable obligation:(forall i:Subscriber, r:Subscriber, oldstate:Exchange \u0026 (pre_Connect(i, r, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_Connect(i, r, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall i:Subscriber, oldstate:Exchange \u0026 (pre_MakeUn(i, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_MakeUn(i, oldstate, newstate))))","legal map application obligation:((r in set (dom (status :\u003e {\u003cWR\u003e}))) \u003d\u003e (r in set (dom (inverse calls))))","map inverse obligation:((r in set (dom (status :\u003e {\u003cWR\u003e}))) \u003d\u003e is_(calls, inmap (Subscriber) to (Subscriber)))","enumeration map injectivity obligation:((r in set (dom (status :\u003e {\u003cWR\u003e}))) \u003d\u003e (forall m1, m2 in set {{r |-\u003e \u003cSR\u003e}, {(inverse calls)(r) |-\u003e \u003cSI\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","operation postcondition satisfiable obligation:(forall r:Subscriber, oldstate:Exchange \u0026 (pre_Answer(r, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_Answer(r, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall i:Subscriber, oldstate:Exchange \u0026 (pre_ClearAttempt(i, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_ClearAttempt(i, oldstate, newstate))))","legal map application obligation:((i in set (dom (status :\u003e {\u003cWI\u003e}))) \u003d\u003e (i in set (dom calls)))","enumeration map injectivity obligation:((i in set (dom (status :\u003e {\u003cWI\u003e}))) \u003d\u003e (forall m1, m2 in set {{i |-\u003e \u003cfr\u003e}, {calls(i) |-\u003e \u003cfr\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","operation postcondition satisfiable obligation:(forall i:Subscriber, oldstate:Exchange \u0026 (pre_ClearWait(i, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_ClearWait(i, oldstate, newstate))))","legal map application obligation:((i in set (dom (status :\u003e {\u003cSI\u003e}))) \u003d\u003e (i in set (dom calls)))","enumeration map injectivity obligation:((i in set (dom (status :\u003e {\u003cSI\u003e}))) \u003d\u003e (forall m1, m2 in set {{i |-\u003e \u003cfr\u003e}, {calls(i) |-\u003e \u003cun\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","operation postcondition satisfiable obligation:(forall i:Subscriber, oldstate:Exchange \u0026 (pre_ClearSpeak(i, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_ClearSpeak(i, oldstate, newstate))))","legal map application obligation:((r in set (dom (status :\u003e {\u003cSR\u003e}))) \u003d\u003e (r in set (dom (inverse calls))))","map inverse obligation:((r in set (dom (status :\u003e {\u003cSR\u003e}))) \u003d\u003e is_(calls, inmap (Subscriber) to (Subscriber)))","enumeration map injectivity obligation:((r in set (dom (status :\u003e {\u003cSR\u003e}))) \u003d\u003e (forall m1, m2 in set {{r |-\u003e \u003cWR\u003e}, {(inverse calls)(r) |-\u003e \u003cWI\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","operation postcondition satisfiable obligation:(forall r:Subscriber, oldstate:Exchange \u0026 (pre_Suspend(r, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_Suspend(r, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall s:Subscriber, oldstate:Exchange \u0026 (pre_ClearUn(s, oldstate) \u003d\u003e (exists newstate:Exchange \u0026 post_ClearUn(s, oldstate, newstate))))"]