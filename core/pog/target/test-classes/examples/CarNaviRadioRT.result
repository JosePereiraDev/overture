["map compatible obligation:(forall pnm:seq of (char), penv:EnvironmentTask \u0026 (forall ldom1 in set (dom envTasks), rdom2 in set (dom {pnm |-\u003e penv}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (envTasks(ldom1) \u003d {pnm |-\u003e penv}(rdom2)))))","comprehension map injectivity obligation:(forall envTasks1:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall envTasks2:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall m1, m2 in set {{name |-\u003e (envTasks(name).getMinMaxAverage)()} | name in set (dom envTasks)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))))))","legal map application obligation:(forall envTasks1:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall envTasks2:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall name in set (dom envTasks) \u0026 (name in set (dom envTasks)))))))","comprehension map injectivity obligation:(forall envTasks1:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall envTasks2:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall m1, m2 in set {{name |-\u003e (envTasks(name).getMinMaxAverage)()} | name in set (dom envTasks)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))))))","legal map application obligation:(forall envTasks1:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall envTasks2:map (seq of (char)) to (EnvironmentTask) \u0026 (true \u003d\u003e (forall name in set (dom envTasks) \u0026 (name in set (dom envTasks)))))))","legal function application obligation:(forall pev:nat \u0026 pre_checkResponseTimes(e2s, s2e, 22000000000))","operation establishes postcondition obligation:(forall pev:nat \u0026 checkResponseTimes(e2s, s2e, 22000000000))","legal function application obligation:(forall pev:nat \u0026 pre_checkResponseTimes(e2s, s2e, 24000000000))","operation establishes postcondition obligation:(forall pev:nat \u0026 checkResponseTimes(e2s, s2e, 24000000000))","legal function application obligation:(forall pev:nat \u0026 pre_checkResponseTimes(e2s, s2e, 40000000000))","operation establishes postcondition obligation:(forall pev:nat \u0026 checkResponseTimes(e2s, s2e, 40000000000))","legal map application obligation:(forall pe2s:map (nat) to (nat), ps2e:map (nat) to (nat), plim:nat \u0026 ((((dom ps2e) inter (dom pe2s)) \u003d (dom ps2e)) \u003d\u003e (forall idx in set (dom ps2e) \u0026 (idx in set (dom ps2e)))))","legal map application obligation:(forall pe2s:map (nat) to (nat), ps2e:map (nat) to (nat), plim:nat \u0026 ((((dom ps2e) inter (dom pe2s)) \u003d (dom ps2e)) \u003d\u003e (forall idx in set (dom ps2e) \u0026 (idx in set (dom pe2s)))))","map compatible obligation:(forall pev:nat \u0026 (forall ldom1 in set (dom e2s), rdom2 in set (dom {pev |-\u003e time}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (e2s(ldom1) \u003d {pev |-\u003e time}(rdom2)))))","map compatible obligation:(forall pev:nat \u0026 (forall ldom1 in set (dom s2e), rdom2 in set (dom {pev |-\u003e time}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (s2e(ldom1) \u003d {pev |-\u003e time}(rdom2)))))","legal map application obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e (cnt in set (dom s2e)))","legal map application obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e (cnt in set (dom e2s)))","type compatibility obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e is_(dt, [nat]))","type compatibility obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e is_(dt, [nat]))","type compatibility obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e is_(dt, [nat]))","type compatibility obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e is_(dt, [nat]))","type compatibility obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e ((diff + dt) \u003e\u003d 0))","non-zero obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e ((card (dom s2e)) \u003c\u003e 0))","type compatibility obligation:(((card (dom s2e)) \u003e 0) \u003d\u003e is_(RESULT, (nat * nat * real)))"]