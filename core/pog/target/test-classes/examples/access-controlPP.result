["enumeration map injectivity obligation:(forall r:Request, p:PDP, e:Env \u0026 (forall m1, m2 in set {{requester |-\u003e (req.GetSubject)()}, {resource |-\u003e (req.GetResource)()}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","type compatibility obligation:(forall fe:Expr, req:Request \u0026 (is_(BindExpr(aname, req), Id) or is_(BindExpr(aname, req), UnId)))","type compatibility obligation:(forall fe:Expr, req:Request \u0026 (is_(BindExpr(index, req), Id) or is_(BindExpr(index, req), UnId)))","operation call obligation:(forall expr:Expr, env:Env \u0026 (forall fexp1:Expr \u0026 (true \u003d\u003e (forall fexp2:Expr \u0026 (true \u003d\u003e (forall fexp3:Expr \u0026 (true \u003d\u003e (forall fexp4:Expr \u0026 (true \u003d\u003e (index in set (dom MId(aname, env))))))))))))","type compatibility obligation:(forall exp1:Expr, exp2:Expr, env:Env \u0026 is_(Evaluate(exp1, env), real))","type compatibility obligation:(forall exp1:Expr, exp2:Expr, env:Env \u0026 is_(Evaluate(exp2, env), real))","type compatibility obligation:(forall exp1:Expr, exp2:Expr, env:Env \u0026 is_(Evaluate(exp1, env), real))","type compatibility obligation:(forall exp1:Expr, exp2:Expr, env:Env \u0026 is_(Evaluate(exp2, env), real))","type compatibility obligation:(forall exp1:Expr, exp2:Expr, env:Env \u0026 is_(Evaluate(exp1, env), bool))","type compatibility obligation:(forall exp1:Expr, exp2:Expr, env:Env \u0026 (Evaluate(exp1, env) \u003d\u003e is_(Evaluate(exp2, env), bool)))","legal map application obligation:(forall mk_ArrayLookup(aname, index):ArrayLookup, env:Env \u0026 ((index in set (dom MId(aname, env))) \u003d\u003e (index in set (dom MId(aname, env)))))","type compatibility obligation:(forall mk_ArrayLookup(aname, index):ArrayLookup, env:Env \u0026 ((index in set (dom MId(aname, env))) \u003d\u003e is_(index, token)))","legal map application obligation:(forall mk_ArrayLookup(id, index):ArrayLookup, env:Env \u0026 (id in set (dom (env.GetSenv)())))","type compatibility obligation:(forall mk_ArrayLookup(id, index):ArrayLookup, env:Env \u0026 is_(id, token))","legal map application obligation:(forall id:Id \u0026 ((id in set (dom denv)) \u003d\u003e (id in set (dom denv))))","legal map application obligation:(forall id:Id, index:Id \u0026 (((id in set (dom denv)) and (index in set (dom denv(id)))) \u003d\u003e ((id in set (dom denv)) \u003d\u003e (id in set (dom denv)))))","legal map application obligation:(forall id:Id, index:Id \u0026 (((id in set (dom denv)) and (index in set (dom denv(id)))) \u003d\u003e (index in set (dom denv(id)))))","legal map application obligation:(forall id:Id, index:Id \u0026 (((id in set (dom denv)) and (index in set (dom denv(id)))) \u003d\u003e (id in set (dom denv))))","legal map application obligation:(forall id:Id \u0026 ((id in set (dom denv)) \u003d\u003e (id in set (dom senv))))","legal map application obligation:(forall id:Id \u0026 ((id in set (dom denv)) \u003d\u003e (id in set (dom senv))))","type compatibility obligation:(forall id:Id \u0026 ((id in set (dom denv)) \u003d\u003e ((is_(RESULT, \u003cI\u003e) or is_(RESULT, \u003cU\u003e)) or is_(RESULT, map (Id) to (\u003cB\u003e)))))","legal map application obligation:(forall id:Id, index:Id \u0026 (((id in set (dom denv)) and (index in set (dom denv(id)))) \u003d\u003e ((id in set (dom denv)) \u003d\u003e (id in set (dom denv)))))","legal map application obligation:(forall id:Id, index:Id \u0026 (((id in set (dom denv)) and (index in set (dom denv(id)))) \u003d\u003e (index in set (dom senv(id)))))","legal map application obligation:(forall id:Id, index:Id \u0026 (((id in set (dom denv)) and (index in set (dom denv(id)))) \u003d\u003e (id in set (dom senv))))","operation call obligation:(forall text:seq of (char) \u0026 ((\"\" \u003d \"\") \u003c\u003d\u003e (\"\" \u003d nil)))"]