["type invariant satisfiable obligation:(exists s:StartAttempt \u0026 (s \u003c\u003d DVMAXNUMBERATTEMPTS))","enumeration map injectivity obligation:(forall m1, m2 in set {{1 |-\u003e \u003cFuelSwitchAtCut\u003e}, {2 |-\u003e \u003cStartCommanded\u003e}, {3 |-\u003e \u003cWaitForStarterOnConditions\u003e}, {4 |-\u003e \u003cWaitForFuelOnConditions\u003e}, {5 |-\u003e \u003cWaitForLightUp\u003e}, {6 |-\u003e \u003cWaitForIdle\u003e}, {7 |-\u003e \u003cEngineStarted\u003e}, {8 |-\u003e \u003cCoolAndFlushCycle\u003e}, {9 |-\u003e \u003cAttemptAborted\u003e}, {10 |-\u003e \u003cSequenceAborted\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal map application obligation:(forall i:int \u0026 (i in set (dom STATEMAP)))","type compatibility obligation:(forall i:int \u0026 (i \u003e 0))","operation postcondition satisfiable obligation:(pre_StarterOn(oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_StarterOn(oldstate, newstate)))","operation postcondition satisfiable obligation:(pre_StarterOff(oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_StarterOff(oldstate, newstate)))","operation postcondition satisfiable obligation:(pre_OpenSOV(oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_OpenSOV(oldstate, newstate)))","operation postcondition satisfiable obligation:(forall tempTGT:real, oldstate:StartingSystem \u0026 (pre_IgnOn(tempTGT, oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_IgnOn(tempTGT, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall tempTGT:real, oldstate:StartingSystem \u0026 (pre_IgnOff(tempTGT, oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_IgnOff(tempTGT, oldstate, newstate))))","operation postcondition satisfiable obligation:(forall tempTGT:real, oldstate:StartingSystem \u0026 (pre_StartComplete(tempTGT, oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_StartComplete(tempTGT, oldstate, newstate))))","operation postcondition satisfiable obligation:(pre_SequenceAbort(oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_SequenceAbort(oldstate, newstate)))","operation postcondition satisfiable obligation:(forall tempTGT:real, oldstate:StartingSystem \u0026 (pre_CoolFlush(tempTGT, oldstate) \u003d\u003e (exists newstate:StartingSystem \u0026 post_CoolFlush(tempTGT, oldstate, newstate))))"]