["legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 ((mk_(t2, t1) in set (dom points)) \u003d\u003e (mk_(t1, t2) in set (dom points)))))","legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 ((mk_(t2, t1) in set (dom points)) \u003d\u003e (mk_(t2, t1) in set (dom points)))))","legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (mk_(t1, t2) in set (dom points))))","legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 ((points(mk_(t1, t2)) \u003c\u003e {|-\u003e}) \u003d\u003e (mk_(t1, t2) in set (dom points)))))","legal map application obligation:(forall tracks:Tracks, points:Points \u0026 (forall tpair in set (dom points) \u0026 (tpair in set (dom points))))","legal map application obligation:(forall tracks:Tracks, points:Points \u0026 ((forall tpair in set (dom points) \u0026 (forall pid in set (dom points(tpair)) \u0026 ((card {t | mk_(t, t\u0027) in set tracks \u0026 (t\u0027 \u003d pid)}) \u003d 3))) \u003d\u003e (forall mk_(t1, -) in set tracks \u0026 (forall tpair in set (dom points) \u0026 (tpair in set (dom points))))))","legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (mk_(t1, t2) in set (dom points))))","legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 ((({t1} \u003c: points(mk_(t1, t2))) \u003d {t1 |-\u003e \u003cleft\u003e}) \u003d\u003e (forall mk_(t, t\u0027) in set (dom points) \u0026 ((t \u003d t1) \u003d\u003e (mk_(t1, t\u0027) in set (dom points)))))))","legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (((({t1} \u003c: points(mk_(t1, t2))) \u003d {t1 |-\u003e \u003cleft\u003e}) \u003d\u003e (exists mk_(t, t\u0027) in set (dom points) \u0026 ((t \u003d t1) and (({t1} \u003c: points(mk_(t1, t\u0027))) \u003d {t1 |-\u003e \u003cright\u003e})))) \u003d\u003e (mk_(t1, t2) in set (dom points)))))","legal map application obligation:(forall points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (((({t1} \u003c: points(mk_(t1, t2))) \u003d {t1 |-\u003e \u003cleft\u003e}) \u003d\u003e (exists mk_(t, t\u0027) in set (dom points) \u0026 ((t \u003d t1) and (({t1} \u003c: points(mk_(t1, t\u0027))) \u003d {t1 |-\u003e \u003cright\u003e})))) \u003d\u003e ((({t1} \u003c: points(mk_(t1, t2))) \u003d {t1 |-\u003e \u003cright\u003e}) \u003d\u003e (forall mk_(t, t\u0027) in set (dom points) \u0026 ((t \u003d t1) \u003d\u003e (mk_(t1, t\u0027) in set (dom points))))))))","legal map application obligation:(forall points:Points, pointstates:Point_states \u0026 (forall t in set (dom pointstates) \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (mk_(t1, t2) in set (dom points)))))","legal map application obligation:(forall points:Points, pointstates:Point_states \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (mk_(t1, t2) in set (dom points))))","legal map application obligation:(forall points:Points, pointstates:Point_states \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (((t1 in set (dom points(mk_(t1, t2)))) \u003d\u003e (t1 in set (dom pointstates))) \u003d\u003e (mk_(t1, t2) in set (dom points)))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (trackid in set (dom trackstates))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 (trainid in set (dom trackstates(trackid))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 (trackid in set (dom trackstates)))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 ((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 (trackid\u0027 in set (dom trackstates)))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 ((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trainid in set (dom trackstates(trackid\u0027)))))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 ((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trackid\u0027 in set (dom trackstates))))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 (((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trackstates(trackid\u0027)(trainid) \u003d \u003cfixedroute\u003e)))) \u003d\u003e (trainid in set (dom trackstates(trackid)))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 (((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trackstates(trackid\u0027)(trainid) \u003d \u003cfixedroute\u003e)))) \u003d\u003e (trackid in set (dom trackstates))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 (((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trackstates(trackid\u0027)(trainid) \u003d \u003cfixedroute\u003e)))) \u003d\u003e ((trackstates(trackid)(trainid) \u003d \u003cautonomous\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 (trackid\u0027 in set (dom trackstates))))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 (((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trackstates(trackid\u0027)(trainid) \u003d \u003cfixedroute\u003e)))) \u003d\u003e ((trackstates(trackid)(trainid) \u003d \u003cautonomous\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trainid in set (dom trackstates(trackid\u0027))))))))))","legal map application obligation:(forall trackstates:Track_states \u0026 (forall trackid in set (dom trackstates) \u0026 (forall trainid in set (dom trackstates(trackid)) \u0026 (((trackstates(trackid)(trainid) \u003d \u003cfixedroute\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trackstates(trackid\u0027)(trainid) \u003d \u003cfixedroute\u003e)))) \u003d\u003e ((trackstates(trackid)(trainid) \u003d \u003cautonomous\u003e) \u003d\u003e (forall trackid\u0027 in set (dom trackstates) \u0026 ((trainid in set (dom trackstates(trackid\u0027))) \u003d\u003e (trackid\u0027 in set (dom trackstates)))))))))","let be st existence obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (exists t in set (dom trackstates) \u0026 true)))","legal map application obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall t in set (dom trackstates) \u0026 (t in set (dom trackstates)))))","legal map application obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall t in set (dom trackstates) \u0026 ((not (trackstates(t) \u003d {|-\u003e})) \u003d\u003e (t in set (dom trackstates))))))","let be st existence obligation:(forall mk_(t, trackstate):(Track_id * Track_state), sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstate \u003d {|-\u003e})) \u003d\u003e (exists tid in set (dom trackstate) \u0026 true)))","legal map application obligation:(forall mk_(t, trackstate):(Track_id * Track_state), sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstate \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trackstate) \u0026 ((tid in set (dom sorted)) \u003d\u003e (tid in set (dom sorted))))))","map compatible obligation:(forall mk_(t, trackstate):(Track_id * Track_state), sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstate \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trackstate) \u0026 ((not (tid in set (dom sorted))) \u003d\u003e (forall ldom1 in set (dom sorted), rdom2 in set (dom {tid |-\u003e {t}}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (sorted(ldom1) \u003d {tid |-\u003e {t}}(rdom2))))))))","let be st existence obligation:(forall trackset:set of (Track_id), connected:seq of (Track_id), tracks:Tracks, tried:set of (Track_id) \u0026 ((not (trackset \u003d {})) \u003d\u003e (exists t in set trackset \u0026 true)))","non-empty sequence obligation:(forall trackset:set of (Track_id), connected:seq of (Track_id), tracks:Tracks, tried:set of (Track_id) \u0026 ((not (trackset \u003d {})) \u003d\u003e (forall t in set trackset \u0026 (connected \u003c\u003e []))))","legal sequence application obligation:(forall trackset:set of (Track_id), connected:seq of (Track_id), tracks:Tracks, tried:set of (Track_id) \u0026 ((not (trackset \u003d {})) \u003d\u003e (forall t in set trackset \u0026 ((not (mk_(t, (hd connected)) in set tracks)) \u003d\u003e ((len connected) in set (inds connected))))))","legal map application obligation:(forall trains:map (Train_id) to (set of (Track_id)), points:Points \u0026 (forall trackset in set (rng trains) \u0026 (forall t1, t2 in set trackset \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (mk_(t1, t2) in set (dom points))))))","legal map application obligation:(forall trains:map (Train_id) to (set of (Track_id)), points:Points \u0026 (forall trackset in set (rng trains) \u0026 (forall t1, t2 in set trackset \u0026 (((mk_(t1, t2) in set (dom points)) and (t1 in set (dom points(mk_(t1, t2))))) \u003d\u003e (forall t3 in set trackset \u0026 ((mk_(t1, t3) in set (dom points)) \u003d\u003e (mk_(t1, t3) in set (dom points))))))))","legal map application obligation:(forall trains:map (Train_id) to (set of (Track_id)), points:Points \u0026 (forall trackset in set (rng trains) \u0026 (forall t1, t2 in set trackset \u0026 (((mk_(t1, t2) in set (dom points)) and (t1 in set (dom points(mk_(t1, t2))))) \u003d\u003e (forall t3 in set trackset \u0026 (((mk_(t1, t3) in set (dom points)) and (t1 in set (dom points(mk_(t1, t3))))) \u003d\u003e (t1 in set (dom points(mk_(t1, t2))))))))))","legal map application obligation:(forall trains:map (Train_id) to (set of (Track_id)), points:Points \u0026 (forall trackset in set (rng trains) \u0026 (forall t1, t2 in set trackset \u0026 (((mk_(t1, t2) in set (dom points)) and (t1 in set (dom points(mk_(t1, t2))))) \u003d\u003e (forall t3 in set trackset \u0026 (((mk_(t1, t3) in set (dom points)) and (t1 in set (dom points(mk_(t1, t3))))) \u003d\u003e (mk_(t1, t2) in set (dom points))))))))","legal map application obligation:(forall trains:map (Train_id) to (set of (Track_id)), points:Points \u0026 (forall trackset in set (rng trains) \u0026 (forall t1, t2 in set trackset \u0026 (((mk_(t1, t2) in set (dom points)) and (t1 in set (dom points(mk_(t1, t2))))) \u003d\u003e (forall t3 in set trackset \u0026 (((mk_(t1, t3) in set (dom points)) and (t1 in set (dom points(mk_(t1, t3))))) \u003d\u003e (t1 in set (dom points(mk_(t1, t3))))))))))","legal map application obligation:(forall trains:map (Train_id) to (set of (Track_id)), points:Points \u0026 (forall trackset in set (rng trains) \u0026 (forall t1, t2 in set trackset \u0026 (((mk_(t1, t2) in set (dom points)) and (t1 in set (dom points(mk_(t1, t2))))) \u003d\u003e (forall t3 in set trackset \u0026 (((mk_(t1, t3) in set (dom points)) and (t1 in set (dom points(mk_(t1, t3))))) \u003d\u003e (mk_(t1, t3) in set (dom points))))))))","legal map application obligation:(forall stationtopo:Station_topo, stationstate:Station_state \u0026 (forall tid in set (dom (stationstate.trackstates)) \u0026 (tid in set (dom (stationstate.trackstates)))))","legal map application obligation:(forall crossings:Crossings, trackstates:Track_states \u0026 (forall mk_(tid1, tid2) in set crossings \u0026 (tid1 in set (dom trackstates))))","legal map application obligation:(forall crossings:Crossings, trackstates:Track_states \u0026 (forall mk_(tid1, tid2) in set crossings \u0026 (tid2 in set (dom trackstates))))","legal map application obligation:(forall stationtopo:Station_topo, stationstate:Station_state \u0026 let trains:map (Train_id) to (set of (Track_id)) \u003d Trains((stationstate.trackstates), {|-\u003e}) in (forall t in set (dom trains) \u0026 (t in set (dom trains))))","legal function application obligation:(forall stationtopo:Station_topo, stationstate:Station_state \u0026 let trains:map (Train_id) to (set of (Track_id)) \u003d Trains((stationstate.trackstates), {|-\u003e}) in (forall t in set (dom trains) \u0026 (forall t1, t2 in set trains(t) \u0026 ((mk_(t1, t2) in set (dom (stationtopo.points))) \u003d\u003e pre_Ok_Point_states(mk_(t1, t2), (stationtopo.points), (stationstate.pointstates))))))","let be st existence obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (exists t in set (dom trackstates) \u0026 true)))","legal map application obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall t in set (dom trackstates) \u0026 (t in set (dom trackstates)))))","legal map application obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall t in set (dom trackstates) \u0026 ((not (trackstates(t) \u003d {|-\u003e})) \u003d\u003e (t in set (dom trackstates))))))","let be st existence obligation:(forall mk_(t, trainids):(Track_id * Track_state), sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trainids \u003d {|-\u003e})) \u003d\u003e (exists tid in set (dom trainids) \u0026 true)))","legal map application obligation:(forall mk_(t, trainids):(Track_id * Track_state), sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trainids \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trainids) \u0026 ((tid in set (dom sorted)) \u003d\u003e (tid in set (dom sorted))))))","legal map application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (mk_(t1, t2) in set (dom points))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (({t1, t2} \u003d (dom points(mk_(t1, t2)))) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t1, points, pointstates))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (({t1, t2} \u003d (dom points(mk_(t1, t2)))) \u003d\u003e (Point_state_ok(mk_(t1, t2), t1, points, pointstates) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t2, points, pointstates)))))","legal map application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e ((not ({t1, t2} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e (mk_(t1, t2) in set (dom points)))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e ((not ({t1, t2} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e (({t1} \u003d (dom points(mk_(t1, t2)))) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t1, points, pointstates)))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e ((not ({t1, t2} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e ((not ({t1} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t2, points, pointstates)))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 ((t in set (dom pointstates)) \u003d\u003e ((tpair in set (dom points)) \u003d\u003e (tpair in set (dom points)))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 (((t in set (dom pointstates)) and ((tpair in set (dom points)) and (t in set (dom points(tpair))))) \u003d\u003e (t in set (dom pointstates))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 (((t in set (dom pointstates)) and ((tpair in set (dom points)) and (t in set (dom points(tpair))))) \u003d\u003e let mk_(pcnt, -):Point_state \u003d pointstates(t) in (t in set (dom points(tpair)))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 (((t in set (dom pointstates)) and ((tpair in set (dom points)) and (t in set (dom points(tpair))))) \u003d\u003e let mk_(pcnt, -):Point_state \u003d pointstates(t) in (tpair in set (dom points))))","legal map application obligation:(forall areas:Areas, crossings:Crossings \u0026 (forall train1, train2 in set (dom areas) \u0026 ((train1 \u003c\u003e train2) \u003d\u003e (train1 in set (dom areas)))))","legal map application obligation:(forall areas:Areas, crossings:Crossings \u0026 (forall train1, train2 in set (dom areas) \u0026 ((train1 \u003c\u003e train2) \u003d\u003e (train2 in set (dom areas)))))","legal map application obligation:(forall areas:Areas, crossings:Crossings \u0026 (forall train1, train2 in set (dom areas) \u0026 ((train1 \u003c\u003e train2) \u003d\u003e (((areas(train1) inter areas(train2)) \u003d {}) \u003d\u003e (train1 in set (dom areas))))))","legal map application obligation:(forall areas:Areas, crossings:Crossings \u0026 (forall train1, train2 in set (dom areas) \u0026 ((train1 \u003c\u003e train2) \u003d\u003e (((areas(train1) inter areas(train2)) \u003d {}) \u003d\u003e (forall t1 in set areas(train1) \u0026 (train2 in set (dom areas)))))))","legal map application obligation:(forall stationtopo:Station_topo, stationstate:Station_state \u0026 let trains:map (Train_id) to (set of (Track_id)) \u003d Trains((stationstate.trackstates), {|-\u003e}) in (forall t in set (dom trains) \u0026 (t in set (dom trains))))","legal function application obligation:(forall stationtopo:Station_topo, stationstate:Station_state \u0026 let trains:map (Train_id) to (set of (Track_id)) \u003d Trains((stationstate.trackstates), {|-\u003e}) in (forall t in set (dom trains) \u0026 (forall t1, t2 in set trains(t) \u0026 ((mk_(t1, t2) in set (dom (stationtopo.points))) \u003d\u003e pre_Ok_Point_states(mk_(t1, t2), (stationtopo.points), (stationstate.pointstates))))))","legal function application obligation:(forall areas:Areas, stationtopo:Station_topo, stationstate:Station_state \u0026 (forall area in set (rng areas) \u0026 pre_TrainType(area, stationstate)))","let be st existence obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (exists t in set (dom trackstates) \u0026 true)))","legal map application obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall t in set (dom trackstates) \u0026 (t in set (dom trackstates)))))","legal map application obligation:(forall trackstates:Track_states, sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall t in set (dom trackstates) \u0026 ((not (trackstates(t) \u003d {|-\u003e})) \u003d\u003e (t in set (dom trackstates))))))","let be st existence obligation:(forall mk_(t, trainids):(Track_id * Track_state), sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trainids \u003d {|-\u003e})) \u003d\u003e (exists tid in set (dom trainids) \u0026 true)))","legal map application obligation:(forall mk_(t, trainids):(Track_id * Track_state), sorted:map (Train_id) to (set of (Track_id)) \u0026 ((not (trainids \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trainids) \u0026 ((tid in set (dom sorted)) \u003d\u003e (tid in set (dom sorted))))))","let be st existence obligation:(forall area:Area, stationstate:Station_state \u0026 ((forall t in set area \u0026 (t in set (dom (stationstate.trackstates)))) \u003d\u003e (exists t in set area \u0026 ((stationstate.trackstates)(t) \u003c\u003e {|-\u003e}))))","legal map application obligation:(forall area:Area, stationstate:Station_state \u0026 ((forall t in set area \u0026 (t in set (dom (stationstate.trackstates)))) \u003d\u003e (forall t in set area \u0026 (t in set (dom (stationstate.trackstates))))))","let be st existence obligation:(forall area:Area, stationstate:Station_state \u0026 ((forall t in set area \u0026 (t in set (dom (stationstate.trackstates)))) \u003d\u003e (forall t in set area \u0026 (((stationstate.trackstates)(t) \u003c\u003e {|-\u003e}) \u003d\u003e (exists tt in set (dom (stationstate.trackstates)(t)) \u0026 true)))))","legal map application obligation:(forall area:Area, stationstate:Station_state \u0026 ((forall t in set area \u0026 (t in set (dom (stationstate.trackstates)))) \u003d\u003e (forall t in set area \u0026 (((stationstate.trackstates)(t) \u003c\u003e {|-\u003e}) \u003d\u003e (t in set (dom (stationstate.trackstates)))))))","legal map application obligation:(forall area:Area, stationstate:Station_state \u0026 ((forall t in set area \u0026 (t in set (dom (stationstate.trackstates)))) \u003d\u003e (forall t in set area \u0026 (((stationstate.trackstates)(t) \u003c\u003e {|-\u003e}) \u003d\u003e (forall tt in set (dom (stationstate.trackstates)(t)) \u0026 (tt in set (dom (stationstate.trackstates)(t))))))))","legal map application obligation:(forall area:Area, stationstate:Station_state \u0026 ((forall t in set area \u0026 (t in set (dom (stationstate.trackstates)))) \u003d\u003e (forall t in set area \u0026 (((stationstate.trackstates)(t) \u003c\u003e {|-\u003e}) \u003d\u003e (forall tt in set (dom (stationstate.trackstates)(t)) \u0026 (t in set (dom (stationstate.trackstates))))))))","legal function application obligation:(forall area:Area, stationtopo:Station_topo, stationstate:Station_state \u0026 (forall t1, t2 in set area \u0026 ((mk_(t1, t2) in set (dom (stationtopo.points))) \u003d\u003e pre_Ok_Point_states(mk_(t1, t2), (stationtopo.points), (stationstate.pointstates)))))","legal function application obligation:(forall area:Area, stationtopo:Station_topo, stationstate:Station_state \u0026 (forall t1, t2 in set area \u0026 ((mk_(t1, t2) in set (dom (stationtopo.points))) \u003d\u003e (Ok_Point_states(mk_(t1, t2), (stationtopo.points), (stationstate.pointstates)) \u003d\u003e pre_InterlockPoints(mk_(t1, t2), (stationtopo.points), (stationstate.pointstates))))))","legal map application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (mk_(t1, t2) in set (dom points))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (({t1, t2} \u003d (dom points(mk_(t1, t2)))) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t1, points, pointstates))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (({t1, t2} \u003d (dom points(mk_(t1, t2)))) \u003d\u003e (Point_state_ok(mk_(t1, t2), t1, points, pointstates) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t2, points, pointstates)))))","legal map application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e ((not ({t1, t2} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e (mk_(t1, t2) in set (dom points)))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e ((not ({t1, t2} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e (({t1} \u003d (dom points(mk_(t1, t2)))) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t1, points, pointstates)))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e ((not ({t1, t2} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e ((not ({t1} \u003d (dom points(mk_(t1, t2))))) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t2, points, pointstates)))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 ((t in set (dom pointstates)) \u003d\u003e ((tpair in set (dom points)) \u003d\u003e (tpair in set (dom points)))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 (((t in set (dom pointstates)) and ((tpair in set (dom points)) and (t in set (dom points(tpair))))) \u003d\u003e (t in set (dom pointstates))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 (((t in set (dom pointstates)) and ((tpair in set (dom points)) and (t in set (dom points(tpair))))) \u003d\u003e let mk_(pcnt, -):Point_state \u003d pointstates(t) in (t in set (dom points(tpair)))))","legal map application obligation:(forall tpair:(Track_id * Track_id), t:Track_id, points:Points, pointstates:Point_states \u0026 (((t in set (dom pointstates)) and ((tpair in set (dom points)) and (t in set (dom points(tpair))))) \u003d\u003e let mk_(pcnt, -):Point_state \u003d pointstates(t) in (tpair in set (dom points))))","legal map application obligation:(forall t:Track_id, points:Points \u0026 (forall mk_(t1, t2) in set (dom points) \u0026 (mk_(t1, t2) in set (dom points))))","legal map application obligation:(forall t:Track_id, points:Points, pointstates:Point_states \u0026 (IsPoint(t, points) \u003d\u003e (t in set (dom pointstates))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((IsInterlockPoint(t1, points, pointstates) and IsInterlockPoint(t2, points, pointstates)) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t1, points, pointstates)))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((IsInterlockPoint(t1, points, pointstates) and IsInterlockPoint(t2, points, pointstates)) \u003d\u003e (Point_state_ok(mk_(t1, t2), t1, points, pointstates) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t2, points, pointstates))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((not (IsInterlockPoint(t1, points, pointstates) and IsInterlockPoint(t2, points, pointstates))) \u003d\u003e (IsInterlockPoint(t1, points, pointstates) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t1, points, pointstates))))","legal function application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((not (IsInterlockPoint(t1, points, pointstates) and IsInterlockPoint(t2, points, pointstates))) \u003d\u003e ((not IsInterlockPoint(t1, points, pointstates)) \u003d\u003e (IsInterlockPoint(t2, points, pointstates) \u003d\u003e pre_Point_state_ok(mk_(t1, t2), t2, points, pointstates)))))","legal function application obligation:(forall stationtopo:Station_topo, stationstate:Station_state \u0026 pre_Occupied((stationstate.trackstates), {|-\u003e}))","let be st existence obligation:(forall trackstates:Track_states, occupied:map (Train_id) to (set of (Track_id)) \u0026 ((forall trackstate in set (rng trackstates) \u0026 (((dom trackstate) inter (dom occupied)) \u003d {})) \u003d\u003e ((not (forall s in set (rng trackstates) \u0026 (s \u003d {|-\u003e}))) \u003d\u003e (exists trains in set (rng trackstates) \u0026 (trains \u003c\u003e {|-\u003e})))))","let be st existence obligation:(forall trackstates:Track_states, occupied:map (Train_id) to (set of (Track_id)) \u0026 ((forall trackstate in set (rng trackstates) \u0026 (((dom trackstate) inter (dom occupied)) \u003d {})) \u003d\u003e ((not (forall s in set (rng trackstates) \u0026 (s \u003d {|-\u003e}))) \u003d\u003e (forall trains in set (rng trackstates) \u0026 ((trains \u003c\u003e {|-\u003e}) \u003d\u003e (exists train in set (dom trains) \u0026 true))))))","legal function application obligation:(forall trackstates:Track_states, occupied:map (Train_id) to (set of (Track_id)) \u0026 ((forall trackstate in set (rng trackstates) \u0026 (((dom trackstate) inter (dom occupied)) \u003d {})) \u003d\u003e ((not (forall s in set (rng trackstates) \u0026 (s \u003d {|-\u003e}))) \u003d\u003e (forall trains in set (rng trackstates) \u0026 ((trains \u003c\u003e {|-\u003e}) \u003d\u003e (forall train in set (dom trains) \u0026 pre_Occupied(RemoveTrain(train, trackstates), (occupied munion {train |-\u003e {tid | tid in set (dom trackstates) \u0026 (train in set (dom trackstates(tid)))}}))))))))","legal map application obligation:(forall trackstates:Track_states, occupied:map (Train_id) to (set of (Track_id)) \u0026 ((forall trackstate in set (rng trackstates) \u0026 (((dom trackstate) inter (dom occupied)) \u003d {})) \u003d\u003e ((not (forall s in set (rng trackstates) \u0026 (s \u003d {|-\u003e}))) \u003d\u003e (forall trains in set (rng trackstates) \u0026 ((trains \u003c\u003e {|-\u003e}) \u003d\u003e (forall train in set (dom trains) \u0026 (forall tid in set (dom trackstates) \u0026 (tid in set (dom trackstates)))))))))","map compatible obligation:(forall trackstates:Track_states, occupied:map (Train_id) to (set of (Track_id)) \u0026 ((forall trackstate in set (rng trackstates) \u0026 (((dom trackstate) inter (dom occupied)) \u003d {})) \u003d\u003e ((not (forall s in set (rng trackstates) \u0026 (s \u003d {|-\u003e}))) \u003d\u003e (forall trains in set (rng trackstates) \u0026 ((trains \u003c\u003e {|-\u003e}) \u003d\u003e (forall train in set (dom trains) \u0026 (forall ldom1 in set (dom occupied), rdom2 in set (dom {train |-\u003e {tid | tid in set (dom trackstates) \u0026 (train in set (dom trackstates(tid)))}}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (occupied(ldom1) \u003d {train |-\u003e {tid | tid in set (dom trackstates) \u0026 (train in set (dom trackstates(tid)))}}(rdom2))))))))))","let be st existence obligation:(forall train:Train_id, trackstates:Track_states \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (exists tid in set (dom trackstates) \u0026 true)))","legal map application obligation:(forall train:Train_id, trackstates:Track_states \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trackstates) \u0026 (tid in set (dom trackstates)))))","legal map application obligation:(forall train:Train_id, trackstates:Track_states \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trackstates) \u0026 ((train in set (dom trackstates(tid))) \u003d\u003e (tid in set (dom trackstates))))))","legal map application obligation:(forall train:Train_id, trackstates:Track_states \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trackstates) \u0026 ((not (train in set (dom trackstates(tid)))) \u003d\u003e (tid in set (dom trackstates))))))","map compatible obligation:(forall train:Train_id, trackstates:Track_states \u0026 ((not (trackstates \u003d {|-\u003e})) \u003d\u003e (forall tid in set (dom trackstates) \u0026 ((not (train in set (dom trackstates(tid)))) \u003d\u003e (forall ldom1 in set (dom {tid |-\u003e trackstates(tid)}), rdom2 in set (dom RemoveTrain(train, ({tid} \u003c-: trackstates))) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e ({tid |-\u003e trackstates(tid)}(ldom1) \u003d RemoveTrain(train, ({tid} \u003c-: trackstates))(rdom2))))))))","let be st existence obligation:(forall occupied:map (Train_id) to (set of (Track_id)), stationtopo:Station_topo, stationstate:Station_state \u0026 ((not (occupied \u003d {|-\u003e})) \u003d\u003e (exists train in set (dom occupied) \u0026 true)))","legal map application obligation:(forall occupied:map (Train_id) to (set of (Track_id)), stationtopo:Station_topo, stationstate:Station_state \u0026 ((not (occupied \u003d {|-\u003e})) \u003d\u003e (forall train in set (dom occupied) \u0026 (train in set (dom occupied)))))","map compatible obligation:(forall occupied:map (Train_id) to (set of (Track_id)), stationtopo:Station_topo, stationstate:Station_state \u0026 ((not (occupied \u003d {|-\u003e})) \u003d\u003e (forall train in set (dom occupied) \u0026 let area:Area \u003d FindArea(occupied(train), {}, stationtopo, stationstate) in (forall ldom1 in set (dom {train |-\u003e area}), rdom2 in set (dom DeduceAreas(({train} \u003c-: occupied), stationtopo, stationstate)) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e ({train |-\u003e area}(ldom1) \u003d DeduceAreas(({train} \u003c-: occupied), stationtopo, stationstate)(rdom2)))))))","let be st existence obligation:(forall tracks:set of (Track_id), area:Area, stationtopo:Station_topo, stationstate:Station_state \u0026 ((not (tracks \u003d {})) \u003d\u003e (exists t in set tracks \u0026 true)))","legal function application obligation:(forall mk_(t, t\u0027):(Track_id * Track_id), points:Points, pointstates:Point_states \u0026 ((IsInterlockPoint(t, points, pointstates) and Branch(mk_(t, t\u0027), points)) \u003d\u003e pre_Point_state_ok(mk_(t, t\u0027), t, points, pointstates)))","legal map application obligation:(forall tpair:(Track_id * Track_id), signals:Signals, signalstates:Signal_states \u0026 ((tpair in set (dom signals)) \u003d\u003e (tpair in set (dom signals))))","legal map application obligation:(forall tpair:(Track_id * Track_id), signals:Signals, signalstates:Signal_states \u0026 ((tpair in set (dom signals)) \u003d\u003e let sigid:Signal_id \u003d signals(tpair) in (sigid in set (dom signalstates))))","legal map application obligation:(forall mk_(t1, t2):(Track_id * Track_id), points:Points \u0026 ((mk_(t1, t2) in set (dom points)) \u003d\u003e (mk_(t1, t2) in set (dom points))))","enumeration map injectivity obligation:(forall m1, m2 in set {{\"24\" |-\u003e \u003cright\u003e}, {\"15\" |-\u003e \u003cright\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation:(forall m1, m2 in set {{\"24\" |-\u003e \u003cright\u003e}, {\"15\" |-\u003e \u003cright\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation:(forall m1, m2 in set {{mk_(\"25\", \"26\") |-\u003e {\"25\" |-\u003e \u003cright\u003e}}, {mk_(\"26\", \"25\") |-\u003e {\"25\" |-\u003e \u003cright\u003e}}, {mk_(\"25\", \"17s\") |-\u003e {\"25\" |-\u003e \u003cleft\u003e}}, {mk_(\"17s\", \"25\") |-\u003e {\"25\" |-\u003e \u003cleft\u003e}}, {mk_(\"24\", \"23\") |-\u003e {\"24\" |-\u003e \u003cleft\u003e}}, {mk_(\"23\", \"24\") |-\u003e {\"24\" |-\u003e \u003cleft\u003e}}, {mk_(\"24\", \"15\") |-\u003e {\"24\" |-\u003e \u003cright\u003e, \"15\" |-\u003e \u003cright\u003e}}, {mk_(\"15\", \"24\") |-\u003e {\"24\" |-\u003e \u003cright\u003e, \"15\" |-\u003e \u003cright\u003e}}, {mk_(\"16\", \"17b\") |-\u003e {\"16\" |-\u003e \u003cright\u003e}}, {mk_(\"17b\", \"16\") |-\u003e {\"16\" |-\u003e \u003cright\u003e}}, {mk_(\"16\", \"19\") |-\u003e {\"16\" |-\u003e \u003cleft\u003e}}, {mk_(\"19\", \"16\") |-\u003e {\"16\" |-\u003e \u003cleft\u003e}}, {mk_(\"16\", \"15\") |-\u003e {\"15\" |-\u003e \u003cleft\u003e}}, {mk_(\"15\", \"16\") |-\u003e {\"15\" |-\u003e \u003cleft\u003e}}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation:(forall m1, m2 in set {{mk_(\"ol\", \"K12\") |-\u003e \"N\"}, {mk_(\"26\", \"K12\") |-\u003e \"K\"}, {mk_(\"22\", \"23\") |-\u003e \"E2\"}, {mk_(\"21\", \"A12\") |-\u003e \"D\"}, {mk_(\"ol\", \"A12\") |-\u003e \"A\"}, {mk_(\"ol\", \"M12\") |-\u003e \"M\"}, {mk_(\"18\", \"M12\") |-\u003e \"L\"}, {mk_(\"13\", \"14\") |-\u003e \"E1\"}, {mk_(\"11\", \"C12\") |-\u003e \"C\"}, {mk_(\"ol\", \"C12\") |-\u003e \"B\"}, {mk_(\"27\", \"O12\") |-\u003e \"O\"}, {mk_(\"ol\", \"O12\") |-\u003e \"R\"}, {mk_(\"ol\", \"Q12\") |-\u003e \"Q\"}, {mk_(\"19\", \"Q12\") |-\u003e \"P\"}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation:(forall m1, m2 in set {{\"K12\" |-\u003e {|-\u003e}}, {\"26\" |-\u003e {|-\u003e}}, {\"25\" |-\u003e {|-\u003e}}, {\"24\" |-\u003e {|-\u003e}}, {\"23\" |-\u003e {|-\u003e}}, {\"22\" |-\u003e {|-\u003e}}, {\"21\" |-\u003e {|-\u003e}}, {\"A12\" |-\u003e {|-\u003e}}, {\"M12\" |-\u003e {|-\u003e}}, {\"18\" |-\u003e {\"t2\" |-\u003e \u003cfixedroute\u003e}}, {\"17s\" |-\u003e {|-\u003e}}, {\"17b\" |-\u003e {|-\u003e}}, {\"16\" |-\u003e {|-\u003e}}, {\"15\" |-\u003e {|-\u003e}}, {\"14\" |-\u003e {|-\u003e}}, {\"13\" |-\u003e {|-\u003e}}, {\"11\" |-\u003e {|-\u003e}}, {\"C12\" |-\u003e {|-\u003e}}, {\"O12\" |-\u003e {|-\u003e}}, {\"Q12\" |-\u003e {|-\u003e}}, {\"19\" |-\u003e {|-\u003e}}, {\"27\" |-\u003e {|-\u003e}}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation:(forall m1, m2 in set {{\"25\" |-\u003e mk_(\u003cleft\u003e, \u003cinterlock\u003e)}, {\"24\" |-\u003e mk_(\u003cright\u003e, \u003cinterlock\u003e)}, {\"15\" |-\u003e mk_(\u003cleft\u003e, \u003cinterlock\u003e)}, {\"16\" |-\u003e mk_(\u003cright\u003e, \u003cinterlock\u003e)}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation:(forall m1, m2 in set {{\"N\" |-\u003e \u003cstop\u003e}, {\"K\" |-\u003e \u003cstop\u003e}, {\"E2\" |-\u003e \u003cstop\u003e}, {\"D\" |-\u003e \u003cstop\u003e}, {\"A\" |-\u003e \u003cstop\u003e}, {\"M\" |-\u003e \u003cstop\u003e}, {\"L\" |-\u003e \u003cstop\u003e}, {\"E1\" |-\u003e \u003cstop\u003e}, {\"C\" |-\u003e \u003cstop\u003e}, {\"B\" |-\u003e \u003cstop\u003e}, {\"O\" |-\u003e \u003cstop\u003e}, {\"R\" |-\u003e \u003cstop\u003e}, {\"P\" |-\u003e \u003cdriveaspect\u003e}, {\"Q\" |-\u003e \u003cstop\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))"]