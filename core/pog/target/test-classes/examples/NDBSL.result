["legal map application obligation:(forall esm:map (Esetnm) to (set of (Eid)), em:map (Eid) to ([Value]), rm:map (Rkey) to (Rinf) \u0026 (((dom em) \u003d (dunion (rng esm))) \u003d\u003e (forall rk in set (dom rm) \u0026 let mk_Rkey(-, fs, ts):Rkey \u003d rk in (rk in set (dom rm)))))","legal map application obligation:(forall esm:map (Esetnm) to (set of (Eid)), em:map (Eid) to ([Value]), rm:map (Rkey) to (Rinf) \u0026 (((dom em) \u003d (dunion (rng esm))) \u003d\u003e (forall rk in set (dom rm) \u0026 let mk_Rkey(-, fs, ts):Rkey \u003d rk in let mk_Rinf(tp, r):Rinf \u003d rm(rk) in (({fs, ts} subset (dom esm)) \u003d\u003e (((tp \u003d \u003cONETOMANY\u003e) \u003d\u003e (forall t1, t2 in set r \u0026 (((t1.tv) \u003d (t2.tv)) \u003d\u003e ((t1.fv) \u003d (t2.fv))))) \u003d\u003e (((tp \u003d \u003cMANYTOONE\u003e) \u003d\u003e (forall t1, t2 in set r \u0026 (((t1.fv) \u003d (t2.fv)) \u003d\u003e ((t1.tv) \u003d (t2.tv))))) \u003d\u003e (((tp \u003d \u003cONETOONE\u003e) \u003d\u003e (forall t1, t2 in set r \u0026 (((t1.fv) \u003d (t2.fv)) \u003c\u003d\u003e ((t1.tv) \u003d (t2.tv))))) \u003d\u003e (forall mk_Tuple(fv, tv) in set r \u0026 (fs in set (dom esm))))))))))","legal map application obligation:(forall esm:map (Esetnm) to (set of (Eid)), em:map (Eid) to ([Value]), rm:map (Rkey) to (Rinf) \u0026 (((dom em) \u003d (dunion (rng esm))) \u003d\u003e (forall rk in set (dom rm) \u0026 let mk_Rkey(-, fs, ts):Rkey \u003d rk in let mk_Rinf(tp, r):Rinf \u003d rm(rk) in (({fs, ts} subset (dom esm)) \u003d\u003e (((tp \u003d \u003cONETOMANY\u003e) \u003d\u003e (forall t1, t2 in set r \u0026 (((t1.tv) \u003d (t2.tv)) \u003d\u003e ((t1.fv) \u003d (t2.fv))))) \u003d\u003e (((tp \u003d \u003cMANYTOONE\u003e) \u003d\u003e (forall t1, t2 in set r \u0026 (((t1.fv) \u003d (t2.fv)) \u003d\u003e ((t1.tv) \u003d (t2.tv))))) \u003d\u003e (((tp \u003d \u003cONETOONE\u003e) \u003d\u003e (forall t1, t2 in set r \u0026 (((t1.fv) \u003d (t2.fv)) \u003c\u003d\u003e ((t1.tv) \u003d (t2.tv))))) \u003d\u003e (forall mk_Tuple(fv, tv) in set r \u0026 ((fv in set esm(fs)) \u003d\u003e (ts in set (dom esm)))))))))))","map compatible obligation:((es not in set (dom esm)) \u003d\u003e (forall ldom1 in set (dom esm~), rdom2 in set (dom {es |-\u003e {}}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (esm~(ldom1) \u003d {es |-\u003e {}}(rdom2)))))","operation postcondition satisfiable obligation:(forall es:Esetnm, oldstate:Ndb \u0026 (pre_ADDES(es, oldstate) \u003d\u003e (exists newstate:Ndb \u0026 post_ADDES(es, oldstate, newstate))))","legal map application obligation:((es in set (dom esm)) \u003d\u003e (es in set (dom esm)))","operation postcondition satisfiable obligation:(forall es:Esetnm, oldstate:Ndb \u0026 (pre_DELES(es, oldstate) \u003d\u003e (exists newstate:Ndb \u0026 post_DELES(es, oldstate, newstate))))","map compatible obligation:((memb subset (dom esm)) \u003d\u003e ((eid not in set (dom em~)) \u003d\u003e (forall ldom1 in set (dom em~), rdom2 in set (dom {eid |-\u003e val}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (em~(ldom1) \u003d {eid |-\u003e val}(rdom2))))))","comprehension map injectivity obligation:((memb subset (dom esm)) \u003d\u003e ((eid not in set (dom em~)) \u003d\u003e ((em \u003d (em~ munion {eid |-\u003e val})) \u003d\u003e (forall m1, m2 in set {{es |-\u003e (esm~(es) union {eid})} | es in set memb} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))))","legal map application obligation:((memb subset (dom esm)) \u003d\u003e ((eid not in set (dom em~)) \u003d\u003e ((em \u003d (em~ munion {eid |-\u003e val})) \u003d\u003e (forall es in set memb \u0026 (es in set (dom esm~))))))","operation postcondition satisfiable obligation:(forall memb:set of (Esetnm), val:[Value], oldstate:Ndb \u0026 (pre_ADDENT(memb, val, oldstate) \u003d\u003e (exists eid:Eid \u0026 post_ADDENT(memb, val, oldstate, eid, oldstate, newstate))))","comprehension map injectivity obligation:(((eid in set (dom em)) and (forall t in set (dunion {(ri.r) | ri in set (rng rm)}) \u0026 (((t.fv) \u003c\u003e eid) and ((t.tv) \u003c\u003e eid)))) \u003d\u003e (forall m1, m2 in set {{es |-\u003e (esm~(es) \\ {eid})} | es in set (dom esm~)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","legal map application obligation:(((eid in set (dom em)) and (forall t in set (dunion {(ri.r) | ri in set (rng rm)}) \u0026 (((t.fv) \u003c\u003e eid) and ((t.tv) \u003c\u003e eid)))) \u003d\u003e (forall es in set (dom esm~) \u0026 (es in set (dom esm~))))","operation postcondition satisfiable obligation:(forall eid:Eid, oldstate:Ndb \u0026 (pre_DELENT(eid, oldstate) \u003d\u003e (exists newstate:Ndb \u0026 post_DELENT(eid, oldstate, newstate))))","map compatible obligation:((({(rk.fs), (rk.ts)} subset (dom esm)) and (rk not in set (dom rm))) \u003d\u003e (forall ldom1 in set (dom rm~), rdom2 in set (dom {rk |-\u003e mk_Rinf(tp, {})}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (rm~(ldom1) \u003d {rk |-\u003e mk_Rinf(tp, {})}(rdom2)))))","operation postcondition satisfiable obligation:(forall rk:Rkey, tp:Maptp, oldstate:Ndb \u0026 (pre_ADDREL(rk, tp, oldstate) \u003d\u003e (exists newstate:Ndb \u0026 post_ADDREL(rk, tp, oldstate, newstate))))","legal map application obligation:((rk in set (dom rm)) \u003d\u003e (rk in set (dom rm)))","operation postcondition satisfiable obligation:(forall rk:Rkey, oldstate:Ndb \u0026 (pre_DELREL(rk, oldstate) \u003d\u003e (exists newstate:Ndb \u0026 post_DELREL(rk, oldstate, newstate))))","legal map application obligation:((rk in set (dom rm)) \u003d\u003e (rk in set (dom rm)))","legal map application obligation:((rk in set (dom rm)) \u003d\u003e (rk in set (dom rm)))","legal map application obligation:(((rk in set (dom rm)) and let ri:Rinf \u003d mu(rm(rk), r |-\u003e ((rm(rk).r) union {mk_Tuple(fval, tval)})) in checkinv(esm, em, (rm ++ {rk |-\u003e ri}))) \u003d\u003e (rk in set (dom rm~)))","legal map application obligation:(((rk in set (dom rm)) and let ri:Rinf \u003d mu(rm(rk), r |-\u003e ((rm(rk).r) union {mk_Tuple(fval, tval)})) in checkinv(esm, em, (rm ++ {rk |-\u003e ri}))) \u003d\u003e (rk in set (dom rm~)))","operation postcondition satisfiable obligation:(forall fval:Eid, tval:Eid, rk:Rkey, oldstate:Ndb \u0026 (pre_ADDTUP(fval, tval, rk, oldstate) \u003d\u003e (exists newstate:Ndb \u0026 post_ADDTUP(fval, tval, rk, oldstate, newstate))))","legal map application obligation:((rk in set (dom rm)) \u003d\u003e (rk in set (dom rm~)))","legal map application obligation:((rk in set (dom rm)) \u003d\u003e (rk in set (dom rm~)))","operation postcondition satisfiable obligation:(forall fval:Eid, tval:Eid, rk:Rkey, oldstate:Ndb \u0026 (pre_DELTUP(fval, tval, rk, oldstate) \u003d\u003e (exists newstate:Ndb \u0026 post_DELTUP(fval, tval, rk, oldstate, newstate))))"]