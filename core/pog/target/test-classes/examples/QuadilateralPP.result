["legal function application obligation:(forall v:vector \u0026 let mk_vector(mk_(hdx, hdy), mk_(tlx, tly)):vector \u003d v in let math:MATH \u003d new MATH() in pre_((math.sqrt)(((tlx - hdx) ** 2) + ((tly - hdy) ** 2))))","type compatibility obligation:(forall v1:vector, v2:vector \u0026 let mk_vector(hd1, mk_(tl1x, tl1y)):vector \u003d v1, mk_vector(mk_(hd2x, hd2y), mk_(tl2x, tl2y)):vector \u003d v2 in is_((tl1x + (tl2x - hd2x)), nat))","state invariant initialized obligation:(((add(add(v1, v2), add(v3, v4)) \u003d NullVector) and ((length(v1) \u003d length(v3)) and (length(v2) \u003d length(v4)))) and (length(v1) \u003d length(v2)))","state invariant satisfiable obligation:(exists  \u0026 (length(v1) \u003d length(v2)))","non-zero obligation:(forall a:real \u0026 ((a \u003c\u003e 0) \u003d\u003e (a \u003c\u003e 0)))","legal map application obligation:(forall qid:Token \u0026 ((qid in set (dom screen)) \u003d\u003e (qid in set (dom screen))))","legal map application obligation:(forall qid:Token \u0026 (((qid in set (dom screen)) and isofclass(Parallelogram,screen(qid))) \u003d\u003e ((qid in set (dom screen)) \u003d\u003e (qid in set (dom screen)))))","type compatibility obligation:(forall qid:Token \u0026 (((qid in set (dom screen)) and isofclass(Parallelogram,screen(qid))) \u003d\u003e is_(screen(qid), Parallelogram)))","legal map application obligation:(forall qid:Token \u0026 (((qid in set (dom screen)) and isofclass(Parallelogram,screen(qid))) \u003d\u003e (qid in set (dom screen))))","map compatible obligation:(forall qid:Token, q:Quadrilateral \u0026 ((q not in set (rng screen)) \u003d\u003e (forall ldom1 in set (dom screen), rdom2 in set (dom {qid |-\u003e q}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (screen(ldom1) \u003d {qid |-\u003e q}(rdom2))))))","legal map application obligation:(forall qid:Token, p1:(nat * nat), p2:(nat * nat) \u0026 ((qid in set (dom screen)) \u003d\u003e (qid in set (dom screen))))","operation call obligation:(forall qid:Token, p1:(nat * nat), p2:(nat * nat) \u0026 ((qid in set (dom screen)) \u003d\u003e (qid in set (dom screen))))","operation call obligation:(forall qid:Token, p1:(nat * nat), p2:(nat * nat) \u0026 ((qid in set (dom screen)) \u003d\u003e (forall screen1:map (Token) to (Quadrilateral) \u0026 (true \u003d\u003e (qid not in set (rng screen1))))))","state invariant initialized obligation:((add(add(v1, v2), add(v3, v4)) \u003d NullVector) and ((length(v1) \u003d length(v3)) and (length(v2) \u003d length(v4))))","state invariant satisfiable obligation:(exists  \u0026 ((length(v1) \u003d length(v3)) and (length(v2) \u003d length(v4))))","legal function application obligation:pre_((math.acos)(inproduct(v1, v2) / (length(v1) * length(v2))))","non-zero obligation:((length(v1) * length(v2)) \u003c\u003e 0)","type invariant satisfiable obligation:(exists a:Angle \u0026 ((a \u003e\u003d 0) and (a \u003c\u003d (2 * pi))))","function postcondition satisfiable obligation:(forall x:real \u0026 (exists res:Angle \u0026 post_acos(x, res)))","function postcondition satisfiable obligation:(forall r:real \u0026 (exists res:real \u0026 post_sqrt(r, res)))","state invariant initialized obligation:(((add(add(v1, v2), add(v3, v4)) \u003d NullVector) and ((length(v1) \u003d length(v3)) and (length(v2) \u003d length(v4)))) and (inproduct(v1, v2) \u003d 0))","state invariant satisfiable obligation:(exists  \u0026 (inproduct(v1, v2) \u003d 0))","state invariant initialized obligation:(add(add(v1, v2), add(v3, v4)) \u003d NullVector)","state invariant satisfiable obligation:(exists position:vector, v1:vector, v2:vector, v3:vector, v4:vector \u0026 (add(add(v1, v2), add(v3, v4)) \u003d NullVector))","state invariant holds obligation:(forall p1:Position, p2:Position \u0026 ((add(add(v1, v2), add(v3, v4)) \u003d NullVector) \u003d\u003e (add(add(v1, v2), add(v3, v4)) \u003d NullVector)))","state invariant holds obligation:((add(add(v1, v2), add(v3, v4)) \u003d NullVector) \u003d\u003e (add(add(v1, v2), add(v3, v4)) \u003d NullVector))"]