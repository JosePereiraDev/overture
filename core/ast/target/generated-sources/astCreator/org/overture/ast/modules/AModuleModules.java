/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.modules;


import org.overture.ast.intf.lex.ILexIdentifierToken;
import org.overture.ast.definitions.PDefinition;
import org.overture.ast.util.ClonableFile;
import org.overture.ast.modules.PModulesBase;
import org.overture.ast.modules.AModuleExports;
import org.overture.ast.modules.AModuleImports;
import java.util.HashMap;
import org.overture.ast.util.ToStringUtil;
import org.overture.ast.analysis.AnalysisException;
import java.util.List;
import org.overture.ast.analysis.intf.IAnswer;
import java.util.Vector;
import org.overture.ast.node.NodeList;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import org.overture.ast.node.GraphNodeList;
import java.lang.String;
import java.util.LinkedList;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.analysis.intf.IAnalysis;
import org.overture.ast.modules.AModuleModules;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AModuleModules extends PModulesBase
{
	private static final long serialVersionUID = 1L;

	private ILexIdentifierToken _name;
	private AModuleImports _imports;
	private AModuleExports _exports;
	private NodeList<PDefinition> _defs = new NodeList<PDefinition>(this);
	private List<? extends ClonableFile> _files = new Vector<ClonableFile>();
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private GraphNodeList<PDefinition> _importdefs = new GraphNodeList<PDefinition>(this);
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private GraphNodeList<PDefinition> _exportdefs = new GraphNodeList<PDefinition>(this);
	private Boolean _isFlat;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private Boolean _typeChecked;
	private Boolean _isDLModule;

	/**
	* Creates a new {@code AModuleModules TAG=module} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param name_ the {@link ILexIdentifierToken} node for the {@code name} child of this {@link AModuleModules} node
	* @param imports_ the {@link AModuleImports} node for the {@code imports} child of this {@link AModuleModules} node
	* @param exports_ the {@link AModuleExports} node for the {@code exports} child of this {@link AModuleModules} node
	* @param defs_ the {@link NodeList} node for the {@code defs} child of this {@link AModuleModules} node
	* @param files_ the {@link List} node for the {@code files} child of this {@link AModuleModules} node
	* @param isFlat_ the {@link Boolean} node for the {@code isFlat} child of this {@link AModuleModules} node
	* @param isDLModule_ the {@link Boolean} node for the {@code isDLModule} child of this {@link AModuleModules} node
	*/
	public AModuleModules(ILexIdentifierToken name_, AModuleImports imports_, AModuleExports exports_, List<? extends PDefinition> defs_, List<? extends ClonableFile> files_, Boolean isFlat_, Boolean isDLModule_)
	{
		super();
		this.setName(name_);
		this.setImports(imports_);
		this.setExports(exports_);
		this.setDefs(defs_);
		this.setFiles(files_);
		this.setIsFlat(isFlat_);
		this.setTypeChecked(false);
		this.setIsDLModule(isDLModule_);

	}


	/**
	* Creates a new {@code AModuleModules} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param name_ the {@link ILexIdentifierToken} node for the {@code name} child of this {@link AModuleModules} node
	* @param imports_ the {@link AModuleImports} node for the {@code imports} child of this {@link AModuleModules} node
	* @param exports_ the {@link AModuleExports} node for the {@code exports} child of this {@link AModuleModules} node
	* @param defs_ the {@link NodeList} node for the {@code defs} child of this {@link AModuleModules} node
	* @param files_ the {@link List} node for the {@code files} child of this {@link AModuleModules} node
	* @param importdefs_ the {@link GraphNodeList} <b>graph</a> node for the {@code importdefs} child of this {@link AModuleModules} node.
	*  <i>The parent of this {@code importdefs } will not be changed by adding it to this node.</i>
	* @param exportdefs_ the {@link GraphNodeList} <b>graph</a> node for the {@code exportdefs} child of this {@link AModuleModules} node.
	*  <i>The parent of this {@code exportdefs } will not be changed by adding it to this node.</i>
	* @param isFlat_ the {@link Boolean} node for the {@code isFlat} child of this {@link AModuleModules} node
	* @param typeChecked_ the {@link Boolean} <b>graph</a> node for the {@code typeChecked} child of this {@link AModuleModules} node.
	*  <i>The parent of this {@code typeChecked } will not be changed by adding it to this node.</i>
	* @param isDLModule_ the {@link Boolean} node for the {@code isDLModule} child of this {@link AModuleModules} node
	*/
	public AModuleModules(ILexIdentifierToken name_, AModuleImports imports_, AModuleExports exports_, List<? extends PDefinition> defs_, List<? extends ClonableFile> files_, List<? extends PDefinition> importdefs_, List<? extends PDefinition> exportdefs_, Boolean isFlat_, Boolean typeChecked_, Boolean isDLModule_)
	{
		super();
		this.setName(name_);
		this.setImports(imports_);
		this.setExports(exports_);
		this.setDefs(defs_);
		this.setFiles(files_);
		this.setImportdefs(importdefs_);
		this.setExportdefs(exportdefs_);
		this.setIsFlat(isFlat_);
		this.setTypeChecked(typeChecked_);
		this.setIsDLModule(isDLModule_);

	}


	/**
	 * Creates a new {@link AModuleModules} node with no children.
	 */
	public AModuleModules()
	{

	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AModuleModules} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AModuleModules} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AModuleModules} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			this._name = null;
			return;
		}

		if (this._imports == child) {
			this._imports = null;
			return;
		}

		if (this._exports == child) {
			this._exports = null;
			return;
		}

		if (this._defs.remove(child)) {
				return;
		}
		if (this._importdefs.contains(child)) {
			return;
		}

		if (this._exportdefs.contains(child)) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}



	public String toString()
	{
		return "" + "module "+_name.getName()+  "\n definitions\n" + ToStringUtil.getDefinitionListString(_defs)+"end "+_name.getName()+"\n";
	}


	/**
	 * Returns a deep clone of this {@link AModuleModules} node.
	 * @return a deep clone of this {@link AModuleModules} node
	 */
	public AModuleModules clone()
	{
		return new AModuleModules(
			cloneNode(_name),
			cloneNode(_imports),
			cloneNode(_exports),
			cloneList(_defs),
			cloneListExternal(_files),
			_importdefs,
			_exportdefs,
			_isFlat,
			_typeChecked,
			_isDLModule
		);
	}


	/**
	 * Creates a deep clone of this {@link AModuleModules} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AModuleModules} node
	 */
	public AModuleModules clone(Map<INode,INode> oldToNewMap)
	{
		AModuleModules node = new AModuleModules(
			cloneNode(_name, oldToNewMap),
			cloneNode(_imports, oldToNewMap),
			cloneNode(_exports, oldToNewMap),
			cloneList(_defs, oldToNewMap),
			cloneListExternal(_files, oldToNewMap),
			_importdefs,
			_exportdefs,
			_isFlat,
			_typeChecked,
			_isDLModule
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_name",this._name);
		fields.put("_imports",this._imports);
		fields.put("_exports",this._exports);
		fields.put("_defs",this._defs);
		fields.put("_files",this._files);
		fields.put("_importdefs",this._importdefs);
		fields.put("_exportdefs",this._exportdefs);
		fields.put("_isFlat",this._isFlat);
		fields.put("_typeChecked",this._typeChecked);
		fields.put("_isDLModule",this._isDLModule);
		return fields;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AModuleModules)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Sets the {@code _name} child of this {@link AModuleModules} node.
	 * @param value the new {@code _name} child of this {@link AModuleModules} node
	*/
	public void setName(ILexIdentifierToken value)
	{
		if (this._name != null) {
			this._name.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._name = value;

	}


	/**
	 * @return the {@link ILexIdentifierToken} node which is the {@code _name} child of this {@link AModuleModules} node
	*/
	public ILexIdentifierToken getName()
	{
		return this._name;
	}


	/**
	 * Sets the {@code _imports} child of this {@link AModuleModules} node.
	 * @param value the new {@code _imports} child of this {@link AModuleModules} node
	*/
	public void setImports(AModuleImports value)
	{
		if (this._imports != null) {
			this._imports.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._imports = value;

	}


	/**
	 * @return the {@link AModuleImports} node which is the {@code _imports} child of this {@link AModuleModules} node
	*/
	public AModuleImports getImports()
	{
		return this._imports;
	}


	/**
	 * Sets the {@code _exports} child of this {@link AModuleModules} node.
	 * @param value the new {@code _exports} child of this {@link AModuleModules} node
	*/
	public void setExports(AModuleExports value)
	{
		if (this._exports != null) {
			this._exports.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._exports = value;

	}


	/**
	 * @return the {@link AModuleExports} node which is the {@code _exports} child of this {@link AModuleModules} node
	*/
	public AModuleExports getExports()
	{
		return this._exports;
	}


	/**
	 * Sets the {@code _defs} child of this {@link AModuleModules} node.
	 * @param value the new {@code _defs} child of this {@link AModuleModules} node
	*/
	public void setDefs(List<? extends PDefinition> value)
	{
		if (this._defs.equals(value)) {
			return;
		}
		this._defs.clear();
		if (value != null) {
			this._defs.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _defs} child of this {@link AModuleModules} node
	*/
	public LinkedList<PDefinition> getDefs()
	{
		return this._defs;
	}


	/**
	 * Sets the {@code _files} child of this {@link AModuleModules} node.
	 * @param value the new {@code _files} child of this {@link AModuleModules} node
	*/
	public void setFiles(List<? extends ClonableFile> value)
	{
		this._files = value;
	}


	/**
	 * @return the {@link List} node which is the {@code _files} child of this {@link AModuleModules} node
	*/
	public List<? extends ClonableFile> getFiles()
	{
		return this._files;
	}


	/**
	 * Sets the {@code _importdefs} child of this {@link AModuleModules} node.
	 * @param value the new {@code _importdefs} child of this {@link AModuleModules} node
	*/
	public void setImportdefs(List<? extends PDefinition> value)
	{
		if (this._importdefs.equals(value)) {
			return;
		}
		this._importdefs.clear();
		if (value != null) {
			this._importdefs.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _importdefs} child of this {@link AModuleModules} node
	*/
	public LinkedList<PDefinition> getImportdefs()
	{
		return this._importdefs;
	}


	/**
	 * Sets the {@code _exportdefs} child of this {@link AModuleModules} node.
	 * @param value the new {@code _exportdefs} child of this {@link AModuleModules} node
	*/
	public void setExportdefs(List<? extends PDefinition> value)
	{
		if (this._exportdefs.equals(value)) {
			return;
		}
		this._exportdefs.clear();
		if (value != null) {
			this._exportdefs.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _exportdefs} child of this {@link AModuleModules} node
	*/
	public LinkedList<PDefinition> getExportdefs()
	{
		return this._exportdefs;
	}


	/**
	 * Sets the {@code _isFlat} child of this {@link AModuleModules} node.
	 * @param value the new {@code _isFlat} child of this {@link AModuleModules} node
	*/
	public void setIsFlat(Boolean value)
	{
		this._isFlat = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _isFlat} child of this {@link AModuleModules} node
	*/
	public Boolean getIsFlat()
	{
		return this._isFlat;
	}


	/**
	 * Sets the {@code _typeChecked} child of this {@link AModuleModules} node.
	 * @param value the new {@code _typeChecked} child of this {@link AModuleModules} node
	*/
	public void setTypeChecked(Boolean value)
	{
		this._typeChecked = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _typeChecked} child of this {@link AModuleModules} node
	*/
	public Boolean getTypeChecked()
	{
		return this._typeChecked;
	}


	/**
	 * Sets the {@code _isDLModule} child of this {@link AModuleModules} node.
	 * @param value the new {@code _isDLModule} child of this {@link AModuleModules} node
	*/
	public void setIsDLModule(Boolean value)
	{
		this._isDLModule = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _isDLModule} child of this {@link AModuleModules} node
	*/
	public Boolean getIsDLModule()
	{
		return this._isDLModule;
	}


	/**
	* Calls the {@link IAnalysis#caseAModuleModules(AModuleModules)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AModuleModules} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseAModuleModules(this);
	}


	/**
	* Calls the {@link IAnswer#caseAModuleModules(AModuleModules)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AModuleModules} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAModuleModules(this);
	}


	/**
	* Calls the {@link IQuestion#caseAModuleModules(AModuleModules, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AModuleModules} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAModuleModules(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAModuleModules(AModuleModules, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AModuleModules} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAModuleModules(this,question);
	}



}
