/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.modules;


import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.node.Node;
import org.overture.ast.modules.PImport;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import java.util.HashMap;
import java.lang.String;
import org.overture.ast.modules.AModuleModules;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public abstract class PImportBase extends Node implements PImport
{
	private static final long serialVersionUID = 1L;

	protected ILexLocation _location;
	protected ILexNameToken _name;
	protected ILexNameToken _renamed;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected AModuleModules _from;

	/**
	* Creates a new {@code PImportBase TAG=import} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param location_ the {@link ILexLocation} node for the {@code location} child of this {@link PImportBase} node
	* @param name_ the {@link ILexNameToken} node for the {@code name} child of this {@link PImportBase} node
	* @param renamed_ the {@link ILexNameToken} node for the {@code renamed} child of this {@link PImportBase} node
	*/
	public PImportBase(ILexLocation location_, ILexNameToken name_, ILexNameToken renamed_)
	{
		super();
		this.setLocation(location_);
		this.setName(name_);
		this.setRenamed(renamed_);

	}


	/**
	 * Creates a new {@link PImportBase} node with no children.
	 */
	public PImportBase()
	{

	}


	/**
	* Creates a new {@code PImportBase} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param location_ the {@link ILexLocation} node for the {@code location} child of this {@link PImportBase} node
	* @param name_ the {@link ILexNameToken} node for the {@code name} child of this {@link PImportBase} node
	* @param renamed_ the {@link ILexNameToken} node for the {@code renamed} child of this {@link PImportBase} node
	* @param from_ the {@link AModuleModules} <b>graph</a> node for the {@code from} child of this {@link PImportBase} node.
	*  <i>The parent of this {@code from } will not be changed by adding it to this node.</i>
	*/
	public PImportBase(ILexLocation location_, ILexNameToken name_, ILexNameToken renamed_, AModuleModules from_)
	{
		super();
		this.setLocation(location_);
		this.setName(name_);
		this.setRenamed(renamed_);
		this.setFrom(from_);

	}



	public String toString()
	{
		return super.toString();

	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof PImportBase)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Creates a deep clone of this {@link PImportBase} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link PImportBase} node
	 */
	@Override
	public abstract PImport clone(Map<INode,INode> oldToNewMap);

	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link PImportBase} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link PImportBase} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link PImportBase} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			this._name = null;
			return;
		}

		if (this._renamed == child) {
			this._renamed = null;
			return;
		}

		if (this._from == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_location",this._location);
		fields.put("_name",this._name);
		fields.put("_renamed",this._renamed);
		fields.put("_from",this._from);
		return fields;
	}


	/**
	 * Returns a deep clone of this {@link PImportBase} node.
	 * @return a deep clone of this {@link PImportBase} node
	 */
	@Override
	public abstract PImport clone();

	/**
	 * Sets the {@code _location} child of this {@link PImportBase} node.
	 * @param value the new {@code _location} child of this {@link PImportBase} node
	*/
	public void setLocation(ILexLocation value)
	{
		this._location = value;
	}


	/**
	 * @return the {@link ILexLocation} node which is the {@code _location} child of this {@link PImportBase} node
	*/
	public ILexLocation getLocation()
	{
		return this._location;
	}


	/**
	 * Sets the {@code _name} child of this {@link PImportBase} node.
	 * @param value the new {@code _name} child of this {@link PImportBase} node
	*/
	public void setName(ILexNameToken value)
	{
		if (this._name != null) {
			this._name.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._name = value;

	}


	/**
	 * @return the {@link ILexNameToken} node which is the {@code _name} child of this {@link PImportBase} node
	*/
	public ILexNameToken getName()
	{
		return this._name;
	}


	/**
	 * Sets the {@code _renamed} child of this {@link PImportBase} node.
	 * @param value the new {@code _renamed} child of this {@link PImportBase} node
	*/
	public void setRenamed(ILexNameToken value)
	{
		if (this._renamed != null) {
			this._renamed.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._renamed = value;

	}


	/**
	 * @return the {@link ILexNameToken} node which is the {@code _renamed} child of this {@link PImportBase} node
	*/
	public ILexNameToken getRenamed()
	{
		return this._renamed;
	}


	/**
	 * Sets the {@code _from} child of this {@link PImportBase} node.
	 * @param value the new {@code _from} child of this {@link PImportBase} node
	*/
	public void setFrom(AModuleModules value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._from = value;

	}


	/**
	 * @return the {@link AModuleModules} node which is the {@code _from} child of this {@link PImportBase} node
	*/
	public AModuleModules getFrom()
	{
		return this._from;
	}



}
