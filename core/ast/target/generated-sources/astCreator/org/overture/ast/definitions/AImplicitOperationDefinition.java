/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.definitions;


import org.overture.ast.definitions.PDefinition;
import org.overture.ast.statements.PStm;
import org.overture.ast.definitions.AImplicitOperationDefinition;
import org.overture.ast.patterns.APatternListTypePair;
import java.util.HashMap;
import org.overture.ast.definitions.SClassDefinition;
import org.overture.ast.util.ToStringUtil;
import org.overture.ast.typechecker.Pass;
import org.overture.ast.analysis.intf.IAnswer;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import org.overture.ast.statements.AExternalClause;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import java.lang.String;
import java.util.LinkedList;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.definitions.SOperationDefinitionBase;
import org.overture.ast.expressions.PExp;
import org.overture.ast.definitions.AStateDefinition;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import java.util.List;
import org.overture.ast.node.NodeList;
import org.overture.ast.typechecker.NameScope;
import org.overture.ast.types.PType;
import org.overture.ast.statements.AErrorCase;
import org.overture.ast.definitions.AExplicitFunctionDefinition;
import org.overture.ast.patterns.APatternTypePair;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AImplicitOperationDefinition extends SOperationDefinitionBase
{
	private static final long serialVersionUID = 1L;

	private NodeList<APatternListTypePair> _parameterPatterns = new NodeList<APatternListTypePair>(this);
	private APatternTypePair _result;
	private NodeList<AExternalClause> _externals = new NodeList<AExternalClause>(this);
	private NodeList<AErrorCase> _errors = new NodeList<AErrorCase>(this);
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private PDefinition _stateDefinition;

	/**
	* Creates a new {@code AImplicitOperationDefinition} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param parameterPatterns_ the {@link NodeList} node for the {@code parameterPatterns} child of this {@link AImplicitOperationDefinition} node
	* @param result_ the {@link APatternTypePair} node for the {@code result} child of this {@link AImplicitOperationDefinition} node
	* @param externals_ the {@link NodeList} node for the {@code externals} child of this {@link AImplicitOperationDefinition} node
	* @param errors_ the {@link NodeList} node for the {@code errors} child of this {@link AImplicitOperationDefinition} node
	* @param stateDefinition_ the {@link PDefinition} <b>graph</a> node for the {@code stateDefinition} child of this {@link AImplicitOperationDefinition} node.
	*  <i>The parent of this {@code stateDefinition } will not be changed by adding it to this node.</i>
	*/
	public AImplicitOperationDefinition(ILexLocation location_, ILexNameToken name_, NameScope nameScope_, Boolean used_, SClassDefinition classDefinition_, AAccessSpecifierAccessSpecifier access_, PType type_, Pass pass_, PStm body_, PExp precondition_, PExp postcondition_, AExplicitFunctionDefinition predef_, AExplicitFunctionDefinition postdef_, AStateDefinition state_, PType actualResult_, Boolean isConstructor_, List<? extends APatternListTypePair> parameterPatterns_, APatternTypePair result_, List<? extends AExternalClause> externals_, List<? extends AErrorCase> errors_, PDefinition stateDefinition_)
	{
		super(location_,name_,nameScope_,used_,classDefinition_,access_,type_,pass_,body_,precondition_,postcondition_,predef_,postdef_,state_,actualResult_,isConstructor_);
		this.setParameterPatterns(parameterPatterns_);
		this.setResult(result_);
		this.setExternals(externals_);
		this.setErrors(errors_);
		this.setStateDefinition(stateDefinition_);

	}


	/**
	* Creates a new {@code AImplicitOperationDefinition TAG=implicit} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param parameterPatterns_ the {@link NodeList} node for the {@code parameterPatterns} child of this {@link AImplicitOperationDefinition} node
	* @param result_ the {@link APatternTypePair} node for the {@code result} child of this {@link AImplicitOperationDefinition} node
	* @param externals_ the {@link NodeList} node for the {@code externals} child of this {@link AImplicitOperationDefinition} node
	* @param errors_ the {@link NodeList} node for the {@code errors} child of this {@link AImplicitOperationDefinition} node
	*/
	public AImplicitOperationDefinition(ILexLocation location_, NameScope nameScope_, Boolean used_, AAccessSpecifierAccessSpecifier access_, Pass pass_, PStm body_, PExp precondition_, PExp postcondition_, Boolean isConstructor_, List<? extends APatternListTypePair> parameterPatterns_, APatternTypePair result_, List<? extends AExternalClause> externals_, List<? extends AErrorCase> errors_)
	{
		super(location_,null,nameScope_,used_,null,access_,null,pass_,body_,precondition_,postcondition_,null,null,null,null,isConstructor_);
		this.setParameterPatterns(parameterPatterns_);
		this.setResult(result_);
		this.setExternals(externals_);
		this.setErrors(errors_);

	}


	/**
	 * Creates a new {@link AImplicitOperationDefinition} node with no children.
	 */
	public AImplicitOperationDefinition()
	{

	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AImplicitOperationDefinition} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AImplicitOperationDefinition} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AImplicitOperationDefinition} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			return;
		}

		if (this._classDefinition == child) {
			return;
		}

		if (this._access == child) {
			this._access = null;
			return;
		}

		if (this._type == child) {
			return;
		}

		if (this._body == child) {
			this._body = null;
			return;
		}

		if (this._precondition == child) {
			this._precondition = null;
			return;
		}

		if (this._postcondition == child) {
			this._postcondition = null;
			return;
		}

		if (this._predef == child) {
			return;
		}

		if (this._postdef == child) {
			return;
		}

		if (this._state == child) {
			return;
		}

		if (this._actualResult == child) {
			return;
		}

		if (this._parameterPatterns.remove(child)) {
				return;
		}
		if (this._result == child) {
			this._result = null;
			return;
		}

		if (this._externals.remove(child)) {
				return;
		}
		if (this._errors.remove(child)) {
				return;
		}
		if (this._stateDefinition == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_parameterPatterns",this._parameterPatterns);
		fields.put("_result",this._result);
		fields.put("_externals",this._externals);
		fields.put("_errors",this._errors);
		fields.put("_stateDefinition",this._stateDefinition);
		return fields;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AImplicitOperationDefinition)		{
			 return toString().equals(o.toString());
		}
		return false;
	}



	public String toString()
	{
		return "" + ""+ToStringUtil.getImplicitOperationString(this);
	}


	/**
	 * Returns a deep clone of this {@link AImplicitOperationDefinition} node.
	 * @return a deep clone of this {@link AImplicitOperationDefinition} node
	 */
	public AImplicitOperationDefinition clone()
	{
		return new AImplicitOperationDefinition(
			_location,
			_name,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access),
			_type,
			_pass,
			cloneNode(_body),
			cloneNode(_precondition),
			cloneNode(_postcondition),
			_predef,
			_postdef,
			_state,
			_actualResult,
			_isConstructor,
			cloneList(_parameterPatterns),
			cloneNode(_result),
			cloneList(_externals),
			cloneList(_errors),
			_stateDefinition
		);
	}


	/**
	 * Creates a deep clone of this {@link AImplicitOperationDefinition} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AImplicitOperationDefinition} node
	 */
	public AImplicitOperationDefinition clone(Map<INode,INode> oldToNewMap)
	{
		AImplicitOperationDefinition node = new AImplicitOperationDefinition(
			_location,
			_name,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access, oldToNewMap),
			_type,
			_pass,
			cloneNode(_body, oldToNewMap),
			cloneNode(_precondition, oldToNewMap),
			cloneNode(_postcondition, oldToNewMap),
			_predef,
			_postdef,
			_state,
			_actualResult,
			_isConstructor,
			cloneList(_parameterPatterns, oldToNewMap),
			cloneNode(_result, oldToNewMap),
			cloneList(_externals, oldToNewMap),
			cloneList(_errors, oldToNewMap),
			_stateDefinition
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Sets the {@code _parameterPatterns} child of this {@link AImplicitOperationDefinition} node.
	 * @param value the new {@code _parameterPatterns} child of this {@link AImplicitOperationDefinition} node
	*/
	public void setParameterPatterns(List<? extends APatternListTypePair> value)
	{
		if (this._parameterPatterns.equals(value)) {
			return;
		}
		this._parameterPatterns.clear();
		if (value != null) {
			this._parameterPatterns.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _parameterPatterns} child of this {@link AImplicitOperationDefinition} node
	*/
	public LinkedList<APatternListTypePair> getParameterPatterns()
	{
		return this._parameterPatterns;
	}


	/**
	 * Sets the {@code _result} child of this {@link AImplicitOperationDefinition} node.
	 * @param value the new {@code _result} child of this {@link AImplicitOperationDefinition} node
	*/
	public void setResult(APatternTypePair value)
	{
		if (this._result != null) {
			this._result.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._result = value;

	}


	/**
	 * @return the {@link APatternTypePair} node which is the {@code _result} child of this {@link AImplicitOperationDefinition} node
	*/
	public APatternTypePair getResult()
	{
		return this._result;
	}


	/**
	 * Sets the {@code _externals} child of this {@link AImplicitOperationDefinition} node.
	 * @param value the new {@code _externals} child of this {@link AImplicitOperationDefinition} node
	*/
	public void setExternals(List<? extends AExternalClause> value)
	{
		if (this._externals.equals(value)) {
			return;
		}
		this._externals.clear();
		if (value != null) {
			this._externals.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _externals} child of this {@link AImplicitOperationDefinition} node
	*/
	public LinkedList<AExternalClause> getExternals()
	{
		return this._externals;
	}


	/**
	 * Sets the {@code _errors} child of this {@link AImplicitOperationDefinition} node.
	 * @param value the new {@code _errors} child of this {@link AImplicitOperationDefinition} node
	*/
	public void setErrors(List<? extends AErrorCase> value)
	{
		if (this._errors.equals(value)) {
			return;
		}
		this._errors.clear();
		if (value != null) {
			this._errors.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _errors} child of this {@link AImplicitOperationDefinition} node
	*/
	public LinkedList<AErrorCase> getErrors()
	{
		return this._errors;
	}


	/**
	 * Sets the {@code _stateDefinition} child of this {@link AImplicitOperationDefinition} node.
	 * @param value the new {@code _stateDefinition} child of this {@link AImplicitOperationDefinition} node
	*/
	public void setStateDefinition(PDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._stateDefinition = value;

	}


	/**
	 * @return the {@link PDefinition} node which is the {@code _stateDefinition} child of this {@link AImplicitOperationDefinition} node
	*/
	public PDefinition getStateDefinition()
	{
		return this._stateDefinition;
	}


	/**
	* Calls the {@link IAnalysis#caseAImplicitOperationDefinition(AImplicitOperationDefinition)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AImplicitOperationDefinition} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseAImplicitOperationDefinition(this);
	}


	/**
	* Calls the {@link IAnswer#caseAImplicitOperationDefinition(AImplicitOperationDefinition)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AImplicitOperationDefinition} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAImplicitOperationDefinition(this);
	}


	/**
	* Calls the {@link IQuestion#caseAImplicitOperationDefinition(AImplicitOperationDefinition, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AImplicitOperationDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAImplicitOperationDefinition(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAImplicitOperationDefinition(AImplicitOperationDefinition, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AImplicitOperationDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAImplicitOperationDefinition(this,question);
	}



}
