/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.statements;


import org.overture.ast.statements.PStm;
import org.overture.ast.statements.ACyclesStm;
import org.overture.ast.statements.PStmBase;
import java.util.HashMap;
import org.overture.ast.expressions.PExp;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.analysis.intf.IAnswer;
import java.lang.Long;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import java.lang.String;
import org.overture.ast.types.PType;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class ACyclesStm extends PStmBase
{
	private static final long serialVersionUID = 1L;

	private PExp _cycles;
	private PStm _statement;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private Long _value;

	/**
	* Creates a new {@code ACyclesStm TAG=cycles} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param cycles_ the {@link PExp} node for the {@code cycles} child of this {@link ACyclesStm} node
	* @param statement_ the {@link PStm} node for the {@code statement} child of this {@link ACyclesStm} node
	*/
	public ACyclesStm(ILexLocation location_, PExp cycles_, PStm statement_)
	{
		super(location_,null);
		this.setCycles(cycles_);
		this.setStatement(statement_);
		this.setValue(0L);

	}


	/**
	 * Creates a new {@link ACyclesStm} node with no children.
	 */
	public ACyclesStm()
	{

	}


	/**
	* Creates a new {@code ACyclesStm} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param cycles_ the {@link PExp} node for the {@code cycles} child of this {@link ACyclesStm} node
	* @param statement_ the {@link PStm} node for the {@code statement} child of this {@link ACyclesStm} node
	* @param value_ the {@link Long} <b>graph</a> node for the {@code value} child of this {@link ACyclesStm} node.
	*  <i>The parent of this {@code value } will not be changed by adding it to this node.</i>
	*/
	public ACyclesStm(ILexLocation location_, PType type_, PExp cycles_, PStm statement_, Long value_)
	{
		super(location_,type_);
		this.setCycles(cycles_);
		this.setStatement(statement_);
		this.setValue(value_);

	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof ACyclesStm)		{
			 return toString().equals(o.toString());
		}
		return false;
	}



	public String toString()
	{
		return "" + "cycles ("+_cycles+") "+_statement;
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_cycles",this._cycles);
		fields.put("_statement",this._statement);
		fields.put("_value",this._value);
		return fields;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link ACyclesStm} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link ACyclesStm} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link ACyclesStm} node
	 */
	public void removeChild(INode child)
	{
		if (this._type == child) {
			return;
		}

		if (this._cycles == child) {
			this._cycles = null;
			return;
		}

		if (this._statement == child) {
			this._statement = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a deep clone of this {@link ACyclesStm} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link ACyclesStm} node
	 */
	public ACyclesStm clone(Map<INode,INode> oldToNewMap)
	{
		ACyclesStm node = new ACyclesStm(
			_location,
			_type,
			cloneNode(_cycles, oldToNewMap),
			cloneNode(_statement, oldToNewMap),
			_value
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Returns a deep clone of this {@link ACyclesStm} node.
	 * @return a deep clone of this {@link ACyclesStm} node
	 */
	public ACyclesStm clone()
	{
		return new ACyclesStm(
			_location,
			_type,
			cloneNode(_cycles),
			cloneNode(_statement),
			_value
		);
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Sets the {@code _cycles} child of this {@link ACyclesStm} node.
	 * @param value the new {@code _cycles} child of this {@link ACyclesStm} node
	*/
	public void setCycles(PExp value)
	{
		if (this._cycles != null) {
			this._cycles.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._cycles = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _cycles} child of this {@link ACyclesStm} node
	*/
	public PExp getCycles()
	{
		return this._cycles;
	}


	/**
	 * Sets the {@code _statement} child of this {@link ACyclesStm} node.
	 * @param value the new {@code _statement} child of this {@link ACyclesStm} node
	*/
	public void setStatement(PStm value)
	{
		if (this._statement != null) {
			this._statement.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._statement = value;

	}


	/**
	 * @return the {@link PStm} node which is the {@code _statement} child of this {@link ACyclesStm} node
	*/
	public PStm getStatement()
	{
		return this._statement;
	}


	/**
	 * Sets the {@code _value} child of this {@link ACyclesStm} node.
	 * @param value the new {@code _value} child of this {@link ACyclesStm} node
	*/
	public void setValue(Long value)
	{
		this._value = value;
	}


	/**
	 * @return the {@link Long} node which is the {@code _value} child of this {@link ACyclesStm} node
	*/
	public Long getValue()
	{
		return this._value;
	}


	/**
	* Calls the {@link IAnalysis#caseACyclesStm(ACyclesStm)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link ACyclesStm} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseACyclesStm(this);
	}


	/**
	* Calls the {@link IAnswer#caseACyclesStm(ACyclesStm)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link ACyclesStm} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseACyclesStm(this);
	}


	/**
	* Calls the {@link IQuestion#caseACyclesStm(ACyclesStm, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link ACyclesStm} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseACyclesStm(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseACyclesStm(ACyclesStm, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link ACyclesStm} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseACyclesStm(this,question);
	}



}
