/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.analysis.intf;


import org.overture.ast.intf.lex.ILexIdentifierToken;
import org.overture.ast.modules.AOperationValueImport;
import org.overture.ast.expressions.ACasesExp;
import org.overture.ast.expressions.AUnaryPlusUnaryExp;
import org.overture.ast.expressions.ALetDefExp;
import org.overture.ast.expressions.PModifier;
import org.overture.ast.definitions.ARenamedDefinition;
import org.overture.ast.statements.AAssignmentStm;
import org.overture.ast.statements.AFieldObjectDesignator;
import org.overture.ast.expressions.AIsOfBaseClassExp;
import java.lang.Integer;
import org.overture.ast.definitions.AInstanceVariableDefinition;
import org.overture.ast.expressions.AUndefinedExp;
import org.overture.ast.expressions.ASubtractNumericBinaryExp;
import org.overture.ast.definitions.PAccess;
import org.overture.ast.patterns.PPattern;
import org.overture.ast.definitions.traces.PTraceCoreDefinition;
import java.lang.Long;
import org.overture.ast.expressions.ALetBeStExp;
import org.overture.ast.expressions.AIotaExp;
import org.overture.ast.expressions.AElementsUnaryExp;
import org.overture.ast.types.ASetType;
import org.overture.ast.definitions.ATypeDefinition;
import org.overture.ast.statements.PStmtAlternative;
import org.overture.ast.types.SBasicType;
import org.overture.ast.expressions.SBinaryExp;
import org.overture.ast.definitions.traces.AConcurrentExpressionTraceCoreDefinition;
import org.overture.ast.expressions.AMapInverseUnaryExp;
import org.overture.ast.expressions.AMapUnionBinaryExp;
import org.overture.ast.types.AUnresolvedType;
import org.overture.ast.types.ARealNumericBasicType;
import org.overture.ast.patterns.AObjectPattern;
import org.overture.ast.statements.ACyclesStm;
import org.overture.ast.expressions.AExists1Exp;
import org.overture.ast.expressions.ATupleExp;
import org.overture.ast.patterns.AIntegerPattern;
import org.overture.ast.node.tokens.TStatic;
import org.overture.ast.expressions.ABooleanConstExp;
import org.overture.ast.expressions.SMapExp;
import org.overture.ast.patterns.ATypeBind;
import org.overture.ast.expressions.PExp;
import org.overture.ast.statements.ANonDeterministicSimpleBlockStm;
import org.overture.ast.expressions.AAbsoluteUnaryExp;
import org.overture.ast.statements.AApplyObjectDesignator;
import org.overture.ast.expressions.AIsExp;
import org.overture.ast.types.AOptionalType;
import org.overture.ast.types.AUnionType;
import org.overture.ast.definitions.APrivateAccess;
import org.overture.ast.definitions.traces.ALetBeStBindingTraceDefinition;
import org.overture.ast.modules.PModules;
import org.overture.ast.definitions.AImplicitFunctionDefinition;
import org.overture.ast.types.AVoidType;
import org.overture.ast.patterns.ATuplePattern;
import org.overture.ast.statements.ACallStm;
import org.overture.ast.statements.ASelfObjectDesignator;
import org.overture.ast.typechecker.ClassDefinitionSettings;
import org.overture.ast.statements.AFieldStateDesignator;
import org.overture.ast.types.AVoidReturnType;
import org.overture.ast.patterns.AStringPattern;
import org.overture.ast.definitions.APublicAccess;
import org.overture.ast.expressions.ADomainResByBinaryExp;
import org.overture.ast.patterns.AMapletPatternMaplet;
import org.overture.ast.expressions.ACardinalityUnaryExp;
import org.overture.ast.types.ABooleanBasicType;
import org.overture.ast.definitions.traces.AInstanceTraceDefinition;
import org.overture.ast.statements.ASubclassResponsibilityStm;
import org.overture.ast.expressions.SSeqExp;
import org.overture.ast.expressions.ASetEnumSetExp;
import org.overture.ast.patterns.PMultipleBind;
import org.overture.ast.expressions.ADefExp;
import org.overture.ast.types.AFunctionType;
import org.overture.ast.expressions.AProperSubsetBinaryExp;
import org.overture.ast.types.AUnknownType;
import org.overture.ast.modules.AModuleExports;
import org.overture.ast.expressions.ATimeExp;
import org.overture.ast.definitions.traces.AApplyExpressionTraceCoreDefinition;
import org.overture.ast.expressions.AImpliesBooleanBinaryExp;
import org.overture.ast.statements.ACaseAlternativeStm;
import org.overture.ast.patterns.ANamePatternPair;
import org.overture.ast.types.SSeqType;
import org.overture.ast.patterns.ASetBind;
import org.overture.ast.definitions.AStateDefinition;
import org.overture.ast.statements.AForAllStm;
import org.overture.ast.expressions.AGreaterNumericBinaryExp;
import org.overture.ast.expressions.ASetCompSetExp;
import org.overture.ast.patterns.AUnionPattern;
import org.overture.ast.expressions.AHeadUnaryExp;
import org.overture.ast.types.AUndefinedType;
import org.overture.ast.expressions.AFieldExp;
import org.overture.ast.patterns.ARealPattern;
import org.overture.ast.definitions.APerSyncDefinition;
import org.overture.ast.definitions.ABusClassDefinition;
import org.overture.ast.analysis.intf.IAnalysis;
import org.overture.ast.statements.ACasesStm;
import org.overture.ast.node.IToken;
import org.overture.ast.expressions.AMapRangeUnaryExp;
import org.overture.ast.statements.AIdentifierStateDesignator;
import org.overture.ast.intf.lex.ILexToken;
import org.overture.ast.expressions.AFloorUnaryExp;
import org.overture.ast.definitions.AExplicitOperationDefinition;
import org.overture.ast.statements.AMapSeqStateDesignator;
import org.overture.ast.patterns.APatternListTypePair;
import org.overture.ast.patterns.AMapPattern;
import org.overture.ast.expressions.ASubsetBinaryExp;
import org.overture.ast.statements.AReturnStm;
import org.overture.ast.modules.SValueImport;
import org.overture.ast.expressions.AStarStarBinaryExp;
import org.overture.ast.types.PAccessSpecifier;
import org.overture.ast.modules.AFunctionValueImport;
import org.overture.ast.statements.AElseIfStm;
import org.overture.ast.modules.AOperationExport;
import org.overture.ast.types.ANatOneNumericBasicType;
import org.overture.ast.expressions.SBooleanBinaryExp;
import org.overture.ast.intf.lex.ILexStringToken;
import org.overture.ast.expressions.ADistIntersectUnaryExp;
import org.overture.ast.statements.SSimpleBlockStm;
import org.overture.ast.patterns.ARecordPattern;
import org.overture.ast.expressions.APlusNumericBinaryExp;
import org.overture.ast.modules.AValueValueImport;
import org.overture.ast.types.ANamedInvariantType;
import org.overture.ast.expressions.ACaseAlternative;
import org.overture.ast.types.ASeqSeqType;
import org.overture.ast.types.ARecordInvariantType;
import org.overture.ast.patterns.PMaplet;
import org.overture.ast.expressions.ASameClassExp;
import org.overture.ast.expressions.ASetIntersectBinaryExp;
import org.overture.ast.patterns.ABooleanPattern;
import org.overture.ast.expressions.AForAllExp;
import org.overture.ast.definitions.traces.ATraceDefinitionTerm;
import org.overture.ast.expressions.ASelfExp;
import org.overture.ast.statements.AForPatternBindStm;
import org.overture.ast.modules.PImports;
import org.overture.ast.statements.PObjectDesignator;
import org.overture.ast.expressions.ASubseqExp;
import org.overture.ast.types.AMapMapType;
import org.overture.ast.statements.ACallObjectStm;
import org.overture.ast.expressions.SNumericBinaryExp;
import org.overture.ast.definitions.PDefinition;
import org.overture.ast.expressions.ASeqConcatBinaryExp;
import org.overture.ast.statements.AAlwaysStm;
import org.overture.ast.expressions.APostOpExp;
import org.overture.ast.statements.PClause;
import org.overture.ast.types.ASeq1SeqType;
import org.overture.ast.definitions.ANamedTraceDefinition;
import org.overture.ast.expressions.ALessEqualNumericBinaryExp;
import org.overture.ast.statements.AAtomicStm;
import org.overture.ast.expressions.ARangeResToBinaryExp;
import org.overture.ast.expressions.ASetRangeSetExp;
import org.overture.ast.statements.ABlockSimpleBlockStm;
import org.overture.ast.types.ARationalNumericBasicType;
import org.overture.ast.definitions.SClassDefinition;
import org.overture.ast.statements.ATixeStmtAlternative;
import org.overture.ast.expressions.AFuncInstatiationExp;
import org.overture.ast.types.AProductType;
import org.overture.ast.statements.PCase;
import org.overture.ast.typechecker.Pass;
import org.overture.ast.expressions.AGreaterEqualNumericBinaryExp;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import org.overture.ast.statements.AExternalClause;
import java.lang.Boolean;
import org.overture.ast.definitions.AValueDefinition;
import org.overture.ast.definitions.traces.ABracketedExpressionTraceCoreDefinition;
import org.overture.ast.expressions.AExistsExp;
import org.overture.ast.expressions.AThreadIdExp;
import org.overture.ast.expressions.ACompBinaryExp;
import org.overture.ast.expressions.ARealLiteralExp;
import org.overture.ast.statements.ATixeStm;
import org.overture.ast.definitions.traces.PTerm;
import org.overture.ast.intf.lex.ILexQuoteToken;
import org.overture.ast.expressions.ANotEqualBinaryExp;
import org.overture.ast.expressions.AElseIfExp;
import org.overture.ast.expressions.ASameBaseClassExp;
import org.overture.ast.types.PField;
import org.overture.ast.expressions.APowerSetUnaryExp;
import org.overture.ast.types.PType;
import org.overture.ast.patterns.AIgnorePattern;
import org.overture.ast.statements.AWhileStm;
import org.overture.ast.statements.AIfStm;
import org.overture.ast.statements.APeriodicStm;
import org.overture.ast.patterns.AMapUnionPattern;
import org.overture.ast.statements.ALetBeStStm;
import org.overture.ast.modules.AModuleImports;
import org.overture.ast.expressions.AIntLiteralExp;
import org.overture.ast.expressions.ATimesNumericBinaryExp;
import org.overture.ast.expressions.AMapEnumMapExp;
import org.overture.ast.expressions.AIfExp;
import org.overture.ast.patterns.ADefPatternBind;
import org.overture.ast.statements.ANewObjectDesignator;
import org.overture.ast.statements.AStartStm;
import org.overture.ast.statements.ANotYetSpecifiedStm;
import org.overture.ast.statements.AClassInvariantStm;
import org.overture.ast.expressions.AMkBasicExp;
import org.overture.ast.expressions.APreOpExp;
import org.overture.ast.modules.PExport;
import org.overture.ast.modules.ATypeExport;
import org.overture.ast.expressions.ADistMergeUnaryExp;
import org.overture.ast.definitions.AMutexSyncDefinition;
import org.overture.ast.definitions.SFunctionDefinition;
import org.overture.ast.definitions.AInheritedDefinition;
import org.overture.ast.modules.AFunctionExport;
import org.overture.ast.patterns.AConcatenationPattern;
import org.overture.ast.expressions.ALenUnaryExp;
import org.overture.ast.expressions.AApplyExp;
import org.overture.ast.expressions.AFieldNumberExp;
import org.overture.ast.patterns.ASetMultipleBind;
import org.overture.ast.modules.AAllImport;
import org.overture.ast.modules.PExports;
import org.overture.ast.expressions.ANewExp;
import org.overture.ast.definitions.AMultiBindListDefinition;
import org.overture.ast.expressions.ADivideNumericBinaryExp;
import org.overture.ast.expressions.AVariableExp;
import org.overture.ast.expressions.ADomainResToBinaryExp;
import org.overture.ast.statements.ADurationStm;
import org.overture.ast.expressions.ASubclassResponsibilityExp;
import org.overture.ast.definitions.AUntypedDefinition;
import org.overture.ast.expressions.ASetDifferenceBinaryExp;
import org.overture.ast.expressions.AIsOfClassExp;
import org.overture.ast.expressions.ADivNumericBinaryExp;
import org.overture.ast.definitions.AImplicitOperationDefinition;
import org.overture.ast.patterns.AExpressionPattern;
import org.overture.ast.intf.lex.ILexIntegerToken;
import org.overture.ast.types.AFieldField;
import org.overture.ast.types.ATokenBasicType;
import org.overture.ast.expressions.AModNumericBinaryExp;
import java.lang.String;
import org.overture.ast.expressions.ANilExp;
import org.overture.ast.definitions.AClassClassDefinition;
import org.overture.ast.node.tokens.TAsync;
import org.overture.ast.expressions.ARangeResByBinaryExp;
import org.overture.ast.types.ABracketType;
import org.overture.ast.statements.AStopStm;
import org.overture.ast.expressions.ASeqCompSeqExp;
import org.overture.ast.expressions.AOrBooleanBinaryExp;
import org.overture.ast.definitions.AClassInvariantDefinition;
import org.overture.ast.expressions.AMkTypeExp;
import org.overture.ast.statements.AIdentifierObjectDesignator;
import org.overture.ast.expressions.AMapletExp;
import org.overture.ast.expressions.APreExp;
import org.overture.ast.expressions.AMapDomainUnaryExp;
import org.overture.ast.types.AInMapMapType;
import org.overture.ast.expressions.ASeqEnumSeqExp;
import org.overture.ast.definitions.ASystemClassDefinition;
import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.expressions.AAndBooleanBinaryExp;
import org.overture.ast.types.AQuoteType;
import org.overture.ast.expressions.AQuoteLiteralExp;
import org.overture.ast.statements.AErrorStm;
import org.overture.ast.expressions.SSetExp;
import org.overture.ast.types.AOperationType;
import org.overture.ast.patterns.PBind;
import org.overture.ast.util.ClonableString;
import org.overture.ast.util.ClonableFile;
import org.overture.ast.expressions.ADistConcatUnaryExp;
import org.overture.ast.expressions.ANotInSetBinaryExp;
import org.overture.ast.types.SInvariantType;
import org.overture.ast.expressions.APlusPlusBinaryExp;
import org.overture.ast.expressions.AEquivalentBooleanBinaryExp;
import org.overture.ast.definitions.ALocalDefinition;
import org.overture.ast.modules.AAllExport;
import org.overture.ast.expressions.AIndicesUnaryExp;
import org.overture.ast.types.AIntNumericBasicType;
import org.overture.ast.definitions.AThreadDefinition;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.statements.ALetStm;
import org.overture.ast.types.AParameterType;
import org.overture.ast.node.INode;
import org.overture.ast.patterns.PPair;
import org.overture.ast.statements.ASporadicStm;
import org.overture.ast.statements.ATrapStm;
import org.overture.ast.intf.lex.ILexRealToken;
import org.overture.ast.definitions.ACpuClassDefinition;
import org.overture.ast.statements.AForIndexStm;
import org.overture.ast.patterns.ASeqPattern;
import org.overture.ast.modules.ATypeImport;
import org.overture.ast.types.SMapType;
import org.overture.ast.patterns.ATypeMultipleBind;
import org.overture.ast.definitions.AAssignmentDefinition;
import org.overture.ast.definitions.AImportedDefinition;
import org.overture.ast.intf.lex.ILexBooleanToken;
import org.overture.ast.expressions.ACharLiteralExp;
import org.overture.ast.expressions.ANarrowExp;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.expressions.ANotUnaryExp;
import org.overture.ast.definitions.AProtectedAccess;
import org.overture.ast.definitions.SOperationDefinition;
import org.overture.ast.typechecker.NameScope;
import org.overture.ast.definitions.AExternalDefinition;
import org.overture.ast.expressions.AMuExp;
import org.overture.ast.expressions.SUnaryExp;
import org.overture.ast.expressions.AUnaryMinusUnaryExp;
import org.overture.ast.types.AClassType;
import org.overture.ast.statements.AExitStm;
import org.overture.ast.expressions.AReverseUnaryExp;
import org.overture.ast.statements.PStm;
import org.overture.ast.expressions.ASetUnionBinaryExp;
import org.overture.ast.expressions.ALambdaExp;
import org.overture.ast.modules.PImport;
import org.overture.ast.types.ANatNumericBasicType;
import org.overture.ast.definitions.traces.ARepeatTraceDefinition;
import org.overture.ast.expressions.ARemNumericBinaryExp;
import org.overture.ast.patterns.AIdentifierPattern;
import org.overture.ast.expressions.AHistoryExp;
import org.overture.ast.expressions.ALessNumericBinaryExp;
import org.overture.ast.patterns.ACharacterPattern;
import org.overture.ast.expressions.AStringLiteralExp;
import org.overture.ast.expressions.AEqualsBinaryExp;
import org.overture.ast.expressions.AMapCompMapExp;
import org.overture.ast.intf.lex.ILexCharacterToken;
import org.overture.ast.expressions.ATailUnaryExp;
import org.overture.ast.statements.ASkipStm;
import org.overture.ast.patterns.AQuotePattern;
import org.overture.ast.statements.ASpecificationStm;
import org.overture.ast.statements.PStateDesignator;
import org.overture.ast.expressions.ANotYetSpecifiedExp;
import org.overture.ast.definitions.traces.PTraceDefinition;
import org.overture.ast.modules.AModuleModules;
import org.overture.ast.types.SNumericBasicType;
import org.overture.ast.patterns.ASetPattern;
import org.overture.ast.definitions.AEqualsDefinition;
import org.overture.ast.types.ACharBasicType;
import org.overture.ast.modules.AFromModuleImports;
import org.overture.ast.statements.PAlternativeStm;
import org.overture.ast.definitions.traces.ALetDefBindingTraceDefinition;
import org.overture.ast.expressions.ADistUnionUnaryExp;
import org.overture.ast.expressions.AStateInitExp;
import org.overture.ast.patterns.ANilPattern;
import org.overture.ast.modules.AValueExport;
import org.overture.ast.expressions.AInSetBinaryExp;
import org.overture.ast.expressions.ARecordModifier;
import org.overture.ast.patterns.PPatternBind;
import org.overture.ast.statements.AErrorCase;
import org.overture.ast.patterns.APatternTypePair;
import org.overture.ast.definitions.AExplicitFunctionDefinition;
import org.overture.ast.expressions.PAlternative;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public interface IAnalysis
{	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexToken(ILexToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexNameToken(ILexNameToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexIdentifierToken(ILexIdentifierToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexBooleanToken(ILexBooleanToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexCharacterToken(ILexCharacterToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexIntegerToken(ILexIntegerToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexQuoteToken(ILexQuoteToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexRealToken(ILexRealToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexStringToken(ILexStringToken node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseILexLocation(ILexLocation node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseClonableFile(ClonableFile node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseClonableString(ClonableString node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseClassDefinitionSettings(ClassDefinitionSettings node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseNameScope(NameScope node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void casePass(Pass node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseBoolean(Boolean node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseInteger(Integer node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseString(String node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseLong(Long node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseTStatic(TStatic node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseTAsync(TAsync node) throws AnalysisException;
	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public void defaultPExp(PExp node) throws AnalysisException;
	/**
	* Called by the {@link AApplyExp} node from {@link AApplyExp#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExp} node
	*/
	public void caseAApplyExp(AApplyExp node) throws AnalysisException;
	/**
	* Called by the {@link ANarrowExp} node from {@link ANarrowExp#apply(IAnalysis)}.
	* @param node the calling {@link ANarrowExp} node
	*/
	public void caseANarrowExp(ANarrowExp node) throws AnalysisException;
	/**
	* Called by the {@link SUnaryExp} node from {@link SUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExp} node
	*/
	public void defaultSUnaryExp(SUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link SBinaryExp} node from {@link SBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExp} node
	*/
	public void defaultSBinaryExp(SBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ABooleanConstExp} node from {@link ABooleanConstExp#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanConstExp} node
	*/
	public void caseABooleanConstExp(ABooleanConstExp node) throws AnalysisException;
	/**
	* Called by the {@link ACasesExp} node from {@link ACasesExp#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExp} node
	*/
	public void caseACasesExp(ACasesExp node) throws AnalysisException;
	/**
	* Called by the {@link ACharLiteralExp} node from {@link ACharLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExp} node
	*/
	public void caseACharLiteralExp(ACharLiteralExp node) throws AnalysisException;
	/**
	* Called by the {@link AElseIfExp} node from {@link AElseIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfExp} node
	*/
	public void caseAElseIfExp(AElseIfExp node) throws AnalysisException;
	/**
	* Called by the {@link AExists1Exp} node from {@link AExists1Exp#apply(IAnalysis)}.
	* @param node the calling {@link AExists1Exp} node
	*/
	public void caseAExists1Exp(AExists1Exp node) throws AnalysisException;
	/**
	* Called by the {@link AExistsExp} node from {@link AExistsExp#apply(IAnalysis)}.
	* @param node the calling {@link AExistsExp} node
	*/
	public void caseAExistsExp(AExistsExp node) throws AnalysisException;
	/**
	* Called by the {@link AFieldExp} node from {@link AFieldExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExp} node
	*/
	public void caseAFieldExp(AFieldExp node) throws AnalysisException;
	/**
	* Called by the {@link AFieldNumberExp} node from {@link AFieldNumberExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExp} node
	*/
	public void caseAFieldNumberExp(AFieldNumberExp node) throws AnalysisException;
	/**
	* Called by the {@link AForAllExp} node from {@link AForAllExp#apply(IAnalysis)}.
	* @param node the calling {@link AForAllExp} node
	*/
	public void caseAForAllExp(AForAllExp node) throws AnalysisException;
	/**
	* Called by the {@link AFuncInstatiationExp} node from {@link AFuncInstatiationExp#apply(IAnalysis)}.
	* @param node the calling {@link AFuncInstatiationExp} node
	*/
	public void caseAFuncInstatiationExp(AFuncInstatiationExp node) throws AnalysisException;
	/**
	* Called by the {@link AHistoryExp} node from {@link AHistoryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExp} node
	*/
	public void caseAHistoryExp(AHistoryExp node) throws AnalysisException;
	/**
	* Called by the {@link AIfExp} node from {@link AIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AIfExp} node
	*/
	public void caseAIfExp(AIfExp node) throws AnalysisException;
	/**
	* Called by the {@link AIntLiteralExp} node from {@link AIntLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExp} node
	*/
	public void caseAIntLiteralExp(AIntLiteralExp node) throws AnalysisException;
	/**
	* Called by the {@link AIotaExp} node from {@link AIotaExp#apply(IAnalysis)}.
	* @param node the calling {@link AIotaExp} node
	*/
	public void caseAIotaExp(AIotaExp node) throws AnalysisException;
	/**
	* Called by the {@link AIsExp} node from {@link AIsExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsExp} node
	*/
	public void caseAIsExp(AIsExp node) throws AnalysisException;
	/**
	* Called by the {@link AIsOfBaseClassExp} node from {@link AIsOfBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfBaseClassExp} node
	*/
	public void caseAIsOfBaseClassExp(AIsOfBaseClassExp node) throws AnalysisException;
	/**
	* Called by the {@link AIsOfClassExp} node from {@link AIsOfClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfClassExp} node
	*/
	public void caseAIsOfClassExp(AIsOfClassExp node) throws AnalysisException;
	/**
	* Called by the {@link ALambdaExp} node from {@link ALambdaExp#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExp} node
	*/
	public void caseALambdaExp(ALambdaExp node) throws AnalysisException;
	/**
	* Called by the {@link ALetBeStExp} node from {@link ALetBeStExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExp} node
	*/
	public void caseALetBeStExp(ALetBeStExp node) throws AnalysisException;
	/**
	* Called by the {@link ALetDefExp} node from {@link ALetDefExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExp} node
	*/
	public void caseALetDefExp(ALetDefExp node) throws AnalysisException;
	/**
	* Called by the {@link ADefExp} node from {@link ADefExp#apply(IAnalysis)}.
	* @param node the calling {@link ADefExp} node
	*/
	public void caseADefExp(ADefExp node) throws AnalysisException;
	/**
	* Called by the {@link SMapExp} node from {@link SMapExp#apply(IAnalysis)}.
	* @param node the calling {@link SMapExp} node
	*/
	public void defaultSMapExp(SMapExp node) throws AnalysisException;
	/**
	* Called by the {@link AMapletExp} node from {@link AMapletExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExp} node
	*/
	public void caseAMapletExp(AMapletExp node) throws AnalysisException;
	/**
	* Called by the {@link AMkBasicExp} node from {@link AMkBasicExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExp} node
	*/
	public void caseAMkBasicExp(AMkBasicExp node) throws AnalysisException;
	/**
	* Called by the {@link AMkTypeExp} node from {@link AMkTypeExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkTypeExp} node
	*/
	public void caseAMkTypeExp(AMkTypeExp node) throws AnalysisException;
	/**
	* Called by the {@link AMuExp} node from {@link AMuExp#apply(IAnalysis)}.
	* @param node the calling {@link AMuExp} node
	*/
	public void caseAMuExp(AMuExp node) throws AnalysisException;
	/**
	* Called by the {@link ANewExp} node from {@link ANewExp#apply(IAnalysis)}.
	* @param node the calling {@link ANewExp} node
	*/
	public void caseANewExp(ANewExp node) throws AnalysisException;
	/**
	* Called by the {@link ANilExp} node from {@link ANilExp#apply(IAnalysis)}.
	* @param node the calling {@link ANilExp} node
	*/
	public void caseANilExp(ANilExp node) throws AnalysisException;
	/**
	* Called by the {@link ANotYetSpecifiedExp} node from {@link ANotYetSpecifiedExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedExp} node
	*/
	public void caseANotYetSpecifiedExp(ANotYetSpecifiedExp node) throws AnalysisException;
	/**
	* Called by the {@link APostOpExp} node from {@link APostOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APostOpExp} node
	*/
	public void caseAPostOpExp(APostOpExp node) throws AnalysisException;
	/**
	* Called by the {@link APreExp} node from {@link APreExp#apply(IAnalysis)}.
	* @param node the calling {@link APreExp} node
	*/
	public void caseAPreExp(APreExp node) throws AnalysisException;
	/**
	* Called by the {@link APreOpExp} node from {@link APreOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APreOpExp} node
	*/
	public void caseAPreOpExp(APreOpExp node) throws AnalysisException;
	/**
	* Called by the {@link AQuoteLiteralExp} node from {@link AQuoteLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExp} node
	*/
	public void caseAQuoteLiteralExp(AQuoteLiteralExp node) throws AnalysisException;
	/**
	* Called by the {@link ARealLiteralExp} node from {@link ARealLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExp} node
	*/
	public void caseARealLiteralExp(ARealLiteralExp node) throws AnalysisException;
	/**
	* Called by the {@link ASameBaseClassExp} node from {@link ASameBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameBaseClassExp} node
	*/
	public void caseASameBaseClassExp(ASameBaseClassExp node) throws AnalysisException;
	/**
	* Called by the {@link ASameClassExp} node from {@link ASameClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameClassExp} node
	*/
	public void caseASameClassExp(ASameClassExp node) throws AnalysisException;
	/**
	* Called by the {@link ASelfExp} node from {@link ASelfExp#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExp} node
	*/
	public void caseASelfExp(ASelfExp node) throws AnalysisException;
	/**
	* Called by the {@link SSeqExp} node from {@link SSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExp} node
	*/
	public void defaultSSeqExp(SSeqExp node) throws AnalysisException;
	/**
	* Called by the {@link SSetExp} node from {@link SSetExp#apply(IAnalysis)}.
	* @param node the calling {@link SSetExp} node
	*/
	public void defaultSSetExp(SSetExp node) throws AnalysisException;
	/**
	* Called by the {@link AStateInitExp} node from {@link AStateInitExp#apply(IAnalysis)}.
	* @param node the calling {@link AStateInitExp} node
	*/
	public void caseAStateInitExp(AStateInitExp node) throws AnalysisException;
	/**
	* Called by the {@link AStringLiteralExp} node from {@link AStringLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExp} node
	*/
	public void caseAStringLiteralExp(AStringLiteralExp node) throws AnalysisException;
	/**
	* Called by the {@link ASubclassResponsibilityExp} node from {@link ASubclassResponsibilityExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityExp} node
	*/
	public void caseASubclassResponsibilityExp(ASubclassResponsibilityExp node) throws AnalysisException;
	/**
	* Called by the {@link ASubseqExp} node from {@link ASubseqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubseqExp} node
	*/
	public void caseASubseqExp(ASubseqExp node) throws AnalysisException;
	/**
	* Called by the {@link AThreadIdExp} node from {@link AThreadIdExp#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExp} node
	*/
	public void caseAThreadIdExp(AThreadIdExp node) throws AnalysisException;
	/**
	* Called by the {@link ATimeExp} node from {@link ATimeExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExp} node
	*/
	public void caseATimeExp(ATimeExp node) throws AnalysisException;
	/**
	* Called by the {@link ATupleExp} node from {@link ATupleExp#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExp} node
	*/
	public void caseATupleExp(ATupleExp node) throws AnalysisException;
	/**
	* Called by the {@link AUndefinedExp} node from {@link AUndefinedExp#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExp} node
	*/
	public void caseAUndefinedExp(AUndefinedExp node) throws AnalysisException;
	/**
	* Called by the {@link AVariableExp} node from {@link AVariableExp#apply(IAnalysis)}.
	* @param node the calling {@link AVariableExp} node
	*/
	public void caseAVariableExp(AVariableExp node) throws AnalysisException;
	/**
	* Called by the {@link AAbsoluteUnaryExp} node from {@link AAbsoluteUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAbsoluteUnaryExp} node
	*/
	public void caseAAbsoluteUnaryExp(AAbsoluteUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ACardinalityUnaryExp} node from {@link ACardinalityUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACardinalityUnaryExp} node
	*/
	public void caseACardinalityUnaryExp(ACardinalityUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADistConcatUnaryExp} node from {@link ADistConcatUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExp} node
	*/
	public void caseADistConcatUnaryExp(ADistConcatUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADistIntersectUnaryExp} node from {@link ADistIntersectUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExp} node
	*/
	public void caseADistIntersectUnaryExp(ADistIntersectUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADistMergeUnaryExp} node from {@link ADistMergeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExp} node
	*/
	public void caseADistMergeUnaryExp(ADistMergeUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADistUnionUnaryExp} node from {@link ADistUnionUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExp} node
	*/
	public void caseADistUnionUnaryExp(ADistUnionUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AElementsUnaryExp} node from {@link AElementsUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AElementsUnaryExp} node
	*/
	public void caseAElementsUnaryExp(AElementsUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AFloorUnaryExp} node from {@link AFloorUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExp} node
	*/
	public void caseAFloorUnaryExp(AFloorUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AHeadUnaryExp} node from {@link AHeadUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExp} node
	*/
	public void caseAHeadUnaryExp(AHeadUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AIndicesUnaryExp} node from {@link AIndicesUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExp} node
	*/
	public void caseAIndicesUnaryExp(AIndicesUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ALenUnaryExp} node from {@link ALenUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExp} node
	*/
	public void caseALenUnaryExp(ALenUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AMapDomainUnaryExp} node from {@link AMapDomainUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExp} node
	*/
	public void caseAMapDomainUnaryExp(AMapDomainUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AMapInverseUnaryExp} node from {@link AMapInverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExp} node
	*/
	public void caseAMapInverseUnaryExp(AMapInverseUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AMapRangeUnaryExp} node from {@link AMapRangeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExp} node
	*/
	public void caseAMapRangeUnaryExp(AMapRangeUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ANotUnaryExp} node from {@link ANotUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExp} node
	*/
	public void caseANotUnaryExp(ANotUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link APowerSetUnaryExp} node from {@link APowerSetUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExp} node
	*/
	public void caseAPowerSetUnaryExp(APowerSetUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AReverseUnaryExp} node from {@link AReverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExp} node
	*/
	public void caseAReverseUnaryExp(AReverseUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ATailUnaryExp} node from {@link ATailUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExp} node
	*/
	public void caseATailUnaryExp(ATailUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AUnaryMinusUnaryExp} node from {@link AUnaryMinusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryMinusUnaryExp} node
	*/
	public void caseAUnaryMinusUnaryExp(AUnaryMinusUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AUnaryPlusUnaryExp} node from {@link AUnaryPlusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryPlusUnaryExp} node
	*/
	public void caseAUnaryPlusUnaryExp(AUnaryPlusUnaryExp node) throws AnalysisException;
	/**
	* Called by the {@link SBooleanBinaryExp} node from {@link SBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBooleanBinaryExp} node
	*/
	public void defaultSBooleanBinaryExp(SBooleanBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ACompBinaryExp} node from {@link ACompBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACompBinaryExp} node
	*/
	public void caseACompBinaryExp(ACompBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADomainResByBinaryExp} node from {@link ADomainResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExp} node
	*/
	public void caseADomainResByBinaryExp(ADomainResByBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADomainResToBinaryExp} node from {@link ADomainResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExp} node
	*/
	public void caseADomainResToBinaryExp(ADomainResToBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AEqualsBinaryExp} node from {@link AEqualsBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExp} node
	*/
	public void caseAEqualsBinaryExp(AEqualsBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AInSetBinaryExp} node from {@link AInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExp} node
	*/
	public void caseAInSetBinaryExp(AInSetBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AMapUnionBinaryExp} node from {@link AMapUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExp} node
	*/
	public void caseAMapUnionBinaryExp(AMapUnionBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ANotEqualBinaryExp} node from {@link ANotEqualBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualBinaryExp} node
	*/
	public void caseANotEqualBinaryExp(ANotEqualBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ANotInSetBinaryExp} node from {@link ANotInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotInSetBinaryExp} node
	*/
	public void caseANotInSetBinaryExp(ANotInSetBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link SNumericBinaryExp} node from {@link SNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExp} node
	*/
	public void defaultSNumericBinaryExp(SNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link APlusPlusBinaryExp} node from {@link APlusPlusBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusPlusBinaryExp} node
	*/
	public void caseAPlusPlusBinaryExp(APlusPlusBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AProperSubsetBinaryExp} node from {@link AProperSubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AProperSubsetBinaryExp} node
	*/
	public void caseAProperSubsetBinaryExp(AProperSubsetBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ARangeResByBinaryExp} node from {@link ARangeResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExp} node
	*/
	public void caseARangeResByBinaryExp(ARangeResByBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ARangeResToBinaryExp} node from {@link ARangeResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExp} node
	*/
	public void caseARangeResToBinaryExp(ARangeResToBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ASeqConcatBinaryExp} node from {@link ASeqConcatBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExp} node
	*/
	public void caseASeqConcatBinaryExp(ASeqConcatBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ASetDifferenceBinaryExp} node from {@link ASetDifferenceBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExp} node
	*/
	public void caseASetDifferenceBinaryExp(ASetDifferenceBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ASetIntersectBinaryExp} node from {@link ASetIntersectBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExp} node
	*/
	public void caseASetIntersectBinaryExp(ASetIntersectBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ASetUnionBinaryExp} node from {@link ASetUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExp} node
	*/
	public void caseASetUnionBinaryExp(ASetUnionBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AStarStarBinaryExp} node from {@link AStarStarBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AStarStarBinaryExp} node
	*/
	public void caseAStarStarBinaryExp(AStarStarBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ASubsetBinaryExp} node from {@link ASubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubsetBinaryExp} node
	*/
	public void caseASubsetBinaryExp(ASubsetBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AAndBooleanBinaryExp} node from {@link AAndBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAndBooleanBinaryExp} node
	*/
	public void caseAAndBooleanBinaryExp(AAndBooleanBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AEquivalentBooleanBinaryExp} node from {@link AEquivalentBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEquivalentBooleanBinaryExp} node
	*/
	public void caseAEquivalentBooleanBinaryExp(AEquivalentBooleanBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AImpliesBooleanBinaryExp} node from {@link AImpliesBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AImpliesBooleanBinaryExp} node
	*/
	public void caseAImpliesBooleanBinaryExp(AImpliesBooleanBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AOrBooleanBinaryExp} node from {@link AOrBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AOrBooleanBinaryExp} node
	*/
	public void caseAOrBooleanBinaryExp(AOrBooleanBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADivNumericBinaryExp} node from {@link ADivNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivNumericBinaryExp} node
	*/
	public void caseADivNumericBinaryExp(ADivNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ADivideNumericBinaryExp} node from {@link ADivideNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExp} node
	*/
	public void caseADivideNumericBinaryExp(ADivideNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AGreaterEqualNumericBinaryExp} node from {@link AGreaterEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExp} node
	*/
	public void caseAGreaterEqualNumericBinaryExp(AGreaterEqualNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AGreaterNumericBinaryExp} node from {@link AGreaterNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExp} node
	*/
	public void caseAGreaterNumericBinaryExp(AGreaterNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ALessEqualNumericBinaryExp} node from {@link ALessEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExp} node
	*/
	public void caseALessEqualNumericBinaryExp(ALessEqualNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ALessNumericBinaryExp} node from {@link ALessNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExp} node
	*/
	public void caseALessNumericBinaryExp(ALessNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AModNumericBinaryExp} node from {@link AModNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExp} node
	*/
	public void caseAModNumericBinaryExp(AModNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link APlusNumericBinaryExp} node from {@link APlusNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExp} node
	*/
	public void caseAPlusNumericBinaryExp(APlusNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ARemNumericBinaryExp} node from {@link ARemNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExp} node
	*/
	public void caseARemNumericBinaryExp(ARemNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ASubtractNumericBinaryExp} node from {@link ASubtractNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExp} node
	*/
	public void caseASubtractNumericBinaryExp(ASubtractNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link ATimesNumericBinaryExp} node from {@link ATimesNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExp} node
	*/
	public void caseATimesNumericBinaryExp(ATimesNumericBinaryExp node) throws AnalysisException;
	/**
	* Called by the {@link AMapCompMapExp} node from {@link AMapCompMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapCompMapExp} node
	*/
	public void caseAMapCompMapExp(AMapCompMapExp node) throws AnalysisException;
	/**
	* Called by the {@link AMapEnumMapExp} node from {@link AMapEnumMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapEnumMapExp} node
	*/
	public void caseAMapEnumMapExp(AMapEnumMapExp node) throws AnalysisException;
	/**
	* Called by the {@link ASeqCompSeqExp} node from {@link ASeqCompSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqCompSeqExp} node
	*/
	public void caseASeqCompSeqExp(ASeqCompSeqExp node) throws AnalysisException;
	/**
	* Called by the {@link ASeqEnumSeqExp} node from {@link ASeqEnumSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqEnumSeqExp} node
	*/
	public void caseASeqEnumSeqExp(ASeqEnumSeqExp node) throws AnalysisException;
	/**
	* Called by the {@link ASetCompSetExp} node from {@link ASetCompSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetCompSetExp} node
	*/
	public void caseASetCompSetExp(ASetCompSetExp node) throws AnalysisException;
	/**
	* Called by the {@link ASetEnumSetExp} node from {@link ASetEnumSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetEnumSetExp} node
	*/
	public void caseASetEnumSetExp(ASetEnumSetExp node) throws AnalysisException;
	/**
	* Called by the {@link ASetRangeSetExp} node from {@link ASetRangeSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetRangeSetExp} node
	*/
	public void caseASetRangeSetExp(ASetRangeSetExp node) throws AnalysisException;
	/**
	* Called by the {@link PModifier} node from {@link PModifier#apply(IAnalysis)}.
	* @param node the calling {@link PModifier} node
	*/
	public void defaultPModifier(PModifier node) throws AnalysisException;
	/**
	* Called by the {@link ARecordModifier} node from {@link ARecordModifier#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifier} node
	*/
	public void caseARecordModifier(ARecordModifier node) throws AnalysisException;
	/**
	* Called by the {@link PAlternative} node from {@link PAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PAlternative} node
	*/
	public void defaultPAlternative(PAlternative node) throws AnalysisException;
	/**
	* Called by the {@link ACaseAlternative} node from {@link ACaseAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternative} node
	*/
	public void caseACaseAlternative(ACaseAlternative node) throws AnalysisException;
	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public void defaultPType(PType node) throws AnalysisException;
	/**
	* Called by the {@link SBasicType} node from {@link SBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SBasicType} node
	*/
	public void defaultSBasicType(SBasicType node) throws AnalysisException;
	/**
	* Called by the {@link ABracketType} node from {@link ABracketType#apply(IAnalysis)}.
	* @param node the calling {@link ABracketType} node
	*/
	public void caseABracketType(ABracketType node) throws AnalysisException;
	/**
	* Called by the {@link AClassType} node from {@link AClassType#apply(IAnalysis)}.
	* @param node the calling {@link AClassType} node
	*/
	public void caseAClassType(AClassType node) throws AnalysisException;
	/**
	* Called by the {@link AFunctionType} node from {@link AFunctionType#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionType} node
	*/
	public void caseAFunctionType(AFunctionType node) throws AnalysisException;
	/**
	* Called by the {@link SInvariantType} node from {@link SInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link SInvariantType} node
	*/
	public void defaultSInvariantType(SInvariantType node) throws AnalysisException;
	/**
	* Called by the {@link SMapType} node from {@link SMapType#apply(IAnalysis)}.
	* @param node the calling {@link SMapType} node
	*/
	public void defaultSMapType(SMapType node) throws AnalysisException;
	/**
	* Called by the {@link AOperationType} node from {@link AOperationType#apply(IAnalysis)}.
	* @param node the calling {@link AOperationType} node
	*/
	public void caseAOperationType(AOperationType node) throws AnalysisException;
	/**
	* Called by the {@link AOptionalType} node from {@link AOptionalType#apply(IAnalysis)}.
	* @param node the calling {@link AOptionalType} node
	*/
	public void caseAOptionalType(AOptionalType node) throws AnalysisException;
	/**
	* Called by the {@link AParameterType} node from {@link AParameterType#apply(IAnalysis)}.
	* @param node the calling {@link AParameterType} node
	*/
	public void caseAParameterType(AParameterType node) throws AnalysisException;
	/**
	* Called by the {@link AProductType} node from {@link AProductType#apply(IAnalysis)}.
	* @param node the calling {@link AProductType} node
	*/
	public void caseAProductType(AProductType node) throws AnalysisException;
	/**
	* Called by the {@link AQuoteType} node from {@link AQuoteType#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteType} node
	*/
	public void caseAQuoteType(AQuoteType node) throws AnalysisException;
	/**
	* Called by the {@link SSeqType} node from {@link SSeqType#apply(IAnalysis)}.
	* @param node the calling {@link SSeqType} node
	*/
	public void defaultSSeqType(SSeqType node) throws AnalysisException;
	/**
	* Called by the {@link ASetType} node from {@link ASetType#apply(IAnalysis)}.
	* @param node the calling {@link ASetType} node
	*/
	public void caseASetType(ASetType node) throws AnalysisException;
	/**
	* Called by the {@link AUndefinedType} node from {@link AUndefinedType#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedType} node
	*/
	public void caseAUndefinedType(AUndefinedType node) throws AnalysisException;
	/**
	* Called by the {@link AUnionType} node from {@link AUnionType#apply(IAnalysis)}.
	* @param node the calling {@link AUnionType} node
	*/
	public void caseAUnionType(AUnionType node) throws AnalysisException;
	/**
	* Called by the {@link AUnknownType} node from {@link AUnknownType#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownType} node
	*/
	public void caseAUnknownType(AUnknownType node) throws AnalysisException;
	/**
	* Called by the {@link AUnresolvedType} node from {@link AUnresolvedType#apply(IAnalysis)}.
	* @param node the calling {@link AUnresolvedType} node
	*/
	public void caseAUnresolvedType(AUnresolvedType node) throws AnalysisException;
	/**
	* Called by the {@link AVoidReturnType} node from {@link AVoidReturnType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidReturnType} node
	*/
	public void caseAVoidReturnType(AVoidReturnType node) throws AnalysisException;
	/**
	* Called by the {@link AVoidType} node from {@link AVoidType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidType} node
	*/
	public void caseAVoidType(AVoidType node) throws AnalysisException;
	/**
	* Called by the {@link ASeqSeqType} node from {@link ASeqSeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqType} node
	*/
	public void caseASeqSeqType(ASeqSeqType node) throws AnalysisException;
	/**
	* Called by the {@link ASeq1SeqType} node from {@link ASeq1SeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeq1SeqType} node
	*/
	public void caseASeq1SeqType(ASeq1SeqType node) throws AnalysisException;
	/**
	* Called by the {@link AInMapMapType} node from {@link AInMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AInMapMapType} node
	*/
	public void caseAInMapMapType(AInMapMapType node) throws AnalysisException;
	/**
	* Called by the {@link AMapMapType} node from {@link AMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapType} node
	*/
	public void caseAMapMapType(AMapMapType node) throws AnalysisException;
	/**
	* Called by the {@link ANamedInvariantType} node from {@link ANamedInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ANamedInvariantType} node
	*/
	public void caseANamedInvariantType(ANamedInvariantType node) throws AnalysisException;
	/**
	* Called by the {@link ARecordInvariantType} node from {@link ARecordInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ARecordInvariantType} node
	*/
	public void caseARecordInvariantType(ARecordInvariantType node) throws AnalysisException;
	/**
	* Called by the {@link ABooleanBasicType} node from {@link ABooleanBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanBasicType} node
	*/
	public void caseABooleanBasicType(ABooleanBasicType node) throws AnalysisException;
	/**
	* Called by the {@link ACharBasicType} node from {@link ACharBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicType} node
	*/
	public void caseACharBasicType(ACharBasicType node) throws AnalysisException;
	/**
	* Called by the {@link SNumericBasicType} node from {@link SNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicType} node
	*/
	public void defaultSNumericBasicType(SNumericBasicType node) throws AnalysisException;
	/**
	* Called by the {@link ATokenBasicType} node from {@link ATokenBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicType} node
	*/
	public void caseATokenBasicType(ATokenBasicType node) throws AnalysisException;
	/**
	* Called by the {@link AIntNumericBasicType} node from {@link AIntNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicType} node
	*/
	public void caseAIntNumericBasicType(AIntNumericBasicType node) throws AnalysisException;
	/**
	* Called by the {@link ANatOneNumericBasicType} node from {@link ANatOneNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatOneNumericBasicType} node
	*/
	public void caseANatOneNumericBasicType(ANatOneNumericBasicType node) throws AnalysisException;
	/**
	* Called by the {@link ANatNumericBasicType} node from {@link ANatNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicType} node
	*/
	public void caseANatNumericBasicType(ANatNumericBasicType node) throws AnalysisException;
	/**
	* Called by the {@link ARationalNumericBasicType} node from {@link ARationalNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARationalNumericBasicType} node
	*/
	public void caseARationalNumericBasicType(ARationalNumericBasicType node) throws AnalysisException;
	/**
	* Called by the {@link ARealNumericBasicType} node from {@link ARealNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicType} node
	*/
	public void caseARealNumericBasicType(ARealNumericBasicType node) throws AnalysisException;
	/**
	* Called by the {@link PField} node from {@link PField#apply(IAnalysis)}.
	* @param node the calling {@link PField} node
	*/
	public void defaultPField(PField node) throws AnalysisException;
	/**
	* Called by the {@link AFieldField} node from {@link AFieldField#apply(IAnalysis)}.
	* @param node the calling {@link AFieldField} node
	*/
	public void caseAFieldField(AFieldField node) throws AnalysisException;
	/**
	* Called by the {@link PAccessSpecifier} node from {@link PAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link PAccessSpecifier} node
	*/
	public void defaultPAccessSpecifier(PAccessSpecifier node) throws AnalysisException;
	/**
	* Called by the {@link AAccessSpecifierAccessSpecifier} node from {@link AAccessSpecifierAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link AAccessSpecifierAccessSpecifier} node
	*/
	public void caseAAccessSpecifierAccessSpecifier(AAccessSpecifierAccessSpecifier node) throws AnalysisException;
	/**
	* Called by the {@link PAccess} node from {@link PAccess#apply(IAnalysis)}.
	* @param node the calling {@link PAccess} node
	*/
	public void defaultPAccess(PAccess node) throws AnalysisException;
	/**
	* Called by the {@link APublicAccess} node from {@link APublicAccess#apply(IAnalysis)}.
	* @param node the calling {@link APublicAccess} node
	*/
	public void caseAPublicAccess(APublicAccess node) throws AnalysisException;
	/**
	* Called by the {@link AProtectedAccess} node from {@link AProtectedAccess#apply(IAnalysis)}.
	* @param node the calling {@link AProtectedAccess} node
	*/
	public void caseAProtectedAccess(AProtectedAccess node) throws AnalysisException;
	/**
	* Called by the {@link APrivateAccess} node from {@link APrivateAccess#apply(IAnalysis)}.
	* @param node the calling {@link APrivateAccess} node
	*/
	public void caseAPrivateAccess(APrivateAccess node) throws AnalysisException;
	/**
	* Called by the {@link PPattern} node from {@link PPattern#apply(IAnalysis)}.
	* @param node the calling {@link PPattern} node
	*/
	public void defaultPPattern(PPattern node) throws AnalysisException;
	/**
	* Called by the {@link ABooleanPattern} node from {@link ABooleanPattern#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanPattern} node
	*/
	public void caseABooleanPattern(ABooleanPattern node) throws AnalysisException;
	/**
	* Called by the {@link ACharacterPattern} node from {@link ACharacterPattern#apply(IAnalysis)}.
	* @param node the calling {@link ACharacterPattern} node
	*/
	public void caseACharacterPattern(ACharacterPattern node) throws AnalysisException;
	/**
	* Called by the {@link AConcatenationPattern} node from {@link AConcatenationPattern#apply(IAnalysis)}.
	* @param node the calling {@link AConcatenationPattern} node
	*/
	public void caseAConcatenationPattern(AConcatenationPattern node) throws AnalysisException;
	/**
	* Called by the {@link AExpressionPattern} node from {@link AExpressionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AExpressionPattern} node
	*/
	public void caseAExpressionPattern(AExpressionPattern node) throws AnalysisException;
	/**
	* Called by the {@link AIdentifierPattern} node from {@link AIdentifierPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPattern} node
	*/
	public void caseAIdentifierPattern(AIdentifierPattern node) throws AnalysisException;
	/**
	* Called by the {@link AIgnorePattern} node from {@link AIgnorePattern#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePattern} node
	*/
	public void caseAIgnorePattern(AIgnorePattern node) throws AnalysisException;
	/**
	* Called by the {@link AIntegerPattern} node from {@link AIntegerPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIntegerPattern} node
	*/
	public void caseAIntegerPattern(AIntegerPattern node) throws AnalysisException;
	/**
	* Called by the {@link ANilPattern} node from {@link ANilPattern#apply(IAnalysis)}.
	* @param node the calling {@link ANilPattern} node
	*/
	public void caseANilPattern(ANilPattern node) throws AnalysisException;
	/**
	* Called by the {@link AQuotePattern} node from {@link AQuotePattern#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePattern} node
	*/
	public void caseAQuotePattern(AQuotePattern node) throws AnalysisException;
	/**
	* Called by the {@link ARealPattern} node from {@link ARealPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARealPattern} node
	*/
	public void caseARealPattern(ARealPattern node) throws AnalysisException;
	/**
	* Called by the {@link ARecordPattern} node from {@link ARecordPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPattern} node
	*/
	public void caseARecordPattern(ARecordPattern node) throws AnalysisException;
	/**
	* Called by the {@link ASeqPattern} node from {@link ASeqPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASeqPattern} node
	*/
	public void caseASeqPattern(ASeqPattern node) throws AnalysisException;
	/**
	* Called by the {@link ASetPattern} node from {@link ASetPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASetPattern} node
	*/
	public void caseASetPattern(ASetPattern node) throws AnalysisException;
	/**
	* Called by the {@link AStringPattern} node from {@link AStringPattern#apply(IAnalysis)}.
	* @param node the calling {@link AStringPattern} node
	*/
	public void caseAStringPattern(AStringPattern node) throws AnalysisException;
	/**
	* Called by the {@link ATuplePattern} node from {@link ATuplePattern#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePattern} node
	*/
	public void caseATuplePattern(ATuplePattern node) throws AnalysisException;
	/**
	* Called by the {@link AUnionPattern} node from {@link AUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AUnionPattern} node
	*/
	public void caseAUnionPattern(AUnionPattern node) throws AnalysisException;
	/**
	* Called by the {@link AMapPattern} node from {@link AMapPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapPattern} node
	*/
	public void caseAMapPattern(AMapPattern node) throws AnalysisException;
	/**
	* Called by the {@link AMapUnionPattern} node from {@link AMapUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionPattern} node
	*/
	public void caseAMapUnionPattern(AMapUnionPattern node) throws AnalysisException;
	/**
	* Called by the {@link AObjectPattern} node from {@link AObjectPattern#apply(IAnalysis)}.
	* @param node the calling {@link AObjectPattern} node
	*/
	public void caseAObjectPattern(AObjectPattern node) throws AnalysisException;
	/**
	* Called by the {@link PMaplet} node from {@link PMaplet#apply(IAnalysis)}.
	* @param node the calling {@link PMaplet} node
	*/
	public void defaultPMaplet(PMaplet node) throws AnalysisException;
	/**
	* Called by the {@link AMapletPatternMaplet} node from {@link AMapletPatternMaplet#apply(IAnalysis)}.
	* @param node the calling {@link AMapletPatternMaplet} node
	*/
	public void caseAMapletPatternMaplet(AMapletPatternMaplet node) throws AnalysisException;
	/**
	* Called by the {@link PPair} node from {@link PPair#apply(IAnalysis)}.
	* @param node the calling {@link PPair} node
	*/
	public void defaultPPair(PPair node) throws AnalysisException;
	/**
	* Called by the {@link APatternTypePair} node from {@link APatternTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternTypePair} node
	*/
	public void caseAPatternTypePair(APatternTypePair node) throws AnalysisException;
	/**
	* Called by the {@link APatternListTypePair} node from {@link APatternListTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternListTypePair} node
	*/
	public void caseAPatternListTypePair(APatternListTypePair node) throws AnalysisException;
	/**
	* Called by the {@link ANamePatternPair} node from {@link ANamePatternPair#apply(IAnalysis)}.
	* @param node the calling {@link ANamePatternPair} node
	*/
	public void caseANamePatternPair(ANamePatternPair node) throws AnalysisException;
	/**
	* Called by the {@link PBind} node from {@link PBind#apply(IAnalysis)}.
	* @param node the calling {@link PBind} node
	*/
	public void defaultPBind(PBind node) throws AnalysisException;
	/**
	* Called by the {@link ASetBind} node from {@link ASetBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetBind} node
	*/
	public void caseASetBind(ASetBind node) throws AnalysisException;
	/**
	* Called by the {@link ATypeBind} node from {@link ATypeBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeBind} node
	*/
	public void caseATypeBind(ATypeBind node) throws AnalysisException;
	/**
	* Called by the {@link PMultipleBind} node from {@link PMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link PMultipleBind} node
	*/
	public void defaultPMultipleBind(PMultipleBind node) throws AnalysisException;
	/**
	* Called by the {@link ASetMultipleBind} node from {@link ASetMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBind} node
	*/
	public void caseASetMultipleBind(ASetMultipleBind node) throws AnalysisException;
	/**
	* Called by the {@link ATypeMultipleBind} node from {@link ATypeMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeMultipleBind} node
	*/
	public void caseATypeMultipleBind(ATypeMultipleBind node) throws AnalysisException;
	/**
	* Called by the {@link PPatternBind} node from {@link PPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link PPatternBind} node
	*/
	public void defaultPPatternBind(PPatternBind node) throws AnalysisException;
	/**
	* Called by the {@link ADefPatternBind} node from {@link ADefPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link ADefPatternBind} node
	*/
	public void caseADefPatternBind(ADefPatternBind node) throws AnalysisException;
	/**
	* Called by the {@link PDefinition} node from {@link PDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PDefinition} node
	*/
	public void defaultPDefinition(PDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AAssignmentDefinition} node from {@link AAssignmentDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentDefinition} node
	*/
	public void caseAAssignmentDefinition(AAssignmentDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AInstanceVariableDefinition} node from {@link AInstanceVariableDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceVariableDefinition} node
	*/
	public void caseAInstanceVariableDefinition(AInstanceVariableDefinition node) throws AnalysisException;
	/**
	* Called by the {@link SClassDefinition} node from {@link SClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SClassDefinition} node
	*/
	public void defaultSClassDefinition(SClassDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AClassInvariantDefinition} node from {@link AClassInvariantDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantDefinition} node
	*/
	public void caseAClassInvariantDefinition(AClassInvariantDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AEqualsDefinition} node from {@link AEqualsDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsDefinition} node
	*/
	public void caseAEqualsDefinition(AEqualsDefinition node) throws AnalysisException;
	/**
	* Called by the {@link SFunctionDefinition} node from {@link SFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SFunctionDefinition} node
	*/
	public void defaultSFunctionDefinition(SFunctionDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AExternalDefinition} node from {@link AExternalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExternalDefinition} node
	*/
	public void caseAExternalDefinition(AExternalDefinition node) throws AnalysisException;
	/**
	* Called by the {@link SOperationDefinition} node from {@link SOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SOperationDefinition} node
	*/
	public void defaultSOperationDefinition(SOperationDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AImportedDefinition} node from {@link AImportedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImportedDefinition} node
	*/
	public void caseAImportedDefinition(AImportedDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AInheritedDefinition} node from {@link AInheritedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInheritedDefinition} node
	*/
	public void caseAInheritedDefinition(AInheritedDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ALocalDefinition} node from {@link ALocalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALocalDefinition} node
	*/
	public void caseALocalDefinition(ALocalDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AMultiBindListDefinition} node from {@link AMultiBindListDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMultiBindListDefinition} node
	*/
	public void caseAMultiBindListDefinition(AMultiBindListDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AMutexSyncDefinition} node from {@link AMutexSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDefinition} node
	*/
	public void caseAMutexSyncDefinition(AMutexSyncDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ANamedTraceDefinition} node from {@link ANamedTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDefinition} node
	*/
	public void caseANamedTraceDefinition(ANamedTraceDefinition node) throws AnalysisException;
	/**
	* Called by the {@link APerSyncDefinition} node from {@link APerSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link APerSyncDefinition} node
	*/
	public void caseAPerSyncDefinition(APerSyncDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ARenamedDefinition} node from {@link ARenamedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARenamedDefinition} node
	*/
	public void caseARenamedDefinition(ARenamedDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AStateDefinition} node from {@link AStateDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AStateDefinition} node
	*/
	public void caseAStateDefinition(AStateDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AThreadDefinition} node from {@link AThreadDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDefinition} node
	*/
	public void caseAThreadDefinition(AThreadDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ATypeDefinition} node from {@link ATypeDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDefinition} node
	*/
	public void caseATypeDefinition(ATypeDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AUntypedDefinition} node from {@link AUntypedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AUntypedDefinition} node
	*/
	public void caseAUntypedDefinition(AUntypedDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AValueDefinition} node from {@link AValueDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AValueDefinition} node
	*/
	public void caseAValueDefinition(AValueDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AExplicitFunctionDefinition} node from {@link AExplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitFunctionDefinition} node
	*/
	public void caseAExplicitFunctionDefinition(AExplicitFunctionDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AImplicitFunctionDefinition} node from {@link AImplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitFunctionDefinition} node
	*/
	public void caseAImplicitFunctionDefinition(AImplicitFunctionDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AExplicitOperationDefinition} node from {@link AExplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitOperationDefinition} node
	*/
	public void caseAExplicitOperationDefinition(AExplicitOperationDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AImplicitOperationDefinition} node from {@link AImplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitOperationDefinition} node
	*/
	public void caseAImplicitOperationDefinition(AImplicitOperationDefinition node) throws AnalysisException;
	/**
	* Called by the {@link PTerm} node from {@link PTerm#apply(IAnalysis)}.
	* @param node the calling {@link PTerm} node
	*/
	public void defaultPTerm(PTerm node) throws AnalysisException;
	/**
	* Called by the {@link ATraceDefinitionTerm} node from {@link ATraceDefinitionTerm#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDefinitionTerm} node
	*/
	public void caseATraceDefinitionTerm(ATraceDefinitionTerm node) throws AnalysisException;
	/**
	* Called by the {@link PTraceDefinition} node from {@link PTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceDefinition} node
	*/
	public void defaultPTraceDefinition(PTraceDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AInstanceTraceDefinition} node from {@link AInstanceTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDefinition} node
	*/
	public void caseAInstanceTraceDefinition(AInstanceTraceDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ALetBeStBindingTraceDefinition} node from {@link ALetBeStBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDefinition} node
	*/
	public void caseALetBeStBindingTraceDefinition(ALetBeStBindingTraceDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ALetDefBindingTraceDefinition} node from {@link ALetDefBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDefinition} node
	*/
	public void caseALetDefBindingTraceDefinition(ALetDefBindingTraceDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ARepeatTraceDefinition} node from {@link ARepeatTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDefinition} node
	*/
	public void caseARepeatTraceDefinition(ARepeatTraceDefinition node) throws AnalysisException;
	/**
	* Called by the {@link PTraceCoreDefinition} node from {@link PTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceCoreDefinition} node
	*/
	public void defaultPTraceCoreDefinition(PTraceCoreDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AApplyExpressionTraceCoreDefinition} node from {@link AApplyExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpressionTraceCoreDefinition} node
	*/
	public void caseAApplyExpressionTraceCoreDefinition(AApplyExpressionTraceCoreDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ABracketedExpressionTraceCoreDefinition} node from {@link ABracketedExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpressionTraceCoreDefinition} node
	*/
	public void caseABracketedExpressionTraceCoreDefinition(ABracketedExpressionTraceCoreDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AConcurrentExpressionTraceCoreDefinition} node from {@link AConcurrentExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpressionTraceCoreDefinition} node
	*/
	public void caseAConcurrentExpressionTraceCoreDefinition(AConcurrentExpressionTraceCoreDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ABusClassDefinition} node from {@link ABusClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABusClassDefinition} node
	*/
	public void caseABusClassDefinition(ABusClassDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ACpuClassDefinition} node from {@link ACpuClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ACpuClassDefinition} node
	*/
	public void caseACpuClassDefinition(ACpuClassDefinition node) throws AnalysisException;
	/**
	* Called by the {@link ASystemClassDefinition} node from {@link ASystemClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ASystemClassDefinition} node
	*/
	public void caseASystemClassDefinition(ASystemClassDefinition node) throws AnalysisException;
	/**
	* Called by the {@link AClassClassDefinition} node from {@link AClassClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassClassDefinition} node
	*/
	public void caseAClassClassDefinition(AClassClassDefinition node) throws AnalysisException;
	/**
	* Called by the {@link PModules} node from {@link PModules#apply(IAnalysis)}.
	* @param node the calling {@link PModules} node
	*/
	public void defaultPModules(PModules node) throws AnalysisException;
	/**
	* Called by the {@link AModuleModules} node from {@link AModuleModules#apply(IAnalysis)}.
	* @param node the calling {@link AModuleModules} node
	*/
	public void caseAModuleModules(AModuleModules node) throws AnalysisException;
	/**
	* Called by the {@link PImports} node from {@link PImports#apply(IAnalysis)}.
	* @param node the calling {@link PImports} node
	*/
	public void defaultPImports(PImports node) throws AnalysisException;
	/**
	* Called by the {@link AModuleImports} node from {@link AModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleImports} node
	*/
	public void caseAModuleImports(AModuleImports node) throws AnalysisException;
	/**
	* Called by the {@link AFromModuleImports} node from {@link AFromModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AFromModuleImports} node
	*/
	public void caseAFromModuleImports(AFromModuleImports node) throws AnalysisException;
	/**
	* Called by the {@link PImport} node from {@link PImport#apply(IAnalysis)}.
	* @param node the calling {@link PImport} node
	*/
	public void defaultPImport(PImport node) throws AnalysisException;
	/**
	* Called by the {@link AAllImport} node from {@link AAllImport#apply(IAnalysis)}.
	* @param node the calling {@link AAllImport} node
	*/
	public void caseAAllImport(AAllImport node) throws AnalysisException;
	/**
	* Called by the {@link ATypeImport} node from {@link ATypeImport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeImport} node
	*/
	public void caseATypeImport(ATypeImport node) throws AnalysisException;
	/**
	* Called by the {@link SValueImport} node from {@link SValueImport#apply(IAnalysis)}.
	* @param node the calling {@link SValueImport} node
	*/
	public void defaultSValueImport(SValueImport node) throws AnalysisException;
	/**
	* Called by the {@link AValueValueImport} node from {@link AValueValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AValueValueImport} node
	*/
	public void caseAValueValueImport(AValueValueImport node) throws AnalysisException;
	/**
	* Called by the {@link AFunctionValueImport} node from {@link AFunctionValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionValueImport} node
	*/
	public void caseAFunctionValueImport(AFunctionValueImport node) throws AnalysisException;
	/**
	* Called by the {@link AOperationValueImport} node from {@link AOperationValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationValueImport} node
	*/
	public void caseAOperationValueImport(AOperationValueImport node) throws AnalysisException;
	/**
	* Called by the {@link PExports} node from {@link PExports#apply(IAnalysis)}.
	* @param node the calling {@link PExports} node
	*/
	public void defaultPExports(PExports node) throws AnalysisException;
	/**
	* Called by the {@link AModuleExports} node from {@link AModuleExports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleExports} node
	*/
	public void caseAModuleExports(AModuleExports node) throws AnalysisException;
	/**
	* Called by the {@link PExport} node from {@link PExport#apply(IAnalysis)}.
	* @param node the calling {@link PExport} node
	*/
	public void defaultPExport(PExport node) throws AnalysisException;
	/**
	* Called by the {@link AAllExport} node from {@link AAllExport#apply(IAnalysis)}.
	* @param node the calling {@link AAllExport} node
	*/
	public void caseAAllExport(AAllExport node) throws AnalysisException;
	/**
	* Called by the {@link AFunctionExport} node from {@link AFunctionExport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionExport} node
	*/
	public void caseAFunctionExport(AFunctionExport node) throws AnalysisException;
	/**
	* Called by the {@link AOperationExport} node from {@link AOperationExport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationExport} node
	*/
	public void caseAOperationExport(AOperationExport node) throws AnalysisException;
	/**
	* Called by the {@link ATypeExport} node from {@link ATypeExport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeExport} node
	*/
	public void caseATypeExport(ATypeExport node) throws AnalysisException;
	/**
	* Called by the {@link AValueExport} node from {@link AValueExport#apply(IAnalysis)}.
	* @param node the calling {@link AValueExport} node
	*/
	public void caseAValueExport(AValueExport node) throws AnalysisException;
	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public void defaultPStm(PStm node) throws AnalysisException;
	/**
	* Called by the {@link AAlwaysStm} node from {@link AAlwaysStm#apply(IAnalysis)}.
	* @param node the calling {@link AAlwaysStm} node
	*/
	public void caseAAlwaysStm(AAlwaysStm node) throws AnalysisException;
	/**
	* Called by the {@link AAssignmentStm} node from {@link AAssignmentStm#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStm} node
	*/
	public void caseAAssignmentStm(AAssignmentStm node) throws AnalysisException;
	/**
	* Called by the {@link AAtomicStm} node from {@link AAtomicStm#apply(IAnalysis)}.
	* @param node the calling {@link AAtomicStm} node
	*/
	public void caseAAtomicStm(AAtomicStm node) throws AnalysisException;
	/**
	* Called by the {@link ACallObjectStm} node from {@link ACallObjectStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStm} node
	*/
	public void caseACallObjectStm(ACallObjectStm node) throws AnalysisException;
	/**
	* Called by the {@link ACallStm} node from {@link ACallStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallStm} node
	*/
	public void caseACallStm(ACallStm node) throws AnalysisException;
	/**
	* Called by the {@link ACasesStm} node from {@link ACasesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStm} node
	*/
	public void caseACasesStm(ACasesStm node) throws AnalysisException;
	/**
	* Called by the {@link AClassInvariantStm} node from {@link AClassInvariantStm#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantStm} node
	*/
	public void caseAClassInvariantStm(AClassInvariantStm node) throws AnalysisException;
	/**
	* Called by the {@link ACyclesStm} node from {@link ACyclesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACyclesStm} node
	*/
	public void caseACyclesStm(ACyclesStm node) throws AnalysisException;
	/**
	* Called by the {@link ADurationStm} node from {@link ADurationStm#apply(IAnalysis)}.
	* @param node the calling {@link ADurationStm} node
	*/
	public void caseADurationStm(ADurationStm node) throws AnalysisException;
	/**
	* Called by the {@link AElseIfStm} node from {@link AElseIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStm} node
	*/
	public void caseAElseIfStm(AElseIfStm node) throws AnalysisException;
	/**
	* Called by the {@link AErrorStm} node from {@link AErrorStm#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStm} node
	*/
	public void caseAErrorStm(AErrorStm node) throws AnalysisException;
	/**
	* Called by the {@link AExitStm} node from {@link AExitStm#apply(IAnalysis)}.
	* @param node the calling {@link AExitStm} node
	*/
	public void caseAExitStm(AExitStm node) throws AnalysisException;
	/**
	* Called by the {@link AForAllStm} node from {@link AForAllStm#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStm} node
	*/
	public void caseAForAllStm(AForAllStm node) throws AnalysisException;
	/**
	* Called by the {@link AForIndexStm} node from {@link AForIndexStm#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStm} node
	*/
	public void caseAForIndexStm(AForIndexStm node) throws AnalysisException;
	/**
	* Called by the {@link AForPatternBindStm} node from {@link AForPatternBindStm#apply(IAnalysis)}.
	* @param node the calling {@link AForPatternBindStm} node
	*/
	public void caseAForPatternBindStm(AForPatternBindStm node) throws AnalysisException;
	/**
	* Called by the {@link AIfStm} node from {@link AIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AIfStm} node
	*/
	public void caseAIfStm(AIfStm node) throws AnalysisException;
	/**
	* Called by the {@link ALetBeStStm} node from {@link ALetBeStStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStm} node
	*/
	public void caseALetBeStStm(ALetBeStStm node) throws AnalysisException;
	/**
	* Called by the {@link ALetStm} node from {@link ALetStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetStm} node
	*/
	public void caseALetStm(ALetStm node) throws AnalysisException;
	/**
	* Called by the {@link ANotYetSpecifiedStm} node from {@link ANotYetSpecifiedStm#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedStm} node
	*/
	public void caseANotYetSpecifiedStm(ANotYetSpecifiedStm node) throws AnalysisException;
	/**
	* Called by the {@link AReturnStm} node from {@link AReturnStm#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStm} node
	*/
	public void caseAReturnStm(AReturnStm node) throws AnalysisException;
	/**
	* Called by the {@link SSimpleBlockStm} node from {@link SSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link SSimpleBlockStm} node
	*/
	public void defaultSSimpleBlockStm(SSimpleBlockStm node) throws AnalysisException;
	/**
	* Called by the {@link ASkipStm} node from {@link ASkipStm#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStm} node
	*/
	public void caseASkipStm(ASkipStm node) throws AnalysisException;
	/**
	* Called by the {@link ASpecificationStm} node from {@link ASpecificationStm#apply(IAnalysis)}.
	* @param node the calling {@link ASpecificationStm} node
	*/
	public void caseASpecificationStm(ASpecificationStm node) throws AnalysisException;
	/**
	* Called by the {@link AStartStm} node from {@link AStartStm#apply(IAnalysis)}.
	* @param node the calling {@link AStartStm} node
	*/
	public void caseAStartStm(AStartStm node) throws AnalysisException;
	/**
	* Called by the {@link AStopStm} node from {@link AStopStm#apply(IAnalysis)}.
	* @param node the calling {@link AStopStm} node
	*/
	public void caseAStopStm(AStopStm node) throws AnalysisException;
	/**
	* Called by the {@link ASubclassResponsibilityStm} node from {@link ASubclassResponsibilityStm#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityStm} node
	*/
	public void caseASubclassResponsibilityStm(ASubclassResponsibilityStm node) throws AnalysisException;
	/**
	* Called by the {@link ATixeStm} node from {@link ATixeStm#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStm} node
	*/
	public void caseATixeStm(ATixeStm node) throws AnalysisException;
	/**
	* Called by the {@link ATrapStm} node from {@link ATrapStm#apply(IAnalysis)}.
	* @param node the calling {@link ATrapStm} node
	*/
	public void caseATrapStm(ATrapStm node) throws AnalysisException;
	/**
	* Called by the {@link AWhileStm} node from {@link AWhileStm#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStm} node
	*/
	public void caseAWhileStm(AWhileStm node) throws AnalysisException;
	/**
	* Called by the {@link APeriodicStm} node from {@link APeriodicStm#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStm} node
	*/
	public void caseAPeriodicStm(APeriodicStm node) throws AnalysisException;
	/**
	* Called by the {@link ASporadicStm} node from {@link ASporadicStm#apply(IAnalysis)}.
	* @param node the calling {@link ASporadicStm} node
	*/
	public void caseASporadicStm(ASporadicStm node) throws AnalysisException;
	/**
	* Called by the {@link ABlockSimpleBlockStm} node from {@link ABlockSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ABlockSimpleBlockStm} node
	*/
	public void caseABlockSimpleBlockStm(ABlockSimpleBlockStm node) throws AnalysisException;
	/**
	* Called by the {@link ANonDeterministicSimpleBlockStm} node from {@link ANonDeterministicSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ANonDeterministicSimpleBlockStm} node
	*/
	public void caseANonDeterministicSimpleBlockStm(ANonDeterministicSimpleBlockStm node) throws AnalysisException;
	/**
	* Called by the {@link PStateDesignator} node from {@link PStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PStateDesignator} node
	*/
	public void defaultPStateDesignator(PStateDesignator node) throws AnalysisException;
	/**
	* Called by the {@link AFieldStateDesignator} node from {@link AFieldStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignator} node
	*/
	public void caseAFieldStateDesignator(AFieldStateDesignator node) throws AnalysisException;
	/**
	* Called by the {@link AIdentifierStateDesignator} node from {@link AIdentifierStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignator} node
	*/
	public void caseAIdentifierStateDesignator(AIdentifierStateDesignator node) throws AnalysisException;
	/**
	* Called by the {@link AMapSeqStateDesignator} node from {@link AMapSeqStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignator} node
	*/
	public void caseAMapSeqStateDesignator(AMapSeqStateDesignator node) throws AnalysisException;
	/**
	* Called by the {@link PObjectDesignator} node from {@link PObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PObjectDesignator} node
	*/
	public void defaultPObjectDesignator(PObjectDesignator node) throws AnalysisException;
	/**
	* Called by the {@link AApplyObjectDesignator} node from {@link AApplyObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignator} node
	*/
	public void caseAApplyObjectDesignator(AApplyObjectDesignator node) throws AnalysisException;
	/**
	* Called by the {@link AFieldObjectDesignator} node from {@link AFieldObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignator} node
	*/
	public void caseAFieldObjectDesignator(AFieldObjectDesignator node) throws AnalysisException;
	/**
	* Called by the {@link AIdentifierObjectDesignator} node from {@link AIdentifierObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignator} node
	*/
	public void caseAIdentifierObjectDesignator(AIdentifierObjectDesignator node) throws AnalysisException;
	/**
	* Called by the {@link ANewObjectDesignator} node from {@link ANewObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignator} node
	*/
	public void caseANewObjectDesignator(ANewObjectDesignator node) throws AnalysisException;
	/**
	* Called by the {@link ASelfObjectDesignator} node from {@link ASelfObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignator} node
	*/
	public void caseASelfObjectDesignator(ASelfObjectDesignator node) throws AnalysisException;
	/**
	* Called by the {@link PAlternativeStm} node from {@link PAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link PAlternativeStm} node
	*/
	public void defaultPAlternativeStm(PAlternativeStm node) throws AnalysisException;
	/**
	* Called by the {@link ACaseAlternativeStm} node from {@link ACaseAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternativeStm} node
	*/
	public void caseACaseAlternativeStm(ACaseAlternativeStm node) throws AnalysisException;
	/**
	* Called by the {@link PStmtAlternative} node from {@link PStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PStmtAlternative} node
	*/
	public void defaultPStmtAlternative(PStmtAlternative node) throws AnalysisException;
	/**
	* Called by the {@link ATixeStmtAlternative} node from {@link ATixeStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStmtAlternative} node
	*/
	public void caseATixeStmtAlternative(ATixeStmtAlternative node) throws AnalysisException;
	/**
	* Called by the {@link PClause} node from {@link PClause#apply(IAnalysis)}.
	* @param node the calling {@link PClause} node
	*/
	public void defaultPClause(PClause node) throws AnalysisException;
	/**
	* Called by the {@link AExternalClause} node from {@link AExternalClause#apply(IAnalysis)}.
	* @param node the calling {@link AExternalClause} node
	*/
	public void caseAExternalClause(AExternalClause node) throws AnalysisException;
	/**
	* Called by the {@link PCase} node from {@link PCase#apply(IAnalysis)}.
	* @param node the calling {@link PCase} node
	*/
	public void defaultPCase(PCase node) throws AnalysisException;
	/**
	* Called by the {@link AErrorCase} node from {@link AErrorCase#apply(IAnalysis)}.
	* @param node the calling {@link AErrorCase} node
	*/
	public void caseAErrorCase(AErrorCase node) throws AnalysisException;
	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public void defaultINode(INode node) throws AnalysisException;
	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void defaultIToken(IToken node) throws AnalysisException;

}
