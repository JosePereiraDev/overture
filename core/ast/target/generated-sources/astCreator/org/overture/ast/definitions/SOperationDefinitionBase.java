/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.definitions;


import org.overture.ast.statements.PStm;
import org.overture.ast.definitions.PDefinitionBase;
import java.util.HashMap;
import org.overture.ast.definitions.SClassDefinition;
import org.overture.ast.expressions.PExp;
import org.overture.ast.definitions.AStateDefinition;
import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.typechecker.Pass;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.definitions.SOperationDefinition;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import org.overture.ast.typechecker.NameScope;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import java.lang.String;
import org.overture.ast.types.PType;
import org.overture.ast.definitions.AExplicitFunctionDefinition;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public abstract class SOperationDefinitionBase extends PDefinitionBase implements SOperationDefinition
{
	private static final long serialVersionUID = 1L;

	protected PStm _body;
	protected PExp _precondition;
	protected PExp _postcondition;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected AExplicitFunctionDefinition _predef;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected AExplicitFunctionDefinition _postdef;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected AStateDefinition _state;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected PType _actualResult;
	protected Boolean _isConstructor;

	/**
	* Creates a new {@code SOperationDefinitionBase} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param body_ the {@link PStm} node for the {@code body} child of this {@link SOperationDefinitionBase} node
	* @param precondition_ the {@link PExp} node for the {@code precondition} child of this {@link SOperationDefinitionBase} node
	* @param postcondition_ the {@link PExp} node for the {@code postcondition} child of this {@link SOperationDefinitionBase} node
	* @param predef_ the {@link AExplicitFunctionDefinition} <b>graph</a> node for the {@code predef} child of this {@link SOperationDefinitionBase} node.
	*  <i>The parent of this {@code predef } will not be changed by adding it to this node.</i>
	* @param postdef_ the {@link AExplicitFunctionDefinition} <b>graph</a> node for the {@code postdef} child of this {@link SOperationDefinitionBase} node.
	*  <i>The parent of this {@code postdef } will not be changed by adding it to this node.</i>
	* @param state_ the {@link AStateDefinition} <b>graph</a> node for the {@code state} child of this {@link SOperationDefinitionBase} node.
	*  <i>The parent of this {@code state } will not be changed by adding it to this node.</i>
	* @param actualResult_ the {@link PType} <b>graph</a> node for the {@code actualResult} child of this {@link SOperationDefinitionBase} node.
	*  <i>The parent of this {@code actualResult } will not be changed by adding it to this node.</i>
	* @param isConstructor_ the {@link Boolean} node for the {@code isConstructor} child of this {@link SOperationDefinitionBase} node
	*/
	public SOperationDefinitionBase(ILexLocation location_, ILexNameToken name_, NameScope nameScope_, Boolean used_, SClassDefinition classDefinition_, AAccessSpecifierAccessSpecifier access_, PType type_, Pass pass_, PStm body_, PExp precondition_, PExp postcondition_, AExplicitFunctionDefinition predef_, AExplicitFunctionDefinition postdef_, AStateDefinition state_, PType actualResult_, Boolean isConstructor_)
	{
		super(location_,name_,nameScope_,used_,classDefinition_,access_,type_,pass_);
		this.setBody(body_);
		this.setPrecondition(precondition_);
		this.setPostcondition(postcondition_);
		this.setPredef(predef_);
		this.setPostdef(postdef_);
		this.setState(state_);
		this.setActualResult(actualResult_);
		this.setIsConstructor(isConstructor_);

	}


	/**
	* Creates a new {@code SOperationDefinitionBase TAG=#Operation} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param body_ the {@link PStm} node for the {@code body} child of this {@link SOperationDefinitionBase} node
	* @param precondition_ the {@link PExp} node for the {@code precondition} child of this {@link SOperationDefinitionBase} node
	* @param postcondition_ the {@link PExp} node for the {@code postcondition} child of this {@link SOperationDefinitionBase} node
	* @param isConstructor_ the {@link Boolean} node for the {@code isConstructor} child of this {@link SOperationDefinitionBase} node
	*/
	public SOperationDefinitionBase(ILexLocation location_, NameScope nameScope_, Boolean used_, AAccessSpecifierAccessSpecifier access_, Pass pass_, PStm body_, PExp precondition_, PExp postcondition_, Boolean isConstructor_)
	{
		super(location_,null,nameScope_,used_,null,access_,null,pass_);
		this.setBody(body_);
		this.setPrecondition(precondition_);
		this.setPostcondition(postcondition_);
		this.setIsConstructor(isConstructor_);

	}


	/**
	 * Creates a new {@link SOperationDefinitionBase} node with no children.
	 */
	public SOperationDefinitionBase()
	{

	}



	public String toString()
	{
		return super.toString();

	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Creates a deep clone of this {@link SOperationDefinitionBase} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link SOperationDefinitionBase} node
	 */
	@Override
	public abstract SOperationDefinition clone(Map<INode,INode> oldToNewMap);

	/**
	 * Returns a deep clone of this {@link SOperationDefinitionBase} node.
	 * @return a deep clone of this {@link SOperationDefinitionBase} node
	 */
	@Override
	public abstract SOperationDefinition clone();

	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link SOperationDefinitionBase} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link SOperationDefinitionBase} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link SOperationDefinitionBase} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			return;
		}

		if (this._classDefinition == child) {
			return;
		}

		if (this._access == child) {
			this._access = null;
			return;
		}

		if (this._type == child) {
			return;
		}

		if (this._body == child) {
			this._body = null;
			return;
		}

		if (this._precondition == child) {
			this._precondition = null;
			return;
		}

		if (this._postcondition == child) {
			this._postcondition = null;
			return;
		}

		if (this._predef == child) {
			return;
		}

		if (this._postdef == child) {
			return;
		}

		if (this._state == child) {
			return;
		}

		if (this._actualResult == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_body",this._body);
		fields.put("_precondition",this._precondition);
		fields.put("_postcondition",this._postcondition);
		fields.put("_predef",this._predef);
		fields.put("_postdef",this._postdef);
		fields.put("_state",this._state);
		fields.put("_actualResult",this._actualResult);
		fields.put("_isConstructor",this._isConstructor);
		return fields;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof SOperationDefinitionBase)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Sets the {@code _body} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _body} child of this {@link SOperationDefinitionBase} node
	*/
	public void setBody(PStm value)
	{
		if (this._body != null) {
			this._body.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._body = value;

	}


	/**
	 * @return the {@link PStm} node which is the {@code _body} child of this {@link SOperationDefinitionBase} node
	*/
	public PStm getBody()
	{
		return this._body;
	}


	/**
	 * Sets the {@code _precondition} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _precondition} child of this {@link SOperationDefinitionBase} node
	*/
	public void setPrecondition(PExp value)
	{
		if (this._precondition != null) {
			this._precondition.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._precondition = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _precondition} child of this {@link SOperationDefinitionBase} node
	*/
	public PExp getPrecondition()
	{
		return this._precondition;
	}


	/**
	 * Sets the {@code _postcondition} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _postcondition} child of this {@link SOperationDefinitionBase} node
	*/
	public void setPostcondition(PExp value)
	{
		if (this._postcondition != null) {
			this._postcondition.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._postcondition = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _postcondition} child of this {@link SOperationDefinitionBase} node
	*/
	public PExp getPostcondition()
	{
		return this._postcondition;
	}


	/**
	 * Sets the {@code _predef} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _predef} child of this {@link SOperationDefinitionBase} node
	*/
	public void setPredef(AExplicitFunctionDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._predef = value;

	}


	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _predef} child of this {@link SOperationDefinitionBase} node
	*/
	public AExplicitFunctionDefinition getPredef()
	{
		return this._predef;
	}


	/**
	 * Sets the {@code _postdef} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _postdef} child of this {@link SOperationDefinitionBase} node
	*/
	public void setPostdef(AExplicitFunctionDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._postdef = value;

	}


	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _postdef} child of this {@link SOperationDefinitionBase} node
	*/
	public AExplicitFunctionDefinition getPostdef()
	{
		return this._postdef;
	}


	/**
	 * Sets the {@code _state} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _state} child of this {@link SOperationDefinitionBase} node
	*/
	public void setState(AStateDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._state = value;

	}


	/**
	 * @return the {@link AStateDefinition} node which is the {@code _state} child of this {@link SOperationDefinitionBase} node
	*/
	public AStateDefinition getState()
	{
		return this._state;
	}


	/**
	 * Sets the {@code _actualResult} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _actualResult} child of this {@link SOperationDefinitionBase} node
	*/
	public void setActualResult(PType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._actualResult = value;

	}


	/**
	 * @return the {@link PType} node which is the {@code _actualResult} child of this {@link SOperationDefinitionBase} node
	*/
	public PType getActualResult()
	{
		return this._actualResult;
	}


	/**
	 * Sets the {@code _isConstructor} child of this {@link SOperationDefinitionBase} node.
	 * @param value the new {@code _isConstructor} child of this {@link SOperationDefinitionBase} node
	*/
	public void setIsConstructor(Boolean value)
	{
		this._isConstructor = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _isConstructor} child of this {@link SOperationDefinitionBase} node
	*/
	public Boolean getIsConstructor()
	{
		return this._isConstructor;
	}



}
