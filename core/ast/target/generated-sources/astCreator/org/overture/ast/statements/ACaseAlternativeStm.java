/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.statements;


import org.overture.ast.definitions.PDefinition;
import org.overture.ast.statements.PStm;
import java.util.HashMap;
import org.overture.ast.statements.ACaseAlternativeStm;
import org.overture.ast.expressions.PExp;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import java.util.List;
import org.overture.ast.analysis.intf.IAnswer;
import org.overture.ast.patterns.PPattern;
import java.util.Map;
import org.overture.ast.statements.PAlternativeStmBase;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import java.lang.String;
import org.overture.ast.node.GraphNodeList;
import org.overture.ast.types.PType;
import java.util.LinkedList;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class ACaseAlternativeStm extends PAlternativeStmBase
{
	private static final long serialVersionUID = 1L;

	private ILexLocation _location;
	private PExp _cexp;
	private PPattern _pattern;
	private PStm _result;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private GraphNodeList<PDefinition> _defs = new GraphNodeList<PDefinition>(this);
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private PType _ctype;

	/**
	 * Creates a new {@link ACaseAlternativeStm} node with no children.
	 */
	public ACaseAlternativeStm()
	{

	}


	/**
	* Creates a new {@code ACaseAlternativeStm} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param location_ the {@link ILexLocation} node for the {@code location} child of this {@link ACaseAlternativeStm} node
	* @param cexp_ the {@link PExp} node for the {@code cexp} child of this {@link ACaseAlternativeStm} node
	* @param pattern_ the {@link PPattern} node for the {@code pattern} child of this {@link ACaseAlternativeStm} node
	* @param result_ the {@link PStm} node for the {@code result} child of this {@link ACaseAlternativeStm} node
	* @param defs_ the {@link GraphNodeList} <b>graph</a> node for the {@code defs} child of this {@link ACaseAlternativeStm} node.
	*  <i>The parent of this {@code defs } will not be changed by adding it to this node.</i>
	* @param ctype_ the {@link PType} <b>graph</a> node for the {@code ctype} child of this {@link ACaseAlternativeStm} node.
	*  <i>The parent of this {@code ctype } will not be changed by adding it to this node.</i>
	*/
	public ACaseAlternativeStm(ILexLocation location_, PExp cexp_, PPattern pattern_, PStm result_, List<? extends PDefinition> defs_, PType ctype_)
	{
		super();
		this.setLocation(location_);
		this.setCexp(cexp_);
		this.setPattern(pattern_);
		this.setResult(result_);
		this.setDefs(defs_);
		this.setCtype(ctype_);

	}


	/**
	* Creates a new {@code ACaseAlternativeStm TAG=case} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param location_ the {@link ILexLocation} node for the {@code location} child of this {@link ACaseAlternativeStm} node
	* @param cexp_ the {@link PExp} node for the {@code cexp} child of this {@link ACaseAlternativeStm} node
	* @param pattern_ the {@link PPattern} node for the {@code pattern} child of this {@link ACaseAlternativeStm} node
	* @param result_ the {@link PStm} node for the {@code result} child of this {@link ACaseAlternativeStm} node
	*/
	public ACaseAlternativeStm(ILexLocation location_, PExp cexp_, PPattern pattern_, PStm result_)
	{
		super();
		this.setLocation(location_);
		this.setCexp(cexp_);
		this.setPattern(pattern_);
		this.setResult(result_);

	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link ACaseAlternativeStm} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link ACaseAlternativeStm} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link ACaseAlternativeStm} node
	 */
	public void removeChild(INode child)
	{
		if (this._cexp == child) {
			this._cexp = null;
			return;
		}

		if (this._pattern == child) {
			this._pattern = null;
			return;
		}

		if (this._result == child) {
			this._result = null;
			return;
		}

		if (this._defs.contains(child)) {
			return;
		}

		if (this._ctype == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a deep clone of this {@link ACaseAlternativeStm} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link ACaseAlternativeStm} node
	 */
	public ACaseAlternativeStm clone(Map<INode,INode> oldToNewMap)
	{
		ACaseAlternativeStm node = new ACaseAlternativeStm(
			_location,
			cloneNode(_cexp, oldToNewMap),
			cloneNode(_pattern, oldToNewMap),
			cloneNode(_result, oldToNewMap),
			_defs,
			_ctype
		);
		oldToNewMap.put(this, node);
		return node;
	}



	public String toString()
	{
		return "" + _pattern+" -> "+_result;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_location",this._location);
		fields.put("_cexp",this._cexp);
		fields.put("_pattern",this._pattern);
		fields.put("_result",this._result);
		fields.put("_defs",this._defs);
		fields.put("_ctype",this._ctype);
		return fields;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof ACaseAlternativeStm)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Returns a deep clone of this {@link ACaseAlternativeStm} node.
	 * @return a deep clone of this {@link ACaseAlternativeStm} node
	 */
	public ACaseAlternativeStm clone()
	{
		return new ACaseAlternativeStm(
			_location,
			cloneNode(_cexp),
			cloneNode(_pattern),
			cloneNode(_result),
			_defs,
			_ctype
		);
	}


	/**
	 * Sets the {@code _location} child of this {@link ACaseAlternativeStm} node.
	 * @param value the new {@code _location} child of this {@link ACaseAlternativeStm} node
	*/
	public void setLocation(ILexLocation value)
	{
		this._location = value;
	}


	/**
	 * @return the {@link ILexLocation} node which is the {@code _location} child of this {@link ACaseAlternativeStm} node
	*/
	public ILexLocation getLocation()
	{
		return this._location;
	}


	/**
	 * Sets the {@code _cexp} child of this {@link ACaseAlternativeStm} node.
	 * @param value the new {@code _cexp} child of this {@link ACaseAlternativeStm} node
	*/
	public void setCexp(PExp value)
	{
		if (this._cexp != null) {
			this._cexp.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._cexp = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _cexp} child of this {@link ACaseAlternativeStm} node
	*/
	public PExp getCexp()
	{
		return this._cexp;
	}


	/**
	 * Sets the {@code _pattern} child of this {@link ACaseAlternativeStm} node.
	 * @param value the new {@code _pattern} child of this {@link ACaseAlternativeStm} node
	*/
	public void setPattern(PPattern value)
	{
		if (this._pattern != null) {
			this._pattern.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._pattern = value;

	}


	/**
	 * @return the {@link PPattern} node which is the {@code _pattern} child of this {@link ACaseAlternativeStm} node
	*/
	public PPattern getPattern()
	{
		return this._pattern;
	}


	/**
	 * Sets the {@code _result} child of this {@link ACaseAlternativeStm} node.
	 * @param value the new {@code _result} child of this {@link ACaseAlternativeStm} node
	*/
	public void setResult(PStm value)
	{
		if (this._result != null) {
			this._result.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._result = value;

	}


	/**
	 * @return the {@link PStm} node which is the {@code _result} child of this {@link ACaseAlternativeStm} node
	*/
	public PStm getResult()
	{
		return this._result;
	}


	/**
	 * Sets the {@code _defs} child of this {@link ACaseAlternativeStm} node.
	 * @param value the new {@code _defs} child of this {@link ACaseAlternativeStm} node
	*/
	public void setDefs(List<? extends PDefinition> value)
	{
		if (this._defs.equals(value)) {
			return;
		}
		this._defs.clear();
		if (value != null) {
			this._defs.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _defs} child of this {@link ACaseAlternativeStm} node
	*/
	public LinkedList<PDefinition> getDefs()
	{
		return this._defs;
	}


	/**
	 * Sets the {@code _ctype} child of this {@link ACaseAlternativeStm} node.
	 * @param value the new {@code _ctype} child of this {@link ACaseAlternativeStm} node
	*/
	public void setCtype(PType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._ctype = value;

	}


	/**
	 * @return the {@link PType} node which is the {@code _ctype} child of this {@link ACaseAlternativeStm} node
	*/
	public PType getCtype()
	{
		return this._ctype;
	}


	/**
	* Calls the {@link IAnalysis#caseACaseAlternativeStm(ACaseAlternativeStm)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link ACaseAlternativeStm} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseACaseAlternativeStm(this);
	}


	/**
	* Calls the {@link IAnswer#caseACaseAlternativeStm(ACaseAlternativeStm)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link ACaseAlternativeStm} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseACaseAlternativeStm(this);
	}


	/**
	* Calls the {@link IQuestion#caseACaseAlternativeStm(ACaseAlternativeStm, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link ACaseAlternativeStm} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseACaseAlternativeStm(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseACaseAlternativeStm(ACaseAlternativeStm, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link ACaseAlternativeStm} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseACaseAlternativeStm(this,question);
	}



}
