/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.definitions;


import org.overture.ast.definitions.PDefinition;
import org.overture.ast.node.NodeListList;
import java.util.HashMap;
import org.overture.ast.definitions.SClassDefinition;
import java.lang.Integer;
import org.overture.ast.util.ToStringUtil;
import org.overture.ast.definitions.SFunctionDefinitionBase;
import org.overture.ast.typechecker.Pass;
import org.overture.ast.analysis.intf.IAnswer;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.patterns.PPattern;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import org.overture.ast.node.GraphNodeList;
import java.lang.String;
import java.util.LinkedList;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.types.AFunctionType;
import java.util.Collection;
import org.overture.ast.expressions.PExp;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import java.util.List;
import org.overture.ast.typechecker.NameScope;
import org.overture.ast.types.PType;
import org.overture.ast.definitions.AExplicitFunctionDefinition;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AExplicitFunctionDefinition extends SFunctionDefinitionBase
{
	private static final long serialVersionUID = 1L;

	private NodeListList<PPattern> _paramPatternList = new NodeListList<PPattern>(this);
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private GraphNodeList<PDefinition> _paramDefinitionList = new GraphNodeList<PDefinition>(this);
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private Boolean _isTypeInvariant;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private Boolean _isCurried;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private Boolean _typeInvariant;

	/**
	* Creates a new {@code AExplicitFunctionDefinition} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param paramPatternList_ the {@link NodeListList} node for the {@code paramPatternList} child of this {@link AExplicitFunctionDefinition} node
	* @param type_ the {@link AFunctionType} <b>graph</a> node for the {@code type} child of this {@link AExplicitFunctionDefinition} node.
	*  <i>The parent of this {@code type } will not be changed by adding it to this node.</i>
	* @param paramDefinitionList_ the {@link GraphNodeList} <b>graph</a> node for the {@code paramDefinitionList} child of this {@link AExplicitFunctionDefinition} node.
	*  <i>The parent of this {@code paramDefinitionList } will not be changed by adding it to this node.</i>
	* @param isTypeInvariant_ the {@link Boolean} <b>graph</a> node for the {@code isTypeInvariant} child of this {@link AExplicitFunctionDefinition} node.
	*  <i>The parent of this {@code isTypeInvariant } will not be changed by adding it to this node.</i>
	* @param isCurried_ the {@link Boolean} <b>graph</a> node for the {@code isCurried} child of this {@link AExplicitFunctionDefinition} node.
	*  <i>The parent of this {@code isCurried } will not be changed by adding it to this node.</i>
	* @param typeInvariant_ the {@link Boolean} <b>graph</a> node for the {@code typeInvariant} child of this {@link AExplicitFunctionDefinition} node.
	*  <i>The parent of this {@code typeInvariant } will not be changed by adding it to this node.</i>
	*/
	public AExplicitFunctionDefinition(ILexLocation location_, ILexNameToken name_, NameScope nameScope_, Boolean used_, SClassDefinition classDefinition_, AAccessSpecifierAccessSpecifier access_, Pass pass_, List<? extends ILexNameToken> typeParams_, PExp body_, PExp precondition_, PExp postcondition_, ILexNameToken measure_, AExplicitFunctionDefinition predef_, AExplicitFunctionDefinition postdef_, PDefinition measureDef_, Boolean recursive_, Boolean isUndefined_, Integer measureLexical_, PType expectedResult_, PType actualResult_, Collection<? extends List<PPattern>> paramPatternList_, AFunctionType type_, List<? extends PDefinition> paramDefinitionList_, Boolean isTypeInvariant_, Boolean isCurried_, Boolean typeInvariant_)
	{
		super(location_,name_,nameScope_,used_,classDefinition_,access_,null,pass_,typeParams_,body_,precondition_,postcondition_,measure_,predef_,postdef_,measureDef_,recursive_,isUndefined_,measureLexical_,expectedResult_,actualResult_);
		this.setParamPatternList(paramPatternList_);
		this.setType(type_);
		this.setParamDefinitionList(paramDefinitionList_);
		this.setIsTypeInvariant(isTypeInvariant_);
		this.setIsCurried(isCurried_);
		this.setTypeInvariant(typeInvariant_);

	}


	/**
	* Creates a new {@code AExplicitFunctionDefinition TAG=explicit} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param paramPatternList_ the {@link NodeListList} node for the {@code paramPatternList} child of this {@link AExplicitFunctionDefinition} node
	*/
	public AExplicitFunctionDefinition(ILexLocation location_, NameScope nameScope_, Boolean used_, AAccessSpecifierAccessSpecifier access_, Pass pass_, List<? extends ILexNameToken> typeParams_, PExp precondition_, PExp postcondition_, ILexNameToken measure_, Collection<? extends List<PPattern>> paramPatternList_)
	{
		super(location_,null,nameScope_,used_,null,access_,null,pass_,typeParams_,null,precondition_,postcondition_,measure_,null,null,null,false,false,0,null,null);
		this.setParamPatternList(paramPatternList_);
		this.setIsTypeInvariant(false);
		this.setIsCurried(false);
		this.setTypeInvariant(false);

	}


	/**
	 * Creates a new {@link AExplicitFunctionDefinition} node with no children.
	 */
	public AExplicitFunctionDefinition()
	{

	}


	/**
	 * Creates a deep clone of this {@link AExplicitFunctionDefinition} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AExplicitFunctionDefinition} node
	 */
	public AExplicitFunctionDefinition clone(Map<INode,INode> oldToNewMap)
	{
		AExplicitFunctionDefinition node = new AExplicitFunctionDefinition(
			_location,
			_name,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access, oldToNewMap),
			_pass,
			cloneList(_typeParams, oldToNewMap),
			_body,
			cloneNode(_precondition, oldToNewMap),
			cloneNode(_postcondition, oldToNewMap),
			cloneNode(_measure, oldToNewMap),
			_predef,
			_postdef,
			_measureDef,
			_recursive,
			_isUndefined,
			_measureLexical,
			_expectedResult,
			_actualResult,
			cloneListList(_paramPatternList, oldToNewMap),
			(AFunctionType)_type,
			_paramDefinitionList,
			_isTypeInvariant,
			_isCurried,
			_typeInvariant
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AExplicitFunctionDefinition)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}



	public String toString()
	{
		return "" + ""+ToStringUtil.getExplicitFunctionString(this);
	}


	/**
	 * Returns a deep clone of this {@link AExplicitFunctionDefinition} node.
	 * @return a deep clone of this {@link AExplicitFunctionDefinition} node
	 */
	public AExplicitFunctionDefinition clone()
	{
		return new AExplicitFunctionDefinition(
			_location,
			_name,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access),
			_pass,
			cloneList(_typeParams),
			_body,
			cloneNode(_precondition),
			cloneNode(_postcondition),
			cloneNode(_measure),
			_predef,
			_postdef,
			_measureDef,
			_recursive,
			_isUndefined,
			_measureLexical,
			_expectedResult,
			_actualResult,
			cloneListList(_paramPatternList),
			(AFunctionType)_type,
			_paramDefinitionList,
			_isTypeInvariant,
			_isCurried,
			_typeInvariant
		);
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AExplicitFunctionDefinition} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AExplicitFunctionDefinition} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AExplicitFunctionDefinition} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			return;
		}

		if (this._classDefinition == child) {
			return;
		}

		if (this._access == child) {
			this._access = null;
			return;
		}

		if (this._type == child) {
			return;
		}

		if (this._typeParams.remove(child)) {
				return;
		}
		if (this._body == child) {
			return;
		}

		if (this._precondition == child) {
			this._precondition = null;
			return;
		}

		if (this._postcondition == child) {
			this._postcondition = null;
			return;
		}

		if (this._measure == child) {
			this._measure = null;
			return;
		}

		if (this._predef == child) {
			return;
		}

		if (this._postdef == child) {
			return;
		}

		if (this._measureDef == child) {
			return;
		}

		if (this._expectedResult == child) {
			return;
		}

		if (this._actualResult == child) {
			return;
		}

		if (this._paramPatternList.remove(child)) {
				return;
		}
		if (this._type == child) {
			return;
		}

		if (this._paramDefinitionList.contains(child)) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_paramPatternList",this._paramPatternList);
		fields.put("_type",this._type);
		fields.put("_paramDefinitionList",this._paramDefinitionList);
		fields.put("_isTypeInvariant",this._isTypeInvariant);
		fields.put("_isCurried",this._isCurried);
		fields.put("_typeInvariant",this._typeInvariant);
		return fields;
	}


	/**
	 * Sets the {@code _paramPatternList} child of this {@link AExplicitFunctionDefinition} node.
	 * @param value the new {@code _paramPatternList} child of this {@link AExplicitFunctionDefinition} node
	*/
	public void setParamPatternList(Collection<? extends List<PPattern>> value)
	{
		if (this._paramPatternList.equals(value)) {
			return;
		}
		this._paramPatternList.clear();
		if (value != null) {
			this._paramPatternList.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _paramPatternList} child of this {@link AExplicitFunctionDefinition} node
	*/
	public LinkedList<List<PPattern>> getParamPatternList()
	{
		return this._paramPatternList;
	}


	/**
	 * Sets the {@code _type} child of this {@link AExplicitFunctionDefinition} node.
	 * @param value the new {@code _type} child of this {@link AExplicitFunctionDefinition} node
	*/
	public void setType(AFunctionType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._type = value;

	}


	/**
	 * @return the {@link AFunctionType} node which is the {@code _type} child of this {@link AExplicitFunctionDefinition} node
	*/
	public AFunctionType getType()
	{
		return (AFunctionType)this._type;
	}


	/**
	 * Sets the {@code _paramDefinitionList} child of this {@link AExplicitFunctionDefinition} node.
	 * @param value the new {@code _paramDefinitionList} child of this {@link AExplicitFunctionDefinition} node
	*/
	public void setParamDefinitionList(List<? extends PDefinition> value)
	{
		if (this._paramDefinitionList.equals(value)) {
			return;
		}
		this._paramDefinitionList.clear();
		if (value != null) {
			this._paramDefinitionList.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _paramDefinitionList} child of this {@link AExplicitFunctionDefinition} node
	*/
	public LinkedList<PDefinition> getParamDefinitionList()
	{
		return this._paramDefinitionList;
	}


	/**
	 * Sets the {@code _isTypeInvariant} child of this {@link AExplicitFunctionDefinition} node.
	 * @param value the new {@code _isTypeInvariant} child of this {@link AExplicitFunctionDefinition} node
	*/
	public void setIsTypeInvariant(Boolean value)
	{
		this._isTypeInvariant = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _isTypeInvariant} child of this {@link AExplicitFunctionDefinition} node
	*/
	public Boolean getIsTypeInvariant()
	{
		return this._isTypeInvariant;
	}


	/**
	 * Sets the {@code _isCurried} child of this {@link AExplicitFunctionDefinition} node.
	 * @param value the new {@code _isCurried} child of this {@link AExplicitFunctionDefinition} node
	*/
	public void setIsCurried(Boolean value)
	{
		this._isCurried = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _isCurried} child of this {@link AExplicitFunctionDefinition} node
	*/
	public Boolean getIsCurried()
	{
		return this._isCurried;
	}


	/**
	 * Sets the {@code _typeInvariant} child of this {@link AExplicitFunctionDefinition} node.
	 * @param value the new {@code _typeInvariant} child of this {@link AExplicitFunctionDefinition} node
	*/
	public void setTypeInvariant(Boolean value)
	{
		this._typeInvariant = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _typeInvariant} child of this {@link AExplicitFunctionDefinition} node
	*/
	public Boolean getTypeInvariant()
	{
		return this._typeInvariant;
	}


	/**
	* Calls the {@link IAnalysis#caseAExplicitFunctionDefinition(AExplicitFunctionDefinition)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AExplicitFunctionDefinition} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseAExplicitFunctionDefinition(this);
	}


	/**
	* Calls the {@link IAnswer#caseAExplicitFunctionDefinition(AExplicitFunctionDefinition)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AExplicitFunctionDefinition} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAExplicitFunctionDefinition(this);
	}


	/**
	* Calls the {@link IQuestion#caseAExplicitFunctionDefinition(AExplicitFunctionDefinition, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AExplicitFunctionDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAExplicitFunctionDefinition(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAExplicitFunctionDefinition(AExplicitFunctionDefinition, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AExplicitFunctionDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAExplicitFunctionDefinition(this,question);
	}



}
