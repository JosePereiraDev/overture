/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.statements;


import org.overture.ast.statements.PStmBase;
import java.util.HashMap;
import org.overture.ast.statements.AAssignmentStm;
import org.overture.ast.expressions.PExp;
import org.overture.ast.definitions.SClassDefinition;
import org.overture.ast.definitions.AStateDefinition;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.analysis.intf.IAnswer;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import org.overture.ast.statements.PStateDesignator;
import java.lang.String;
import org.overture.ast.types.PType;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AAssignmentStm extends PStmBase
{
	private static final long serialVersionUID = 1L;

	private PStateDesignator _target;
	private PExp _exp;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private PType _targetType;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private PType _expType;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private SClassDefinition _classDefinition;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private AStateDefinition _stateDefinition;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private Boolean _inConstructor;

	/**
	* Creates a new {@code AAssignmentStm} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param target_ the {@link PStateDesignator} node for the {@code target} child of this {@link AAssignmentStm} node
	* @param exp_ the {@link PExp} node for the {@code exp} child of this {@link AAssignmentStm} node
	* @param targetType_ the {@link PType} <b>graph</a> node for the {@code targetType} child of this {@link AAssignmentStm} node.
	*  <i>The parent of this {@code targetType } will not be changed by adding it to this node.</i>
	* @param expType_ the {@link PType} <b>graph</a> node for the {@code expType} child of this {@link AAssignmentStm} node.
	*  <i>The parent of this {@code expType } will not be changed by adding it to this node.</i>
	* @param classDefinition_ the {@link SClassDefinition} <b>graph</a> node for the {@code classDefinition} child of this {@link AAssignmentStm} node.
	*  <i>The parent of this {@code classDefinition } will not be changed by adding it to this node.</i>
	* @param stateDefinition_ the {@link AStateDefinition} <b>graph</a> node for the {@code stateDefinition} child of this {@link AAssignmentStm} node.
	*  <i>The parent of this {@code stateDefinition } will not be changed by adding it to this node.</i>
	* @param inConstructor_ the {@link Boolean} <b>graph</a> node for the {@code inConstructor} child of this {@link AAssignmentStm} node.
	*  <i>The parent of this {@code inConstructor } will not be changed by adding it to this node.</i>
	*/
	public AAssignmentStm(ILexLocation location_, PType type_, PStateDesignator target_, PExp exp_, PType targetType_, PType expType_, SClassDefinition classDefinition_, AStateDefinition stateDefinition_, Boolean inConstructor_)
	{
		super(location_,type_);
		this.setTarget(target_);
		this.setExp(exp_);
		this.setTargetType(targetType_);
		this.setExpType(expType_);
		this.setClassDefinition(classDefinition_);
		this.setStateDefinition(stateDefinition_);
		this.setInConstructor(inConstructor_);

	}


	/**
	* Creates a new {@code AAssignmentStm TAG=assignment} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param target_ the {@link PStateDesignator} node for the {@code target} child of this {@link AAssignmentStm} node
	* @param exp_ the {@link PExp} node for the {@code exp} child of this {@link AAssignmentStm} node
	*/
	public AAssignmentStm(ILexLocation location_, PStateDesignator target_, PExp exp_)
	{
		super(location_,null);
		this.setTarget(target_);
		this.setExp(exp_);
		this.setInConstructor(false);

	}


	/**
	 * Creates a new {@link AAssignmentStm} node with no children.
	 */
	public AAssignmentStm()
	{

	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AAssignmentStm)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_target",this._target);
		fields.put("_exp",this._exp);
		fields.put("_targetType",this._targetType);
		fields.put("_expType",this._expType);
		fields.put("_classDefinition",this._classDefinition);
		fields.put("_stateDefinition",this._stateDefinition);
		fields.put("_inConstructor",this._inConstructor);
		return fields;
	}


	/**
	 * Returns a deep clone of this {@link AAssignmentStm} node.
	 * @return a deep clone of this {@link AAssignmentStm} node
	 */
	public AAssignmentStm clone()
	{
		return new AAssignmentStm(
			_location,
			_type,
			cloneNode(_target),
			cloneNode(_exp),
			_targetType,
			_expType,
			_classDefinition,
			_stateDefinition,
			_inConstructor
		);
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}



	public String toString()
	{
		return "" + _target+" := "+_exp;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AAssignmentStm} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AAssignmentStm} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AAssignmentStm} node
	 */
	public void removeChild(INode child)
	{
		if (this._type == child) {
			return;
		}

		if (this._target == child) {
			this._target = null;
			return;
		}

		if (this._exp == child) {
			this._exp = null;
			return;
		}

		if (this._targetType == child) {
			return;
		}

		if (this._expType == child) {
			return;
		}

		if (this._classDefinition == child) {
			return;
		}

		if (this._stateDefinition == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a deep clone of this {@link AAssignmentStm} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AAssignmentStm} node
	 */
	public AAssignmentStm clone(Map<INode,INode> oldToNewMap)
	{
		AAssignmentStm node = new AAssignmentStm(
			_location,
			_type,
			cloneNode(_target, oldToNewMap),
			cloneNode(_exp, oldToNewMap),
			_targetType,
			_expType,
			_classDefinition,
			_stateDefinition,
			_inConstructor
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Sets the {@code _target} child of this {@link AAssignmentStm} node.
	 * @param value the new {@code _target} child of this {@link AAssignmentStm} node
	*/
	public void setTarget(PStateDesignator value)
	{
		if (this._target != null) {
			this._target.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._target = value;

	}


	/**
	 * @return the {@link PStateDesignator} node which is the {@code _target} child of this {@link AAssignmentStm} node
	*/
	public PStateDesignator getTarget()
	{
		return this._target;
	}


	/**
	 * Sets the {@code _exp} child of this {@link AAssignmentStm} node.
	 * @param value the new {@code _exp} child of this {@link AAssignmentStm} node
	*/
	public void setExp(PExp value)
	{
		if (this._exp != null) {
			this._exp.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._exp = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _exp} child of this {@link AAssignmentStm} node
	*/
	public PExp getExp()
	{
		return this._exp;
	}


	/**
	 * Sets the {@code _targetType} child of this {@link AAssignmentStm} node.
	 * @param value the new {@code _targetType} child of this {@link AAssignmentStm} node
	*/
	public void setTargetType(PType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._targetType = value;

	}


	/**
	 * @return the {@link PType} node which is the {@code _targetType} child of this {@link AAssignmentStm} node
	*/
	public PType getTargetType()
	{
		return this._targetType;
	}


	/**
	 * Sets the {@code _expType} child of this {@link AAssignmentStm} node.
	 * @param value the new {@code _expType} child of this {@link AAssignmentStm} node
	*/
	public void setExpType(PType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._expType = value;

	}


	/**
	 * @return the {@link PType} node which is the {@code _expType} child of this {@link AAssignmentStm} node
	*/
	public PType getExpType()
	{
		return this._expType;
	}


	/**
	 * Sets the {@code _classDefinition} child of this {@link AAssignmentStm} node.
	 * @param value the new {@code _classDefinition} child of this {@link AAssignmentStm} node
	*/
	public void setClassDefinition(SClassDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._classDefinition = value;

	}


	/**
	 * @return the {@link SClassDefinition} node which is the {@code _classDefinition} child of this {@link AAssignmentStm} node
	*/
	public SClassDefinition getClassDefinition()
	{
		return this._classDefinition;
	}


	/**
	 * Sets the {@code _stateDefinition} child of this {@link AAssignmentStm} node.
	 * @param value the new {@code _stateDefinition} child of this {@link AAssignmentStm} node
	*/
	public void setStateDefinition(AStateDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._stateDefinition = value;

	}


	/**
	 * @return the {@link AStateDefinition} node which is the {@code _stateDefinition} child of this {@link AAssignmentStm} node
	*/
	public AStateDefinition getStateDefinition()
	{
		return this._stateDefinition;
	}


	/**
	 * Sets the {@code _inConstructor} child of this {@link AAssignmentStm} node.
	 * @param value the new {@code _inConstructor} child of this {@link AAssignmentStm} node
	*/
	public void setInConstructor(Boolean value)
	{
		this._inConstructor = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _inConstructor} child of this {@link AAssignmentStm} node
	*/
	public Boolean getInConstructor()
	{
		return this._inConstructor;
	}


	/**
	* Calls the {@link IAnalysis#caseAAssignmentStm(AAssignmentStm)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AAssignmentStm} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseAAssignmentStm(this);
	}


	/**
	* Calls the {@link IAnswer#caseAAssignmentStm(AAssignmentStm)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AAssignmentStm} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAAssignmentStm(this);
	}


	/**
	* Calls the {@link IQuestion#caseAAssignmentStm(AAssignmentStm, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AAssignmentStm} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAAssignmentStm(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAAssignmentStm(AAssignmentStm, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AAssignmentStm} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAAssignmentStm(this,question);
	}



}
