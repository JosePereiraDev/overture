/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.definitions;


import org.overture.ast.definitions.PDefinition;
import org.overture.ast.definitions.SFunctionDefinition;
import org.overture.ast.expressions.PExp;
import java.lang.Integer;
import java.util.List;
import org.overture.ast.intf.lex.ILexNameToken;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import java.lang.String;
import java.util.LinkedList;
import org.overture.ast.types.PType;
import org.overture.ast.definitions.AExplicitFunctionDefinition;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public interface SFunctionDefinition extends PDefinition
{
	public String toString();
	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	public Map<String,Object> getChildren(Boolean includeInheritedFields);
	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link SFunctionDefinitionBase} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link SFunctionDefinitionBase} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link SFunctionDefinitionBase} node
	 */
	public void removeChild(INode child);
	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	public int hashCode();
	/**
	 * Creates a deep clone of this {@link SFunctionDefinitionBase} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link SFunctionDefinitionBase} node
	 */
	public abstract SFunctionDefinition clone(Map<INode,INode> oldToNewMap);
	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	public boolean equals(Object o);
	/**
	 * Returns a deep clone of this {@link SFunctionDefinitionBase} node.
	 * @return a deep clone of this {@link SFunctionDefinitionBase} node
	 */
	public abstract SFunctionDefinition clone();
	/**
	 * Sets the {@code _typeParams} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _typeParams} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setTypeParams(List<? extends ILexNameToken> value);
	/**
	 * @return the {@link LinkedList} node which is the {@code _typeParams} child of this {@link SFunctionDefinitionBase} node
	*/
	public LinkedList<ILexNameToken> getTypeParams();
	/**
	 * Sets the {@code _body} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _body} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setBody(PExp value);
	/**
	 * @return the {@link PExp} node which is the {@code _body} child of this {@link SFunctionDefinitionBase} node
	*/
	public PExp getBody();
	/**
	 * Sets the {@code _precondition} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _precondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPrecondition(PExp value);
	/**
	 * @return the {@link PExp} node which is the {@code _precondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public PExp getPrecondition();
	/**
	 * Sets the {@code _postcondition} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _postcondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPostcondition(PExp value);
	/**
	 * @return the {@link PExp} node which is the {@code _postcondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public PExp getPostcondition();
	/**
	 * Sets the {@code _measure} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _measure} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setMeasure(ILexNameToken value);
	/**
	 * @return the {@link ILexNameToken} node which is the {@code _measure} child of this {@link SFunctionDefinitionBase} node
	*/
	public ILexNameToken getMeasure();
	/**
	 * Sets the {@code _predef} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _predef} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPredef(AExplicitFunctionDefinition value);
	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _predef} child of this {@link SFunctionDefinitionBase} node
	*/
	public AExplicitFunctionDefinition getPredef();
	/**
	 * Sets the {@code _postdef} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _postdef} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPostdef(AExplicitFunctionDefinition value);
	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _postdef} child of this {@link SFunctionDefinitionBase} node
	*/
	public AExplicitFunctionDefinition getPostdef();
	/**
	 * Sets the {@code _measureDef} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _measureDef} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setMeasureDef(PDefinition value);
	/**
	 * @return the {@link PDefinition} node which is the {@code _measureDef} child of this {@link SFunctionDefinitionBase} node
	*/
	public PDefinition getMeasureDef();
	/**
	 * Sets the {@code _recursive} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _recursive} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setRecursive(Boolean value);
	/**
	 * @return the {@link Boolean} node which is the {@code _recursive} child of this {@link SFunctionDefinitionBase} node
	*/
	public Boolean getRecursive();
	/**
	 * Sets the {@code _isUndefined} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _isUndefined} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setIsUndefined(Boolean value);
	/**
	 * @return the {@link Boolean} node which is the {@code _isUndefined} child of this {@link SFunctionDefinitionBase} node
	*/
	public Boolean getIsUndefined();
	/**
	 * Sets the {@code _measureLexical} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _measureLexical} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setMeasureLexical(Integer value);
	/**
	 * @return the {@link Integer} node which is the {@code _measureLexical} child of this {@link SFunctionDefinitionBase} node
	*/
	public Integer getMeasureLexical();
	/**
	 * Sets the {@code _expectedResult} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _expectedResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setExpectedResult(PType value);
	/**
	 * @return the {@link PType} node which is the {@code _expectedResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public PType getExpectedResult();
	/**
	 * Sets the {@code _actualResult} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _actualResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setActualResult(PType value);
	/**
	 * @return the {@link PType} node which is the {@code _actualResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public PType getActualResult();

}
