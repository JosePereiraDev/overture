/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.definitions;


import org.overture.ast.definitions.PDefinition;
import org.overture.ast.definitions.SFunctionDefinition;
import org.overture.ast.definitions.PDefinitionBase;
import java.util.HashMap;
import org.overture.ast.expressions.PExp;
import org.overture.ast.definitions.SClassDefinition;
import java.lang.Integer;
import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.typechecker.Pass;
import java.util.List;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.node.NodeList;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import org.overture.ast.typechecker.NameScope;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import java.lang.String;
import org.overture.ast.types.PType;
import java.util.LinkedList;
import org.overture.ast.definitions.AExplicitFunctionDefinition;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public abstract class SFunctionDefinitionBase extends PDefinitionBase implements SFunctionDefinition
{
	private static final long serialVersionUID = 1L;

	protected NodeList<ILexNameToken> _typeParams = new NodeList<ILexNameToken>(this);
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected PExp _body;
	protected PExp _precondition;
	protected PExp _postcondition;
	protected ILexNameToken _measure;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected AExplicitFunctionDefinition _predef;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected AExplicitFunctionDefinition _postdef;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected PDefinition _measureDef;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected Boolean _recursive;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected Boolean _isUndefined;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected Integer _measureLexical;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected PType _expectedResult;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected PType _actualResult;

	/**
	* Creates a new {@code SFunctionDefinitionBase TAG=#Function} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param typeParams_ the {@link NodeList} node for the {@code typeParams} child of this {@link SFunctionDefinitionBase} node
	* @param precondition_ the {@link PExp} node for the {@code precondition} child of this {@link SFunctionDefinitionBase} node
	* @param postcondition_ the {@link PExp} node for the {@code postcondition} child of this {@link SFunctionDefinitionBase} node
	* @param measure_ the {@link ILexNameToken} node for the {@code measure} child of this {@link SFunctionDefinitionBase} node
	*/
	public SFunctionDefinitionBase(ILexLocation location_, NameScope nameScope_, Boolean used_, AAccessSpecifierAccessSpecifier access_, Pass pass_, List<? extends ILexNameToken> typeParams_, PExp precondition_, PExp postcondition_, ILexNameToken measure_)
	{
		super(location_,null,nameScope_,used_,null,access_,null,pass_);
		this.setTypeParams(typeParams_);
		this.setPrecondition(precondition_);
		this.setPostcondition(postcondition_);
		this.setMeasure(measure_);
		this.setRecursive(false);
		this.setIsUndefined(false);
		this.setMeasureLexical(0);

	}


	/**
	* Creates a new {@code SFunctionDefinitionBase} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param typeParams_ the {@link NodeList} node for the {@code typeParams} child of this {@link SFunctionDefinitionBase} node
	* @param body_ the {@link PExp} <b>graph</a> node for the {@code body} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code body } will not be changed by adding it to this node.</i>
	* @param precondition_ the {@link PExp} node for the {@code precondition} child of this {@link SFunctionDefinitionBase} node
	* @param postcondition_ the {@link PExp} node for the {@code postcondition} child of this {@link SFunctionDefinitionBase} node
	* @param measure_ the {@link ILexNameToken} node for the {@code measure} child of this {@link SFunctionDefinitionBase} node
	* @param predef_ the {@link AExplicitFunctionDefinition} <b>graph</a> node for the {@code predef} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code predef } will not be changed by adding it to this node.</i>
	* @param postdef_ the {@link AExplicitFunctionDefinition} <b>graph</a> node for the {@code postdef} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code postdef } will not be changed by adding it to this node.</i>
	* @param measureDef_ the {@link PDefinition} <b>graph</a> node for the {@code measureDef} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code measureDef } will not be changed by adding it to this node.</i>
	* @param recursive_ the {@link Boolean} <b>graph</a> node for the {@code recursive} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code recursive } will not be changed by adding it to this node.</i>
	* @param isUndefined_ the {@link Boolean} <b>graph</a> node for the {@code isUndefined} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code isUndefined } will not be changed by adding it to this node.</i>
	* @param measureLexical_ the {@link Integer} <b>graph</a> node for the {@code measureLexical} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code measureLexical } will not be changed by adding it to this node.</i>
	* @param expectedResult_ the {@link PType} <b>graph</a> node for the {@code expectedResult} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code expectedResult } will not be changed by adding it to this node.</i>
	* @param actualResult_ the {@link PType} <b>graph</a> node for the {@code actualResult} child of this {@link SFunctionDefinitionBase} node.
	*  <i>The parent of this {@code actualResult } will not be changed by adding it to this node.</i>
	*/
	public SFunctionDefinitionBase(ILexLocation location_, ILexNameToken name_, NameScope nameScope_, Boolean used_, SClassDefinition classDefinition_, AAccessSpecifierAccessSpecifier access_, PType type_, Pass pass_, List<? extends ILexNameToken> typeParams_, PExp body_, PExp precondition_, PExp postcondition_, ILexNameToken measure_, AExplicitFunctionDefinition predef_, AExplicitFunctionDefinition postdef_, PDefinition measureDef_, Boolean recursive_, Boolean isUndefined_, Integer measureLexical_, PType expectedResult_, PType actualResult_)
	{
		super(location_,name_,nameScope_,used_,classDefinition_,access_,type_,pass_);
		this.setTypeParams(typeParams_);
		this.setBody(body_);
		this.setPrecondition(precondition_);
		this.setPostcondition(postcondition_);
		this.setMeasure(measure_);
		this.setPredef(predef_);
		this.setPostdef(postdef_);
		this.setMeasureDef(measureDef_);
		this.setRecursive(recursive_);
		this.setIsUndefined(isUndefined_);
		this.setMeasureLexical(measureLexical_);
		this.setExpectedResult(expectedResult_);
		this.setActualResult(actualResult_);

	}


	/**
	 * Creates a new {@link SFunctionDefinitionBase} node with no children.
	 */
	public SFunctionDefinitionBase()
	{

	}



	public String toString()
	{
		return super.toString();

	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_typeParams",this._typeParams);
		fields.put("_body",this._body);
		fields.put("_precondition",this._precondition);
		fields.put("_postcondition",this._postcondition);
		fields.put("_measure",this._measure);
		fields.put("_predef",this._predef);
		fields.put("_postdef",this._postdef);
		fields.put("_measureDef",this._measureDef);
		fields.put("_recursive",this._recursive);
		fields.put("_isUndefined",this._isUndefined);
		fields.put("_measureLexical",this._measureLexical);
		fields.put("_expectedResult",this._expectedResult);
		fields.put("_actualResult",this._actualResult);
		return fields;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link SFunctionDefinitionBase} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link SFunctionDefinitionBase} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link SFunctionDefinitionBase} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			return;
		}

		if (this._classDefinition == child) {
			return;
		}

		if (this._access == child) {
			this._access = null;
			return;
		}

		if (this._type == child) {
			return;
		}

		if (this._typeParams.remove(child)) {
				return;
		}
		if (this._body == child) {
			return;
		}

		if (this._precondition == child) {
			this._precondition = null;
			return;
		}

		if (this._postcondition == child) {
			this._postcondition = null;
			return;
		}

		if (this._measure == child) {
			this._measure = null;
			return;
		}

		if (this._predef == child) {
			return;
		}

		if (this._postdef == child) {
			return;
		}

		if (this._measureDef == child) {
			return;
		}

		if (this._expectedResult == child) {
			return;
		}

		if (this._actualResult == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Creates a deep clone of this {@link SFunctionDefinitionBase} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link SFunctionDefinitionBase} node
	 */
	@Override
	public abstract SFunctionDefinition clone(Map<INode,INode> oldToNewMap);

	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof SFunctionDefinitionBase)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Returns a deep clone of this {@link SFunctionDefinitionBase} node.
	 * @return a deep clone of this {@link SFunctionDefinitionBase} node
	 */
	@Override
	public abstract SFunctionDefinition clone();

	/**
	 * Sets the {@code _typeParams} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _typeParams} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setTypeParams(List<? extends ILexNameToken> value)
	{
		if (this._typeParams.equals(value)) {
			return;
		}
		this._typeParams.clear();
		if (value != null) {
			this._typeParams.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _typeParams} child of this {@link SFunctionDefinitionBase} node
	*/
	public LinkedList<ILexNameToken> getTypeParams()
	{
		return this._typeParams;
	}


	/**
	 * Sets the {@code _body} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _body} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setBody(PExp value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._body = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _body} child of this {@link SFunctionDefinitionBase} node
	*/
	public PExp getBody()
	{
		return this._body;
	}


	/**
	 * Sets the {@code _precondition} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _precondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPrecondition(PExp value)
	{
		if (this._precondition != null) {
			this._precondition.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._precondition = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _precondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public PExp getPrecondition()
	{
		return this._precondition;
	}


	/**
	 * Sets the {@code _postcondition} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _postcondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPostcondition(PExp value)
	{
		if (this._postcondition != null) {
			this._postcondition.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._postcondition = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _postcondition} child of this {@link SFunctionDefinitionBase} node
	*/
	public PExp getPostcondition()
	{
		return this._postcondition;
	}


	/**
	 * Sets the {@code _measure} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _measure} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setMeasure(ILexNameToken value)
	{
		if (this._measure != null) {
			this._measure.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._measure = value;

	}


	/**
	 * @return the {@link ILexNameToken} node which is the {@code _measure} child of this {@link SFunctionDefinitionBase} node
	*/
	public ILexNameToken getMeasure()
	{
		return this._measure;
	}


	/**
	 * Sets the {@code _predef} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _predef} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPredef(AExplicitFunctionDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._predef = value;

	}


	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _predef} child of this {@link SFunctionDefinitionBase} node
	*/
	public AExplicitFunctionDefinition getPredef()
	{
		return this._predef;
	}


	/**
	 * Sets the {@code _postdef} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _postdef} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setPostdef(AExplicitFunctionDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._postdef = value;

	}


	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _postdef} child of this {@link SFunctionDefinitionBase} node
	*/
	public AExplicitFunctionDefinition getPostdef()
	{
		return this._postdef;
	}


	/**
	 * Sets the {@code _measureDef} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _measureDef} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setMeasureDef(PDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._measureDef = value;

	}


	/**
	 * @return the {@link PDefinition} node which is the {@code _measureDef} child of this {@link SFunctionDefinitionBase} node
	*/
	public PDefinition getMeasureDef()
	{
		return this._measureDef;
	}


	/**
	 * Sets the {@code _recursive} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _recursive} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setRecursive(Boolean value)
	{
		this._recursive = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _recursive} child of this {@link SFunctionDefinitionBase} node
	*/
	public Boolean getRecursive()
	{
		return this._recursive;
	}


	/**
	 * Sets the {@code _isUndefined} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _isUndefined} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setIsUndefined(Boolean value)
	{
		this._isUndefined = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _isUndefined} child of this {@link SFunctionDefinitionBase} node
	*/
	public Boolean getIsUndefined()
	{
		return this._isUndefined;
	}


	/**
	 * Sets the {@code _measureLexical} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _measureLexical} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setMeasureLexical(Integer value)
	{
		this._measureLexical = value;
	}


	/**
	 * @return the {@link Integer} node which is the {@code _measureLexical} child of this {@link SFunctionDefinitionBase} node
	*/
	public Integer getMeasureLexical()
	{
		return this._measureLexical;
	}


	/**
	 * Sets the {@code _expectedResult} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _expectedResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setExpectedResult(PType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._expectedResult = value;

	}


	/**
	 * @return the {@link PType} node which is the {@code _expectedResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public PType getExpectedResult()
	{
		return this._expectedResult;
	}


	/**
	 * Sets the {@code _actualResult} child of this {@link SFunctionDefinitionBase} node.
	 * @param value the new {@code _actualResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public void setActualResult(PType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._actualResult = value;

	}


	/**
	 * @return the {@link PType} node which is the {@code _actualResult} child of this {@link SFunctionDefinitionBase} node
	*/
	public PType getActualResult()
	{
		return this._actualResult;
	}



}
