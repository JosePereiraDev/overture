/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.expressions;


import org.overture.ast.expressions.SSeqExpBase;
import org.overture.ast.expressions.ASeqCompSeqExp;
import java.util.HashMap;
import org.overture.ast.expressions.PExp;
import org.overture.ast.patterns.ASetBind;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.analysis.intf.IAnswer;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import java.lang.String;
import org.overture.ast.types.PType;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class ASeqCompSeqExp extends SSeqExpBase
{
	private static final long serialVersionUID = 1L;

	private PExp _first;
	private ASetBind _setBind;
	private PExp _predicate;

	/**
	* Creates a new {@code ASeqCompSeqExp} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param first_ the {@link PExp} node for the {@code first} child of this {@link ASeqCompSeqExp} node
	* @param setBind_ the {@link ASetBind} node for the {@code setBind} child of this {@link ASeqCompSeqExp} node
	* @param predicate_ the {@link PExp} node for the {@code predicate} child of this {@link ASeqCompSeqExp} node
	*/
	public ASeqCompSeqExp(PType type_, ILexLocation location_, PExp first_, ASetBind setBind_, PExp predicate_)
	{
		super(type_,location_);
		this.setFirst(first_);
		this.setSetBind(setBind_);
		this.setPredicate(predicate_);

	}


	/**
	* Creates a new {@code ASeqCompSeqExp TAG=seqComp} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param first_ the {@link PExp} node for the {@code first} child of this {@link ASeqCompSeqExp} node
	* @param setBind_ the {@link ASetBind} node for the {@code setBind} child of this {@link ASeqCompSeqExp} node
	* @param predicate_ the {@link PExp} node for the {@code predicate} child of this {@link ASeqCompSeqExp} node
	*/
	public ASeqCompSeqExp(ILexLocation location_, PExp first_, ASetBind setBind_, PExp predicate_)
	{
		super(null,location_);
		this.setFirst(first_);
		this.setSetBind(setBind_);
		this.setPredicate(predicate_);

	}


	/**
	 * Creates a new {@link ASeqCompSeqExp} node with no children.
	 */
	public ASeqCompSeqExp()
	{

	}


	/**
	 * Returns a deep clone of this {@link ASeqCompSeqExp} node.
	 * @return a deep clone of this {@link ASeqCompSeqExp} node
	 */
	public ASeqCompSeqExp clone()
	{
		return new ASeqCompSeqExp(
			_type,
			_location,
			cloneNode(_first),
			cloneNode(_setBind),
			cloneNode(_predicate)
		);
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_first",this._first);
		fields.put("_setBind",this._setBind);
		fields.put("_predicate",this._predicate);
		return fields;
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link ASeqCompSeqExp} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link ASeqCompSeqExp} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link ASeqCompSeqExp} node
	 */
	public void removeChild(INode child)
	{
		if (this._type == child) {
			return;
		}

		if (this._first == child) {
			this._first = null;
			return;
		}

		if (this._setBind == child) {
			this._setBind = null;
			return;
		}

		if (this._predicate == child) {
			this._predicate = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof ASeqCompSeqExp)		{
			 return toString().equals(o.toString());
		}
		return false;
	}



	public String toString()
	{
		return "" + "["+_first+" | "+_setBind+(_predicate == null ? "]" : " & " + _predicate + "]");
	}


	/**
	 * Creates a deep clone of this {@link ASeqCompSeqExp} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link ASeqCompSeqExp} node
	 */
	public ASeqCompSeqExp clone(Map<INode,INode> oldToNewMap)
	{
		ASeqCompSeqExp node = new ASeqCompSeqExp(
			_type,
			_location,
			cloneNode(_first, oldToNewMap),
			cloneNode(_setBind, oldToNewMap),
			cloneNode(_predicate, oldToNewMap)
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Sets the {@code _first} child of this {@link ASeqCompSeqExp} node.
	 * @param value the new {@code _first} child of this {@link ASeqCompSeqExp} node
	*/
	public void setFirst(PExp value)
	{
		if (this._first != null) {
			this._first.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._first = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _first} child of this {@link ASeqCompSeqExp} node
	*/
	public PExp getFirst()
	{
		return this._first;
	}


	/**
	 * Sets the {@code _setBind} child of this {@link ASeqCompSeqExp} node.
	 * @param value the new {@code _setBind} child of this {@link ASeqCompSeqExp} node
	*/
	public void setSetBind(ASetBind value)
	{
		if (this._setBind != null) {
			this._setBind.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._setBind = value;

	}


	/**
	 * @return the {@link ASetBind} node which is the {@code _setBind} child of this {@link ASeqCompSeqExp} node
	*/
	public ASetBind getSetBind()
	{
		return this._setBind;
	}


	/**
	 * Sets the {@code _predicate} child of this {@link ASeqCompSeqExp} node.
	 * @param value the new {@code _predicate} child of this {@link ASeqCompSeqExp} node
	*/
	public void setPredicate(PExp value)
	{
		if (this._predicate != null) {
			this._predicate.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._predicate = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _predicate} child of this {@link ASeqCompSeqExp} node
	*/
	public PExp getPredicate()
	{
		return this._predicate;
	}


	/**
	* Calls the {@link IAnalysis#caseASeqCompSeqExp(ASeqCompSeqExp)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link ASeqCompSeqExp} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseASeqCompSeqExp(this);
	}


	/**
	* Calls the {@link IAnswer#caseASeqCompSeqExp(ASeqCompSeqExp)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link ASeqCompSeqExp} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseASeqCompSeqExp(this);
	}


	/**
	* Calls the {@link IQuestion#caseASeqCompSeqExp(ASeqCompSeqExp, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link ASeqCompSeqExp} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseASeqCompSeqExp(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseASeqCompSeqExp(ASeqCompSeqExp, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link ASeqCompSeqExp} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseASeqCompSeqExp(this,question);
	}



}
