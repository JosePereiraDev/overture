/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.types;


import org.overture.ast.definitions.PDefinition;
import org.overture.ast.intf.lex.ILexLocation;
import java.util.List;
import org.overture.ast.types.SInvariantType;
import java.util.Map;
import org.overture.ast.types.PTypeBase;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import java.util.HashMap;
import java.lang.String;
import org.overture.ast.definitions.AExplicitFunctionDefinition;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public abstract class SInvariantTypeBase extends PTypeBase implements SInvariantType
{
	private static final long serialVersionUID = 1L;

	protected Boolean _inNarrower;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected Boolean _opaque;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	protected AExplicitFunctionDefinition _invDef;

	/**
	 * Creates a new {@link SInvariantTypeBase} node with no children.
	 */
	public SInvariantTypeBase()
	{

	}


	/**
	* Creates a new {@code SInvariantTypeBase} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param inNarrower_ the {@link Boolean} node for the {@code inNarrower} child of this {@link SInvariantTypeBase} node
	* @param opaque_ the {@link Boolean} <b>graph</a> node for the {@code opaque} child of this {@link SInvariantTypeBase} node.
	*  <i>The parent of this {@code opaque } will not be changed by adding it to this node.</i>
	* @param invDef_ the {@link AExplicitFunctionDefinition} <b>graph</a> node for the {@code invDef} child of this {@link SInvariantTypeBase} node.
	*  <i>The parent of this {@code invDef } will not be changed by adding it to this node.</i>
	*/
	public SInvariantTypeBase(ILexLocation location_, Boolean resolved_, List<? extends PDefinition> definitions_, Boolean inNarrower_, Boolean opaque_, AExplicitFunctionDefinition invDef_)
	{
		super(location_,resolved_,definitions_);
		this.setInNarrower(inNarrower_);
		this.setOpaque(opaque_);
		this.setInvDef(invDef_);

	}


	/**
	* Creates a new {@code SInvariantTypeBase TAG=#invariant} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param inNarrower_ the {@link Boolean} node for the {@code inNarrower} child of this {@link SInvariantTypeBase} node
	*/
	public SInvariantTypeBase(ILexLocation location_, Boolean resolved_, Boolean inNarrower_)
	{
		super(location_,resolved_,null);
		this.setInNarrower(inNarrower_);
		this.setOpaque(false);

	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}



	public String toString()
	{
		return super.toString();

	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof SInvariantTypeBase)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link SInvariantTypeBase} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link SInvariantTypeBase} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link SInvariantTypeBase} node
	 */
	public void removeChild(INode child)
	{
		if (this._definitions.contains(child)) {
			return;
		}

		if (this._invDef == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Returns a deep clone of this {@link SInvariantTypeBase} node.
	 * @return a deep clone of this {@link SInvariantTypeBase} node
	 */
	@Override
	public abstract SInvariantType clone();

	/**
	 * Creates a deep clone of this {@link SInvariantTypeBase} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link SInvariantTypeBase} node
	 */
	@Override
	public abstract SInvariantType clone(Map<INode,INode> oldToNewMap);

	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_inNarrower",this._inNarrower);
		fields.put("_opaque",this._opaque);
		fields.put("_invDef",this._invDef);
		return fields;
	}


	/**
	 * Sets the {@code _inNarrower} child of this {@link SInvariantTypeBase} node.
	 * @param value the new {@code _inNarrower} child of this {@link SInvariantTypeBase} node
	*/
	public void setInNarrower(Boolean value)
	{
		this._inNarrower = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _inNarrower} child of this {@link SInvariantTypeBase} node
	*/
	public Boolean getInNarrower()
	{
		return this._inNarrower;
	}


	/**
	 * Sets the {@code _opaque} child of this {@link SInvariantTypeBase} node.
	 * @param value the new {@code _opaque} child of this {@link SInvariantTypeBase} node
	*/
	public void setOpaque(Boolean value)
	{
		this._opaque = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _opaque} child of this {@link SInvariantTypeBase} node
	*/
	public Boolean getOpaque()
	{
		return this._opaque;
	}


	/**
	 * Sets the {@code _invDef} child of this {@link SInvariantTypeBase} node.
	 * @param value the new {@code _invDef} child of this {@link SInvariantTypeBase} node
	*/
	public void setInvDef(AExplicitFunctionDefinition value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._invDef = value;

	}


	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _invDef} child of this {@link SInvariantTypeBase} node
	*/
	public AExplicitFunctionDefinition getInvDef()
	{
		return this._invDef;
	}



}
