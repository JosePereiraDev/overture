/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.analysis;


import org.overture.ast.intf.lex.ILexIdentifierToken;
import org.overture.ast.modules.AOperationValueImport;
import org.overture.ast.expressions.ACasesExp;
import org.overture.ast.expressions.AUnaryPlusUnaryExp;
import org.overture.ast.expressions.ALetDefExp;
import org.overture.ast.expressions.PModifier;
import org.overture.ast.definitions.ARenamedDefinition;
import org.overture.ast.statements.AAssignmentStm;
import org.overture.ast.statements.AFieldObjectDesignator;
import org.overture.ast.expressions.AIsOfBaseClassExp;
import java.lang.Integer;
import org.overture.ast.definitions.AInstanceVariableDefinition;
import org.overture.ast.expressions.AUndefinedExp;
import org.overture.ast.expressions.ASubtractNumericBinaryExp;
import org.overture.ast.patterns.PPattern;
import org.overture.ast.definitions.PAccess;
import org.overture.ast.definitions.traces.PTraceCoreDefinition;
import java.lang.Long;
import org.overture.ast.expressions.ALetBeStExp;
import org.overture.ast.expressions.AIotaExp;
import org.overture.ast.expressions.AElementsUnaryExp;
import org.overture.ast.types.ASetType;
import org.overture.ast.definitions.ATypeDefinition;
import org.overture.ast.statements.PStmtAlternative;
import org.overture.ast.types.SBasicType;
import org.overture.ast.expressions.SBinaryExp;
import org.overture.ast.definitions.traces.AConcurrentExpressionTraceCoreDefinition;
import org.overture.ast.expressions.AMapInverseUnaryExp;
import org.overture.ast.expressions.AMapUnionBinaryExp;
import org.overture.ast.types.AUnresolvedType;
import org.overture.ast.types.ARealNumericBasicType;
import org.overture.ast.patterns.AObjectPattern;
import org.overture.ast.statements.ACyclesStm;
import org.overture.ast.expressions.AExists1Exp;
import org.overture.ast.expressions.ATupleExp;
import org.overture.ast.patterns.AIntegerPattern;
import org.overture.ast.node.tokens.TStatic;
import org.overture.ast.expressions.ABooleanConstExp;
import org.overture.ast.patterns.ATypeBind;
import org.overture.ast.expressions.SMapExp;
import org.overture.ast.expressions.PExp;
import org.overture.ast.statements.ANonDeterministicSimpleBlockStm;
import org.overture.ast.expressions.AAbsoluteUnaryExp;
import org.overture.ast.statements.AApplyObjectDesignator;
import org.overture.ast.expressions.AIsExp;
import org.overture.ast.types.AOptionalType;
import org.overture.ast.types.AUnionType;
import org.overture.ast.definitions.APrivateAccess;
import org.overture.ast.definitions.traces.ALetBeStBindingTraceDefinition;
import org.overture.ast.modules.PModules;
import org.overture.ast.definitions.AImplicitFunctionDefinition;
import org.overture.ast.types.AVoidType;
import org.overture.ast.patterns.ATuplePattern;
import org.overture.ast.statements.ACallStm;
import org.overture.ast.statements.ASelfObjectDesignator;
import org.overture.ast.typechecker.ClassDefinitionSettings;
import org.overture.ast.statements.AFieldStateDesignator;
import org.overture.ast.types.AVoidReturnType;
import org.overture.ast.patterns.AStringPattern;
import org.overture.ast.definitions.APublicAccess;
import org.overture.ast.expressions.ADomainResByBinaryExp;
import org.overture.ast.patterns.AMapletPatternMaplet;
import org.overture.ast.expressions.ACardinalityUnaryExp;
import org.overture.ast.types.ABooleanBasicType;
import org.overture.ast.definitions.traces.AInstanceTraceDefinition;
import org.overture.ast.statements.ASubclassResponsibilityStm;
import org.overture.ast.expressions.SSeqExp;
import org.overture.ast.expressions.ASetEnumSetExp;
import org.overture.ast.patterns.PMultipleBind;
import org.overture.ast.expressions.ADefExp;
import org.overture.ast.types.AFunctionType;
import org.overture.ast.expressions.AProperSubsetBinaryExp;
import org.overture.ast.types.AUnknownType;
import org.overture.ast.modules.AModuleExports;
import org.overture.ast.expressions.ATimeExp;
import org.overture.ast.definitions.traces.AApplyExpressionTraceCoreDefinition;
import org.overture.ast.expressions.AImpliesBooleanBinaryExp;
import org.overture.ast.statements.ACaseAlternativeStm;
import org.overture.ast.patterns.ANamePatternPair;
import org.overture.ast.definitions.AStateDefinition;
import org.overture.ast.patterns.ASetBind;
import org.overture.ast.types.SSeqType;
import org.overture.ast.statements.AForAllStm;
import org.overture.ast.expressions.AGreaterNumericBinaryExp;
import org.overture.ast.expressions.ASetCompSetExp;
import org.overture.ast.patterns.AUnionPattern;
import org.overture.ast.expressions.AHeadUnaryExp;
import org.overture.ast.types.AUndefinedType;
import org.overture.ast.expressions.AFieldExp;
import org.overture.ast.patterns.ARealPattern;
import org.overture.ast.definitions.APerSyncDefinition;
import org.overture.ast.definitions.ABusClassDefinition;
import org.overture.ast.analysis.intf.IAnalysis;
import org.overture.ast.statements.ACasesStm;
import org.overture.ast.node.IToken;
import org.overture.ast.expressions.AMapRangeUnaryExp;
import org.overture.ast.statements.AIdentifierStateDesignator;
import org.overture.ast.intf.lex.ILexToken;
import org.overture.ast.expressions.AFloorUnaryExp;
import org.overture.ast.definitions.AExplicitOperationDefinition;
import org.overture.ast.statements.AMapSeqStateDesignator;
import org.overture.ast.patterns.APatternListTypePair;
import org.overture.ast.patterns.AMapPattern;
import org.overture.ast.expressions.ASubsetBinaryExp;
import org.overture.ast.statements.AReturnStm;
import org.overture.ast.modules.SValueImport;
import org.overture.ast.expressions.AStarStarBinaryExp;
import org.overture.ast.types.PAccessSpecifier;
import org.overture.ast.modules.AFunctionValueImport;
import org.overture.ast.statements.AElseIfStm;
import org.overture.ast.modules.AOperationExport;
import org.overture.ast.types.ANatOneNumericBasicType;
import org.overture.ast.expressions.SBooleanBinaryExp;
import org.overture.ast.intf.lex.ILexStringToken;
import org.overture.ast.expressions.ADistIntersectUnaryExp;
import org.overture.ast.statements.SSimpleBlockStm;
import org.overture.ast.patterns.ARecordPattern;
import org.overture.ast.expressions.APlusNumericBinaryExp;
import org.overture.ast.modules.AValueValueImport;
import org.overture.ast.types.ANamedInvariantType;
import org.overture.ast.expressions.ACaseAlternative;
import org.overture.ast.types.ARecordInvariantType;
import org.overture.ast.types.ASeqSeqType;
import org.overture.ast.patterns.PMaplet;
import org.overture.ast.expressions.ASameClassExp;
import org.overture.ast.expressions.ASetIntersectBinaryExp;
import org.overture.ast.patterns.ABooleanPattern;
import org.overture.ast.expressions.AForAllExp;
import org.overture.ast.definitions.traces.ATraceDefinitionTerm;
import org.overture.ast.expressions.ASelfExp;
import org.overture.ast.statements.AForPatternBindStm;
import org.overture.ast.modules.PImports;
import org.overture.ast.statements.PObjectDesignator;
import org.overture.ast.expressions.ASubseqExp;
import org.overture.ast.types.AMapMapType;
import org.overture.ast.statements.ACallObjectStm;
import org.overture.ast.expressions.SNumericBinaryExp;
import org.overture.ast.definitions.PDefinition;
import org.overture.ast.expressions.ASeqConcatBinaryExp;
import org.overture.ast.statements.AAlwaysStm;
import org.overture.ast.expressions.APostOpExp;
import org.overture.ast.statements.PClause;
import org.overture.ast.types.ASeq1SeqType;
import org.overture.ast.definitions.ANamedTraceDefinition;
import org.overture.ast.expressions.ALessEqualNumericBinaryExp;
import org.overture.ast.statements.AAtomicStm;
import org.overture.ast.expressions.ARangeResToBinaryExp;
import org.overture.ast.expressions.ASetRangeSetExp;
import org.overture.ast.statements.ABlockSimpleBlockStm;
import org.overture.ast.definitions.SClassDefinition;
import org.overture.ast.types.ARationalNumericBasicType;
import org.overture.ast.statements.ATixeStmtAlternative;
import org.overture.ast.expressions.AFuncInstatiationExp;
import org.overture.ast.types.AProductType;
import org.overture.ast.statements.PCase;
import org.overture.ast.typechecker.Pass;
import org.overture.ast.expressions.AGreaterEqualNumericBinaryExp;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import org.overture.ast.statements.AExternalClause;
import java.lang.Boolean;
import java.util.LinkedList;
import org.overture.ast.definitions.AValueDefinition;
import org.overture.ast.definitions.traces.ABracketedExpressionTraceCoreDefinition;
import org.overture.ast.expressions.AExistsExp;
import org.overture.ast.expressions.AThreadIdExp;
import org.overture.ast.expressions.ACompBinaryExp;
import org.overture.ast.expressions.ARealLiteralExp;
import org.overture.ast.statements.ATixeStm;
import org.overture.ast.definitions.traces.PTerm;
import org.overture.ast.intf.lex.ILexQuoteToken;
import org.overture.ast.expressions.ANotEqualBinaryExp;
import org.overture.ast.expressions.AElseIfExp;
import org.overture.ast.expressions.ASameBaseClassExp;
import org.overture.ast.types.PField;
import org.overture.ast.expressions.APowerSetUnaryExp;
import org.overture.ast.types.PType;
import org.overture.ast.patterns.AIgnorePattern;
import org.overture.ast.statements.AWhileStm;
import org.overture.ast.statements.AIfStm;
import org.overture.ast.statements.APeriodicStm;
import org.overture.ast.patterns.AMapUnionPattern;
import org.overture.ast.statements.ALetBeStStm;
import org.overture.ast.modules.AModuleImports;
import org.overture.ast.expressions.AIntLiteralExp;
import org.overture.ast.expressions.ATimesNumericBinaryExp;
import org.overture.ast.expressions.AMapEnumMapExp;
import org.overture.ast.expressions.AIfExp;
import org.overture.ast.patterns.ADefPatternBind;
import org.overture.ast.statements.ANewObjectDesignator;
import org.overture.ast.statements.AStartStm;
import org.overture.ast.statements.ANotYetSpecifiedStm;
import org.overture.ast.statements.AClassInvariantStm;
import org.overture.ast.expressions.AMkBasicExp;
import org.overture.ast.expressions.APreOpExp;
import org.overture.ast.modules.PExport;
import org.overture.ast.modules.ATypeExport;
import org.overture.ast.expressions.ADistMergeUnaryExp;
import org.overture.ast.definitions.AMutexSyncDefinition;
import org.overture.ast.definitions.SFunctionDefinition;
import org.overture.ast.definitions.AInheritedDefinition;
import java.util.Set;
import org.overture.ast.modules.AFunctionExport;
import org.overture.ast.patterns.AConcatenationPattern;
import org.overture.ast.expressions.ALenUnaryExp;
import org.overture.ast.expressions.AApplyExp;
import org.overture.ast.expressions.AFieldNumberExp;
import org.overture.ast.patterns.ASetMultipleBind;
import org.overture.ast.modules.AAllImport;
import org.overture.ast.modules.PExports;
import org.overture.ast.expressions.ANewExp;
import org.overture.ast.definitions.AMultiBindListDefinition;
import org.overture.ast.expressions.ADivideNumericBinaryExp;
import org.overture.ast.expressions.AVariableExp;
import org.overture.ast.expressions.ADomainResToBinaryExp;
import org.overture.ast.statements.ADurationStm;
import org.overture.ast.expressions.ASubclassResponsibilityExp;
import org.overture.ast.definitions.AUntypedDefinition;
import org.overture.ast.expressions.ASetDifferenceBinaryExp;
import org.overture.ast.expressions.AIsOfClassExp;
import org.overture.ast.expressions.ADivNumericBinaryExp;
import org.overture.ast.definitions.AImplicitOperationDefinition;
import org.overture.ast.patterns.AExpressionPattern;
import org.overture.ast.intf.lex.ILexIntegerToken;
import java.util.ArrayList;
import org.overture.ast.types.AFieldField;
import org.overture.ast.types.ATokenBasicType;
import org.overture.ast.expressions.AModNumericBinaryExp;
import java.lang.String;
import org.overture.ast.expressions.ANilExp;
import org.overture.ast.definitions.AClassClassDefinition;
import org.overture.ast.node.tokens.TAsync;
import org.overture.ast.expressions.ARangeResByBinaryExp;
import org.overture.ast.types.ABracketType;
import org.overture.ast.statements.AStopStm;
import org.overture.ast.expressions.ASeqCompSeqExp;
import org.overture.ast.expressions.AOrBooleanBinaryExp;
import org.overture.ast.definitions.AClassInvariantDefinition;
import org.overture.ast.expressions.AMkTypeExp;
import org.overture.ast.statements.AIdentifierObjectDesignator;
import org.overture.ast.expressions.AMapletExp;
import org.overture.ast.expressions.APreExp;
import org.overture.ast.expressions.AMapDomainUnaryExp;
import org.overture.ast.types.AInMapMapType;
import org.overture.ast.expressions.ASeqEnumSeqExp;
import org.overture.ast.definitions.ASystemClassDefinition;
import org.overture.ast.intf.lex.ILexLocation;
import org.overture.ast.expressions.AAndBooleanBinaryExp;
import org.overture.ast.types.AQuoteType;
import org.overture.ast.expressions.AQuoteLiteralExp;
import org.overture.ast.statements.AErrorStm;
import org.overture.ast.expressions.SSetExp;
import org.overture.ast.patterns.PBind;
import org.overture.ast.types.AOperationType;
import org.overture.ast.util.ClonableString;
import org.overture.ast.util.ClonableFile;
import org.overture.ast.expressions.ADistConcatUnaryExp;
import org.overture.ast.expressions.ANotInSetBinaryExp;
import org.overture.ast.types.SInvariantType;
import org.overture.ast.expressions.APlusPlusBinaryExp;
import org.overture.ast.expressions.AEquivalentBooleanBinaryExp;
import org.overture.ast.definitions.ALocalDefinition;
import org.overture.ast.modules.AAllExport;
import org.overture.ast.expressions.AIndicesUnaryExp;
import org.overture.ast.types.AIntNumericBasicType;
import org.overture.ast.definitions.AThreadDefinition;
import org.overture.ast.analysis.intf.IAnswer;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.statements.ALetStm;
import org.overture.ast.types.AParameterType;
import org.overture.ast.node.INode;
import org.overture.ast.patterns.PPair;
import org.overture.ast.statements.ASporadicStm;
import org.overture.ast.statements.ATrapStm;
import org.overture.ast.intf.lex.ILexRealToken;
import org.overture.ast.definitions.ACpuClassDefinition;
import org.overture.ast.statements.AForIndexStm;
import org.overture.ast.patterns.ASeqPattern;
import org.overture.ast.modules.ATypeImport;
import org.overture.ast.types.SMapType;
import org.overture.ast.patterns.ATypeMultipleBind;
import org.overture.ast.definitions.AAssignmentDefinition;
import org.overture.ast.definitions.AImportedDefinition;
import org.overture.ast.intf.lex.ILexBooleanToken;
import org.overture.ast.expressions.ACharLiteralExp;
import org.overture.ast.expressions.ANarrowExp;
import org.overture.ast.analysis.AnalysisException;
import java.util.List;
import org.overture.ast.expressions.ANotUnaryExp;
import org.overture.ast.definitions.AProtectedAccess;
import org.overture.ast.definitions.SOperationDefinition;
import org.overture.ast.typechecker.NameScope;
import org.overture.ast.definitions.AExternalDefinition;
import org.overture.ast.expressions.AMuExp;
import org.overture.ast.expressions.SUnaryExp;
import org.overture.ast.expressions.AUnaryMinusUnaryExp;
import org.overture.ast.types.AClassType;
import org.overture.ast.statements.AExitStm;
import org.overture.ast.expressions.AReverseUnaryExp;
import org.overture.ast.statements.PStm;
import org.overture.ast.expressions.ASetUnionBinaryExp;
import org.overture.ast.expressions.ALambdaExp;
import org.overture.ast.modules.PImport;
import org.overture.ast.types.ANatNumericBasicType;
import org.overture.ast.definitions.traces.ARepeatTraceDefinition;
import org.overture.ast.expressions.ARemNumericBinaryExp;
import org.overture.ast.patterns.AIdentifierPattern;
import org.overture.ast.expressions.AHistoryExp;
import org.overture.ast.expressions.ALessNumericBinaryExp;
import org.overture.ast.patterns.ACharacterPattern;
import org.overture.ast.expressions.AStringLiteralExp;
import org.overture.ast.expressions.AEqualsBinaryExp;
import org.overture.ast.expressions.AMapCompMapExp;
import org.overture.ast.intf.lex.ILexCharacterToken;
import org.overture.ast.expressions.ATailUnaryExp;
import org.overture.ast.statements.ASkipStm;
import org.overture.ast.patterns.AQuotePattern;
import org.overture.ast.statements.PStateDesignator;
import org.overture.ast.statements.ASpecificationStm;
import org.overture.ast.expressions.ANotYetSpecifiedExp;
import org.overture.ast.definitions.traces.PTraceDefinition;
import org.overture.ast.modules.AModuleModules;
import org.overture.ast.types.SNumericBasicType;
import org.overture.ast.patterns.ASetPattern;
import org.overture.ast.definitions.AEqualsDefinition;
import org.overture.ast.types.ACharBasicType;
import org.overture.ast.modules.AFromModuleImports;
import org.overture.ast.statements.PAlternativeStm;
import org.overture.ast.definitions.traces.ALetDefBindingTraceDefinition;
import org.overture.ast.expressions.ADistUnionUnaryExp;
import org.overture.ast.expressions.AStateInitExp;
import org.overture.ast.patterns.ANilPattern;
import org.overture.ast.modules.AValueExport;
import org.overture.ast.expressions.ARecordModifier;
import org.overture.ast.expressions.AInSetBinaryExp;
import org.overture.ast.patterns.PPatternBind;
import org.overture.ast.statements.AErrorCase;
import org.overture.ast.definitions.AExplicitFunctionDefinition;
import org.overture.ast.patterns.APatternTypePair;
import org.overture.ast.expressions.PAlternative;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
@SuppressWarnings({"all"})
public abstract class DepthFirstAnalysisAdaptorAnswer<A> implements IAnswer<A>
{
	private static final long serialVersionUID = 1L;

	protected Set<INode> _visitedNodes = new java.util.HashSet<INode>();
	final protected IAnswer<A> THIS;

	/**
	* Creates a new {@code DepthFirstAnalysisAdaptorAnswer} node with the given nodes as children.
	* The basic child nodes are removed from their previous parents.
	* @param visitedNodes_ the {@link Set} node for the {@code visitedNodes} child of this {@link DepthFirstAnalysisAdaptorAnswer} node
	* @param THIS_ the {@link IAnswer} <b>graph</a> node for the {@code THIS} child of this {@link DepthFirstAnalysisAdaptorAnswer} node.
	*  <i>The parent of this {@code THIS } will not be changed by adding it to this node.</i>
	*/
	public DepthFirstAnalysisAdaptorAnswer(Set<INode> visitedNodes_, IAnswer<A> THIS_)
	{
		super();
		this.setVisitedNodes(visitedNodes_);
		this.THIS = THIS_;

	}


	/**
	 * Creates a new {@link DepthFirstAnalysisAdaptorAnswer} node with no children.
	 */
	public DepthFirstAnalysisAdaptorAnswer()
	{
		this.THIS=this;

	}


	/**
	 * Sets the {@code _visitedNodes} child of this {@link DepthFirstAnalysisAdaptorAnswer} node.
	 * @param value the new {@code _visitedNodes} child of this {@link DepthFirstAnalysisAdaptorAnswer} node
	*/
	public void setVisitedNodes(Set<INode> value)
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexToken(ILexToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexToken(node));


		mergeReturns(retVal,outILexToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexToken(ILexToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexToken(ILexToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexNameToken(ILexNameToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexNameToken(node));


		mergeReturns(retVal,outILexNameToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexNameToken(ILexNameToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexNameToken(ILexNameToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexIdentifierToken(ILexIdentifierToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexIdentifierToken(node));


		mergeReturns(retVal,outILexIdentifierToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexIdentifierToken(ILexIdentifierToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexIdentifierToken(ILexIdentifierToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexBooleanToken(ILexBooleanToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexBooleanToken(node));


		mergeReturns(retVal,outILexBooleanToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexBooleanToken(ILexBooleanToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexBooleanToken(ILexBooleanToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexCharacterToken(ILexCharacterToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexCharacterToken(node));


		mergeReturns(retVal,outILexCharacterToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexCharacterToken(ILexCharacterToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexCharacterToken(ILexCharacterToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexIntegerToken(ILexIntegerToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexIntegerToken(node));


		mergeReturns(retVal,outILexIntegerToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexIntegerToken(ILexIntegerToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexIntegerToken(ILexIntegerToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexQuoteToken(ILexQuoteToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexQuoteToken(node));


		mergeReturns(retVal,outILexQuoteToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexQuoteToken(ILexQuoteToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexQuoteToken(ILexQuoteToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexRealToken(ILexRealToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexRealToken(node));


		mergeReturns(retVal,outILexRealToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexRealToken(ILexRealToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexRealToken(ILexRealToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexStringToken(ILexStringToken node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexStringToken(node));


		mergeReturns(retVal,outILexStringToken(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexStringToken(ILexStringToken node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexStringToken(ILexStringToken node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseILexLocation(ILexLocation node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inILexLocation(node));


		mergeReturns(retVal,outILexLocation(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inILexLocation(ILexLocation node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outILexLocation(ILexLocation node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseClonableFile(ClonableFile node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inClonableFile(node));


		mergeReturns(retVal,outClonableFile(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inClonableFile(ClonableFile node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outClonableFile(ClonableFile node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseClonableString(ClonableString node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inClonableString(node));


		mergeReturns(retVal,outClonableString(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inClonableString(ClonableString node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outClonableString(ClonableString node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseClassDefinitionSettings(ClassDefinitionSettings node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inClassDefinitionSettings(node));


		mergeReturns(retVal,outClassDefinitionSettings(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inClassDefinitionSettings(ClassDefinitionSettings node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outClassDefinitionSettings(ClassDefinitionSettings node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseNameScope(NameScope node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inNameScope(node));


		mergeReturns(retVal,outNameScope(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inNameScope(NameScope node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outNameScope(NameScope node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A casePass(Pass node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inPass(node));


		mergeReturns(retVal,outPass(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inPass(Pass node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outPass(Pass node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseBoolean(Boolean node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inBoolean(node));


		mergeReturns(retVal,outBoolean(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inBoolean(Boolean node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outBoolean(Boolean node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseInteger(Integer node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inInteger(node));


		mergeReturns(retVal,outInteger(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inInteger(Integer node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outInteger(Integer node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseString(String node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inString(node));


		mergeReturns(retVal,outString(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inString(String node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outString(String node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseLong(Long node) throws AnalysisException
	{
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inLong(node));


		mergeReturns(retVal,outLong(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inLong(Long node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outLong(Long node) throws AnalysisException
	{
		return null;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseTStatic(TStatic node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inTStatic(node));


		mergeReturns(retVal,outTStatic(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inTStatic(TStatic node) throws AnalysisException
	{
		return defaultInIToken(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outTStatic(TStatic node) throws AnalysisException
	{
		return defaultOutIToken(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A caseTAsync(TAsync node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inTAsync(node));


		mergeReturns(retVal,outTAsync(node));
		return retVal;
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A inTAsync(TAsync node) throws AnalysisException
	{
		return defaultInIToken(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A outTAsync(TAsync node) throws AnalysisException
	{
		return defaultOutIToken(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public A defaultInPExp(PExp node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public A defaultOutPExp(PExp node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public A defaultPExp(PExp node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public A inPExp(PExp node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public A outPExp(PExp node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AApplyExp} node from {@link AApplyExp#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExp} node
	*/
	public A caseAApplyExp(AApplyExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAApplyExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getRoot() != null && !_visitedNodes.contains(node.getRoot())) 
		{
			mergeReturns(retVal,node.getRoot().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getArgtypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getRecursive() != null && !_visitedNodes.contains(node.getRecursive())) 
		{
			mergeReturns(retVal,node.getRecursive().apply(this));
		}

		mergeReturns(retVal,outAApplyExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AApplyExp} node from {@link AApplyExp#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExp} node
	*/
	public A inAApplyExp(AApplyExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AApplyExp} node from {@link AApplyExp#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExp} node
	*/
	public A outAApplyExp(AApplyExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ANarrowExp} node from {@link ANarrowExp#apply(IAnalysis)}.
	* @param node the calling {@link ANarrowExp} node
	*/
	public A caseANarrowExp(ANarrowExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANarrowExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTest() != null && !_visitedNodes.contains(node.getTest())) 
		{
			mergeReturns(retVal,node.getTest().apply(this));
		}
		if(node.getTypeName() != null ) 
		{
			mergeReturns(retVal,node.getTypeName().apply(this));
		}
		if(node.getBasicType() != null && !_visitedNodes.contains(node.getBasicType())) 
		{
			mergeReturns(retVal,node.getBasicType().apply(this));
		}
		if(node.getTypedef() != null && !_visitedNodes.contains(node.getTypedef())) 
		{
			mergeReturns(retVal,node.getTypedef().apply(this));
		}

		mergeReturns(retVal,outANarrowExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ANarrowExp} node from {@link ANarrowExp#apply(IAnalysis)}.
	* @param node the calling {@link ANarrowExp} node
	*/
	public A inANarrowExp(ANarrowExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ANarrowExp} node from {@link ANarrowExp#apply(IAnalysis)}.
	* @param node the calling {@link ANarrowExp} node
	*/
	public A outANarrowExp(ANarrowExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SUnaryExp} node from {@link SUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExp} node
	*/
	public A defaultInSUnaryExp(SUnaryExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SUnaryExp} node from {@link SUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExp} node
	*/
	public A defaultOutSUnaryExp(SUnaryExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SUnaryExp} node from {@link SUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExp} node
	*/
	public A defaultSUnaryExp(SUnaryExp node) throws AnalysisException
	{
		return defaultPExp(node);
	}


	/**
	* Called by the {@link SUnaryExp} node from {@link SUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExp} node
	*/
	public A inSUnaryExp(SUnaryExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SUnaryExp} node from {@link SUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SUnaryExp} node
	*/
	public A outSUnaryExp(SUnaryExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SBinaryExp} node from {@link SBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExp} node
	*/
	public A defaultInSBinaryExp(SBinaryExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SBinaryExp} node from {@link SBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExp} node
	*/
	public A defaultOutSBinaryExp(SBinaryExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SBinaryExp} node from {@link SBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExp} node
	*/
	public A defaultSBinaryExp(SBinaryExp node) throws AnalysisException
	{
		return defaultPExp(node);
	}


	/**
	* Called by the {@link SBinaryExp} node from {@link SBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExp} node
	*/
	public A inSBinaryExp(SBinaryExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SBinaryExp} node from {@link SBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBinaryExp} node
	*/
	public A outSBinaryExp(SBinaryExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ABooleanConstExp} node from {@link ABooleanConstExp#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanConstExp} node
	*/
	public A caseABooleanConstExp(ABooleanConstExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABooleanConstExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outABooleanConstExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ABooleanConstExp} node from {@link ABooleanConstExp#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanConstExp} node
	*/
	public A inABooleanConstExp(ABooleanConstExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ABooleanConstExp} node from {@link ABooleanConstExp#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanConstExp} node
	*/
	public A outABooleanConstExp(ABooleanConstExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ACasesExp} node from {@link ACasesExp#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExp} node
	*/
	public A caseACasesExp(ACasesExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACasesExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}
		{
			List<ACaseAlternative> copy = new ArrayList<ACaseAlternative>(node.getCases());
			for( ACaseAlternative e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getOthers() != null && !_visitedNodes.contains(node.getOthers())) 
		{
			mergeReturns(retVal,node.getOthers().apply(this));
		}

		mergeReturns(retVal,outACasesExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ACasesExp} node from {@link ACasesExp#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExp} node
	*/
	public A inACasesExp(ACasesExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ACasesExp} node from {@link ACasesExp#apply(IAnalysis)}.
	* @param node the calling {@link ACasesExp} node
	*/
	public A outACasesExp(ACasesExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ACharLiteralExp} node from {@link ACharLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExp} node
	*/
	public A caseACharLiteralExp(ACharLiteralExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharLiteralExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outACharLiteralExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharLiteralExp} node from {@link ACharLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExp} node
	*/
	public A inACharLiteralExp(ACharLiteralExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ACharLiteralExp} node from {@link ACharLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ACharLiteralExp} node
	*/
	public A outACharLiteralExp(ACharLiteralExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AElseIfExp} node from {@link AElseIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfExp} node
	*/
	public A caseAElseIfExp(AElseIfExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAElseIfExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getElseIf() != null && !_visitedNodes.contains(node.getElseIf())) 
		{
			mergeReturns(retVal,node.getElseIf().apply(this));
		}
		if(node.getThen() != null && !_visitedNodes.contains(node.getThen())) 
		{
			mergeReturns(retVal,node.getThen().apply(this));
		}

		mergeReturns(retVal,outAElseIfExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AElseIfExp} node from {@link AElseIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfExp} node
	*/
	public A inAElseIfExp(AElseIfExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AElseIfExp} node from {@link AElseIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfExp} node
	*/
	public A outAElseIfExp(AElseIfExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AExists1Exp} node from {@link AExists1Exp#apply(IAnalysis)}.
	* @param node the calling {@link AExists1Exp} node
	*/
	public A caseAExists1Exp(AExists1Exp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExists1Exp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			mergeReturns(retVal,node.getBind().apply(this));
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}
		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}

		mergeReturns(retVal,outAExists1Exp(node));
		return retVal;
	}


	/**
	* Called by the {@link AExists1Exp} node from {@link AExists1Exp#apply(IAnalysis)}.
	* @param node the calling {@link AExists1Exp} node
	*/
	public A inAExists1Exp(AExists1Exp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AExists1Exp} node from {@link AExists1Exp#apply(IAnalysis)}.
	* @param node the calling {@link AExists1Exp} node
	*/
	public A outAExists1Exp(AExists1Exp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AExistsExp} node from {@link AExistsExp#apply(IAnalysis)}.
	* @param node the calling {@link AExistsExp} node
	*/
	public A caseAExistsExp(AExistsExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExistsExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PMultipleBind> copy = new ArrayList<PMultipleBind>(node.getBindList());
			for( PMultipleBind e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outAExistsExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AExistsExp} node from {@link AExistsExp#apply(IAnalysis)}.
	* @param node the calling {@link AExistsExp} node
	*/
	public A inAExistsExp(AExistsExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AExistsExp} node from {@link AExistsExp#apply(IAnalysis)}.
	* @param node the calling {@link AExistsExp} node
	*/
	public A outAExistsExp(AExistsExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AFieldExp} node from {@link AFieldExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExp} node
	*/
	public A caseAFieldExp(AFieldExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}
		if(node.getMemberName() != null ) 
		{
			mergeReturns(retVal,node.getMemberName().apply(this));
		}
		if(node.getField() != null ) 
		{
			mergeReturns(retVal,node.getField().apply(this));
		}

		mergeReturns(retVal,outAFieldExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldExp} node from {@link AFieldExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExp} node
	*/
	public A inAFieldExp(AFieldExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AFieldExp} node from {@link AFieldExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldExp} node
	*/
	public A outAFieldExp(AFieldExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AFieldNumberExp} node from {@link AFieldNumberExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExp} node
	*/
	public A caseAFieldNumberExp(AFieldNumberExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldNumberExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTuple() != null && !_visitedNodes.contains(node.getTuple())) 
		{
			mergeReturns(retVal,node.getTuple().apply(this));
		}
		if(node.getField() != null ) 
		{
			mergeReturns(retVal,node.getField().apply(this));
		}

		mergeReturns(retVal,outAFieldNumberExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldNumberExp} node from {@link AFieldNumberExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExp} node
	*/
	public A inAFieldNumberExp(AFieldNumberExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AFieldNumberExp} node from {@link AFieldNumberExp#apply(IAnalysis)}.
	* @param node the calling {@link AFieldNumberExp} node
	*/
	public A outAFieldNumberExp(AFieldNumberExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AForAllExp} node from {@link AForAllExp#apply(IAnalysis)}.
	* @param node the calling {@link AForAllExp} node
	*/
	public A caseAForAllExp(AForAllExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForAllExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PMultipleBind> copy = new ArrayList<PMultipleBind>(node.getBindList());
			for( PMultipleBind e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outAForAllExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AForAllExp} node from {@link AForAllExp#apply(IAnalysis)}.
	* @param node the calling {@link AForAllExp} node
	*/
	public A inAForAllExp(AForAllExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AForAllExp} node from {@link AForAllExp#apply(IAnalysis)}.
	* @param node the calling {@link AForAllExp} node
	*/
	public A outAForAllExp(AForAllExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AFuncInstatiationExp} node from {@link AFuncInstatiationExp#apply(IAnalysis)}.
	* @param node the calling {@link AFuncInstatiationExp} node
	*/
	public A caseAFuncInstatiationExp(AFuncInstatiationExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFuncInstatiationExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFunction() != null && !_visitedNodes.contains(node.getFunction())) 
		{
			mergeReturns(retVal,node.getFunction().apply(this));
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getActualTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExpdef() != null && !_visitedNodes.contains(node.getExpdef())) 
		{
			mergeReturns(retVal,node.getExpdef().apply(this));
		}
		if(node.getImpdef() != null && !_visitedNodes.contains(node.getImpdef())) 
		{
			mergeReturns(retVal,node.getImpdef().apply(this));
		}

		mergeReturns(retVal,outAFuncInstatiationExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AFuncInstatiationExp} node from {@link AFuncInstatiationExp#apply(IAnalysis)}.
	* @param node the calling {@link AFuncInstatiationExp} node
	*/
	public A inAFuncInstatiationExp(AFuncInstatiationExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AFuncInstatiationExp} node from {@link AFuncInstatiationExp#apply(IAnalysis)}.
	* @param node the calling {@link AFuncInstatiationExp} node
	*/
	public A outAFuncInstatiationExp(AFuncInstatiationExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AHistoryExp} node from {@link AHistoryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExp} node
	*/
	public A caseAHistoryExp(AHistoryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAHistoryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getHop() != null ) 
		{
			mergeReturns(retVal,node.getHop().apply(this));
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getOpnames());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}

		mergeReturns(retVal,outAHistoryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AHistoryExp} node from {@link AHistoryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExp} node
	*/
	public A inAHistoryExp(AHistoryExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AHistoryExp} node from {@link AHistoryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHistoryExp} node
	*/
	public A outAHistoryExp(AHistoryExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AIfExp} node from {@link AIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AIfExp} node
	*/
	public A caseAIfExp(AIfExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIfExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTest() != null && !_visitedNodes.contains(node.getTest())) 
		{
			mergeReturns(retVal,node.getTest().apply(this));
		}
		if(node.getThen() != null && !_visitedNodes.contains(node.getThen())) 
		{
			mergeReturns(retVal,node.getThen().apply(this));
		}
		{
			List<AElseIfExp> copy = new ArrayList<AElseIfExp>(node.getElseList());
			for( AElseIfExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getElse() != null && !_visitedNodes.contains(node.getElse())) 
		{
			mergeReturns(retVal,node.getElse().apply(this));
		}

		mergeReturns(retVal,outAIfExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AIfExp} node from {@link AIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AIfExp} node
	*/
	public A inAIfExp(AIfExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AIfExp} node from {@link AIfExp#apply(IAnalysis)}.
	* @param node the calling {@link AIfExp} node
	*/
	public A outAIfExp(AIfExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AIntLiteralExp} node from {@link AIntLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExp} node
	*/
	public A caseAIntLiteralExp(AIntLiteralExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntLiteralExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAIntLiteralExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntLiteralExp} node from {@link AIntLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExp} node
	*/
	public A inAIntLiteralExp(AIntLiteralExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AIntLiteralExp} node from {@link AIntLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AIntLiteralExp} node
	*/
	public A outAIntLiteralExp(AIntLiteralExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AIotaExp} node from {@link AIotaExp#apply(IAnalysis)}.
	* @param node the calling {@link AIotaExp} node
	*/
	public A caseAIotaExp(AIotaExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIotaExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			mergeReturns(retVal,node.getBind().apply(this));
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outAIotaExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AIotaExp} node from {@link AIotaExp#apply(IAnalysis)}.
	* @param node the calling {@link AIotaExp} node
	*/
	public A inAIotaExp(AIotaExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AIotaExp} node from {@link AIotaExp#apply(IAnalysis)}.
	* @param node the calling {@link AIotaExp} node
	*/
	public A outAIotaExp(AIotaExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AIsExp} node from {@link AIsExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsExp} node
	*/
	public A caseAIsExp(AIsExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIsExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTypeName() != null ) 
		{
			mergeReturns(retVal,node.getTypeName().apply(this));
		}
		if(node.getBasicType() != null && !_visitedNodes.contains(node.getBasicType())) 
		{
			mergeReturns(retVal,node.getBasicType().apply(this));
		}
		if(node.getTest() != null && !_visitedNodes.contains(node.getTest())) 
		{
			mergeReturns(retVal,node.getTest().apply(this));
		}
		if(node.getTypedef() != null && !_visitedNodes.contains(node.getTypedef())) 
		{
			mergeReturns(retVal,node.getTypedef().apply(this));
		}

		mergeReturns(retVal,outAIsExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AIsExp} node from {@link AIsExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsExp} node
	*/
	public A inAIsExp(AIsExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AIsExp} node from {@link AIsExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsExp} node
	*/
	public A outAIsExp(AIsExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AIsOfBaseClassExp} node from {@link AIsOfBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfBaseClassExp} node
	*/
	public A caseAIsOfBaseClassExp(AIsOfBaseClassExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIsOfBaseClassExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getBaseClass() != null ) 
		{
			mergeReturns(retVal,node.getBaseClass().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAIsOfBaseClassExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AIsOfBaseClassExp} node from {@link AIsOfBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfBaseClassExp} node
	*/
	public A inAIsOfBaseClassExp(AIsOfBaseClassExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AIsOfBaseClassExp} node from {@link AIsOfBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfBaseClassExp} node
	*/
	public A outAIsOfBaseClassExp(AIsOfBaseClassExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AIsOfClassExp} node from {@link AIsOfClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfClassExp} node
	*/
	public A caseAIsOfClassExp(AIsOfClassExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIsOfClassExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getClassName() != null ) 
		{
			mergeReturns(retVal,node.getClassName().apply(this));
		}
		if(node.getClassType() != null && !_visitedNodes.contains(node.getClassType())) 
		{
			mergeReturns(retVal,node.getClassType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAIsOfClassExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AIsOfClassExp} node from {@link AIsOfClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfClassExp} node
	*/
	public A inAIsOfClassExp(AIsOfClassExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AIsOfClassExp} node from {@link AIsOfClassExp#apply(IAnalysis)}.
	* @param node the calling {@link AIsOfClassExp} node
	*/
	public A outAIsOfClassExp(AIsOfClassExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ALambdaExp} node from {@link ALambdaExp#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExp} node
	*/
	public A caseALambdaExp(ALambdaExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALambdaExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ATypeBind> copy = new ArrayList<ATypeBind>(node.getBindList());
			for( ATypeBind e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}
		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getParamPatterns());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getParamDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getFunctionType() != null && !_visitedNodes.contains(node.getFunctionType())) 
		{
			mergeReturns(retVal,node.getFunctionType().apply(this));
		}

		mergeReturns(retVal,outALambdaExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ALambdaExp} node from {@link ALambdaExp#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExp} node
	*/
	public A inALambdaExp(ALambdaExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ALambdaExp} node from {@link ALambdaExp#apply(IAnalysis)}.
	* @param node the calling {@link ALambdaExp} node
	*/
	public A outALambdaExp(ALambdaExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ALetBeStExp} node from {@link ALetBeStExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExp} node
	*/
	public A caseALetBeStExp(ALetBeStExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetBeStExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			mergeReturns(retVal,node.getBind().apply(this));
		}
		if(node.getSuchThat() != null && !_visitedNodes.contains(node.getSuchThat())) 
		{
			mergeReturns(retVal,node.getSuchThat().apply(this));
		}
		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}
		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}

		mergeReturns(retVal,outALetBeStExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetBeStExp} node from {@link ALetBeStExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExp} node
	*/
	public A inALetBeStExp(ALetBeStExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ALetBeStExp} node from {@link ALetBeStExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStExp} node
	*/
	public A outALetBeStExp(ALetBeStExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ALetDefExp} node from {@link ALetDefExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExp} node
	*/
	public A caseALetDefExp(ALetDefExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetDefExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}

		mergeReturns(retVal,outALetDefExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetDefExp} node from {@link ALetDefExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExp} node
	*/
	public A inALetDefExp(ALetDefExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ALetDefExp} node from {@link ALetDefExp#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefExp} node
	*/
	public A outALetDefExp(ALetDefExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ADefExp} node from {@link ADefExp#apply(IAnalysis)}.
	* @param node the calling {@link ADefExp} node
	*/
	public A caseADefExp(ADefExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADefExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}

		mergeReturns(retVal,outADefExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADefExp} node from {@link ADefExp#apply(IAnalysis)}.
	* @param node the calling {@link ADefExp} node
	*/
	public A inADefExp(ADefExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ADefExp} node from {@link ADefExp#apply(IAnalysis)}.
	* @param node the calling {@link ADefExp} node
	*/
	public A outADefExp(ADefExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SMapExp} node from {@link SMapExp#apply(IAnalysis)}.
	* @param node the calling {@link SMapExp} node
	*/
	public A defaultInSMapExp(SMapExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SMapExp} node from {@link SMapExp#apply(IAnalysis)}.
	* @param node the calling {@link SMapExp} node
	*/
	public A defaultOutSMapExp(SMapExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SMapExp} node from {@link SMapExp#apply(IAnalysis)}.
	* @param node the calling {@link SMapExp} node
	*/
	public A defaultSMapExp(SMapExp node) throws AnalysisException
	{
		return defaultPExp(node);
	}


	/**
	* Called by the {@link SMapExp} node from {@link SMapExp#apply(IAnalysis)}.
	* @param node the calling {@link SMapExp} node
	*/
	public A inSMapExp(SMapExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SMapExp} node from {@link SMapExp#apply(IAnalysis)}.
	* @param node the calling {@link SMapExp} node
	*/
	public A outSMapExp(SMapExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AMapletExp} node from {@link AMapletExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExp} node
	*/
	public A caseAMapletExp(AMapletExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapletExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAMapletExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapletExp} node from {@link AMapletExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExp} node
	*/
	public A inAMapletExp(AMapletExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AMapletExp} node from {@link AMapletExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapletExp} node
	*/
	public A outAMapletExp(AMapletExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AMkBasicExp} node from {@link AMkBasicExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExp} node
	*/
	public A caseAMkBasicExp(AMkBasicExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMkBasicExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getArg() != null && !_visitedNodes.contains(node.getArg())) 
		{
			mergeReturns(retVal,node.getArg().apply(this));
		}

		mergeReturns(retVal,outAMkBasicExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMkBasicExp} node from {@link AMkBasicExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExp} node
	*/
	public A inAMkBasicExp(AMkBasicExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AMkBasicExp} node from {@link AMkBasicExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkBasicExp} node
	*/
	public A outAMkBasicExp(AMkBasicExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AMkTypeExp} node from {@link AMkTypeExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkTypeExp} node
	*/
	public A caseAMkTypeExp(AMkTypeExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMkTypeExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTypeName() != null ) 
		{
			mergeReturns(retVal,node.getTypeName().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getRecordType() != null && !_visitedNodes.contains(node.getRecordType())) 
		{
			mergeReturns(retVal,node.getRecordType().apply(this));
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getArgTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAMkTypeExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMkTypeExp} node from {@link AMkTypeExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkTypeExp} node
	*/
	public A inAMkTypeExp(AMkTypeExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AMkTypeExp} node from {@link AMkTypeExp#apply(IAnalysis)}.
	* @param node the calling {@link AMkTypeExp} node
	*/
	public A outAMkTypeExp(AMkTypeExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AMuExp} node from {@link AMuExp#apply(IAnalysis)}.
	* @param node the calling {@link AMuExp} node
	*/
	public A caseAMuExp(AMuExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMuExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getRecord() != null && !_visitedNodes.contains(node.getRecord())) 
		{
			mergeReturns(retVal,node.getRecord().apply(this));
		}
		if(node.getRecordType() != null && !_visitedNodes.contains(node.getRecordType())) 
		{
			mergeReturns(retVal,node.getRecordType().apply(this));
		}
		{
			List<ARecordModifier> copy = new ArrayList<ARecordModifier>(node.getModifiers());
			for( ARecordModifier e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getModTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAMuExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMuExp} node from {@link AMuExp#apply(IAnalysis)}.
	* @param node the calling {@link AMuExp} node
	*/
	public A inAMuExp(AMuExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AMuExp} node from {@link AMuExp#apply(IAnalysis)}.
	* @param node the calling {@link AMuExp} node
	*/
	public A outAMuExp(AMuExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ANewExp} node from {@link ANewExp#apply(IAnalysis)}.
	* @param node the calling {@link ANewExp} node
	*/
	public A caseANewExp(ANewExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANewExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getClassName() != null ) 
		{
			mergeReturns(retVal,node.getClassName().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getClassdef() != null && !_visitedNodes.contains(node.getClassdef())) 
		{
			mergeReturns(retVal,node.getClassdef().apply(this));
		}
		if(node.getCtorDefinition() != null && !_visitedNodes.contains(node.getCtorDefinition())) 
		{
			mergeReturns(retVal,node.getCtorDefinition().apply(this));
		}

		mergeReturns(retVal,outANewExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ANewExp} node from {@link ANewExp#apply(IAnalysis)}.
	* @param node the calling {@link ANewExp} node
	*/
	public A inANewExp(ANewExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ANewExp} node from {@link ANewExp#apply(IAnalysis)}.
	* @param node the calling {@link ANewExp} node
	*/
	public A outANewExp(ANewExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ANilExp} node from {@link ANilExp#apply(IAnalysis)}.
	* @param node the calling {@link ANilExp} node
	*/
	public A caseANilExp(ANilExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANilExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outANilExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ANilExp} node from {@link ANilExp#apply(IAnalysis)}.
	* @param node the calling {@link ANilExp} node
	*/
	public A inANilExp(ANilExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ANilExp} node from {@link ANilExp#apply(IAnalysis)}.
	* @param node the calling {@link ANilExp} node
	*/
	public A outANilExp(ANilExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ANotYetSpecifiedExp} node from {@link ANotYetSpecifiedExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedExp} node
	*/
	public A caseANotYetSpecifiedExp(ANotYetSpecifiedExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotYetSpecifiedExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outANotYetSpecifiedExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotYetSpecifiedExp} node from {@link ANotYetSpecifiedExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedExp} node
	*/
	public A inANotYetSpecifiedExp(ANotYetSpecifiedExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ANotYetSpecifiedExp} node from {@link ANotYetSpecifiedExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedExp} node
	*/
	public A outANotYetSpecifiedExp(ANotYetSpecifiedExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link APostOpExp} node from {@link APostOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APostOpExp} node
	*/
	public A caseAPostOpExp(APostOpExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPostOpExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getOpname() != null ) 
		{
			mergeReturns(retVal,node.getOpname().apply(this));
		}
		if(node.getPreexpression() != null && !_visitedNodes.contains(node.getPreexpression())) 
		{
			mergeReturns(retVal,node.getPreexpression().apply(this));
		}
		if(node.getPostexpression() != null && !_visitedNodes.contains(node.getPostexpression())) 
		{
			mergeReturns(retVal,node.getPostexpression().apply(this));
		}
		{
			List<AErrorCase> copy = new ArrayList<AErrorCase>(node.getErrors());
			for( AErrorCase e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getState() != null && !_visitedNodes.contains(node.getState())) 
		{
			mergeReturns(retVal,node.getState().apply(this));
		}

		mergeReturns(retVal,outAPostOpExp(node));
		return retVal;
	}


	/**
	* Called by the {@link APostOpExp} node from {@link APostOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APostOpExp} node
	*/
	public A inAPostOpExp(APostOpExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link APostOpExp} node from {@link APostOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APostOpExp} node
	*/
	public A outAPostOpExp(APostOpExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link APreExp} node from {@link APreExp#apply(IAnalysis)}.
	* @param node the calling {@link APreExp} node
	*/
	public A caseAPreExp(APreExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPreExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFunction() != null && !_visitedNodes.contains(node.getFunction())) 
		{
			mergeReturns(retVal,node.getFunction().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAPreExp(node));
		return retVal;
	}


	/**
	* Called by the {@link APreExp} node from {@link APreExp#apply(IAnalysis)}.
	* @param node the calling {@link APreExp} node
	*/
	public A inAPreExp(APreExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link APreExp} node from {@link APreExp#apply(IAnalysis)}.
	* @param node the calling {@link APreExp} node
	*/
	public A outAPreExp(APreExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link APreOpExp} node from {@link APreOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APreOpExp} node
	*/
	public A caseAPreOpExp(APreOpExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPreOpExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getOpname() != null ) 
		{
			mergeReturns(retVal,node.getOpname().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}
		{
			List<AErrorCase> copy = new ArrayList<AErrorCase>(node.getErrors());
			for( AErrorCase e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getState() != null && !_visitedNodes.contains(node.getState())) 
		{
			mergeReturns(retVal,node.getState().apply(this));
		}

		mergeReturns(retVal,outAPreOpExp(node));
		return retVal;
	}


	/**
	* Called by the {@link APreOpExp} node from {@link APreOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APreOpExp} node
	*/
	public A inAPreOpExp(APreOpExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link APreOpExp} node from {@link APreOpExp#apply(IAnalysis)}.
	* @param node the calling {@link APreOpExp} node
	*/
	public A outAPreOpExp(APreOpExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AQuoteLiteralExp} node from {@link AQuoteLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExp} node
	*/
	public A caseAQuoteLiteralExp(AQuoteLiteralExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAQuoteLiteralExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAQuoteLiteralExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AQuoteLiteralExp} node from {@link AQuoteLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExp} node
	*/
	public A inAQuoteLiteralExp(AQuoteLiteralExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AQuoteLiteralExp} node from {@link AQuoteLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteLiteralExp} node
	*/
	public A outAQuoteLiteralExp(AQuoteLiteralExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ARealLiteralExp} node from {@link ARealLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExp} node
	*/
	public A caseARealLiteralExp(ARealLiteralExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealLiteralExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outARealLiteralExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealLiteralExp} node from {@link ARealLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExp} node
	*/
	public A inARealLiteralExp(ARealLiteralExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ARealLiteralExp} node from {@link ARealLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link ARealLiteralExp} node
	*/
	public A outARealLiteralExp(ARealLiteralExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ASameBaseClassExp} node from {@link ASameBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameBaseClassExp} node
	*/
	public A caseASameBaseClassExp(ASameBaseClassExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASameBaseClassExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASameBaseClassExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASameBaseClassExp} node from {@link ASameBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameBaseClassExp} node
	*/
	public A inASameBaseClassExp(ASameBaseClassExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ASameBaseClassExp} node from {@link ASameBaseClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameBaseClassExp} node
	*/
	public A outASameBaseClassExp(ASameBaseClassExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ASameClassExp} node from {@link ASameClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameClassExp} node
	*/
	public A caseASameClassExp(ASameClassExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASameClassExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASameClassExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASameClassExp} node from {@link ASameClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameClassExp} node
	*/
	public A inASameClassExp(ASameClassExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ASameClassExp} node from {@link ASameClassExp#apply(IAnalysis)}.
	* @param node the calling {@link ASameClassExp} node
	*/
	public A outASameClassExp(ASameClassExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ASelfExp} node from {@link ASelfExp#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExp} node
	*/
	public A caseASelfExp(ASelfExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASelfExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outASelfExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASelfExp} node from {@link ASelfExp#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExp} node
	*/
	public A inASelfExp(ASelfExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ASelfExp} node from {@link ASelfExp#apply(IAnalysis)}.
	* @param node the calling {@link ASelfExp} node
	*/
	public A outASelfExp(ASelfExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SSeqExp} node from {@link SSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExp} node
	*/
	public A defaultInSSeqExp(SSeqExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SSeqExp} node from {@link SSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExp} node
	*/
	public A defaultOutSSeqExp(SSeqExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SSeqExp} node from {@link SSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExp} node
	*/
	public A defaultSSeqExp(SSeqExp node) throws AnalysisException
	{
		return defaultPExp(node);
	}


	/**
	* Called by the {@link SSeqExp} node from {@link SSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExp} node
	*/
	public A inSSeqExp(SSeqExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SSeqExp} node from {@link SSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link SSeqExp} node
	*/
	public A outSSeqExp(SSeqExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SSetExp} node from {@link SSetExp#apply(IAnalysis)}.
	* @param node the calling {@link SSetExp} node
	*/
	public A defaultInSSetExp(SSetExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SSetExp} node from {@link SSetExp#apply(IAnalysis)}.
	* @param node the calling {@link SSetExp} node
	*/
	public A defaultOutSSetExp(SSetExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link SSetExp} node from {@link SSetExp#apply(IAnalysis)}.
	* @param node the calling {@link SSetExp} node
	*/
	public A defaultSSetExp(SSetExp node) throws AnalysisException
	{
		return defaultPExp(node);
	}


	/**
	* Called by the {@link SSetExp} node from {@link SSetExp#apply(IAnalysis)}.
	* @param node the calling {@link SSetExp} node
	*/
	public A inSSetExp(SSetExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link SSetExp} node from {@link SSetExp#apply(IAnalysis)}.
	* @param node the calling {@link SSetExp} node
	*/
	public A outSSetExp(SSetExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AStateInitExp} node from {@link AStateInitExp#apply(IAnalysis)}.
	* @param node the calling {@link AStateInitExp} node
	*/
	public A caseAStateInitExp(AStateInitExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStateInitExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getState() != null && !_visitedNodes.contains(node.getState())) 
		{
			mergeReturns(retVal,node.getState().apply(this));
		}

		mergeReturns(retVal,outAStateInitExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AStateInitExp} node from {@link AStateInitExp#apply(IAnalysis)}.
	* @param node the calling {@link AStateInitExp} node
	*/
	public A inAStateInitExp(AStateInitExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AStateInitExp} node from {@link AStateInitExp#apply(IAnalysis)}.
	* @param node the calling {@link AStateInitExp} node
	*/
	public A outAStateInitExp(AStateInitExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AStringLiteralExp} node from {@link AStringLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExp} node
	*/
	public A caseAStringLiteralExp(AStringLiteralExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStringLiteralExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAStringLiteralExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AStringLiteralExp} node from {@link AStringLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExp} node
	*/
	public A inAStringLiteralExp(AStringLiteralExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AStringLiteralExp} node from {@link AStringLiteralExp#apply(IAnalysis)}.
	* @param node the calling {@link AStringLiteralExp} node
	*/
	public A outAStringLiteralExp(AStringLiteralExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ASubclassResponsibilityExp} node from {@link ASubclassResponsibilityExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityExp} node
	*/
	public A caseASubclassResponsibilityExp(ASubclassResponsibilityExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASubclassResponsibilityExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outASubclassResponsibilityExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASubclassResponsibilityExp} node from {@link ASubclassResponsibilityExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityExp} node
	*/
	public A inASubclassResponsibilityExp(ASubclassResponsibilityExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ASubclassResponsibilityExp} node from {@link ASubclassResponsibilityExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityExp} node
	*/
	public A outASubclassResponsibilityExp(ASubclassResponsibilityExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ASubseqExp} node from {@link ASubseqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubseqExp} node
	*/
	public A caseASubseqExp(ASubseqExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASubseqExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getSeq() != null && !_visitedNodes.contains(node.getSeq())) 
		{
			mergeReturns(retVal,node.getSeq().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}
		if(node.getFtype() != null && !_visitedNodes.contains(node.getFtype())) 
		{
			mergeReturns(retVal,node.getFtype().apply(this));
		}
		if(node.getTtype() != null && !_visitedNodes.contains(node.getTtype())) 
		{
			mergeReturns(retVal,node.getTtype().apply(this));
		}

		mergeReturns(retVal,outASubseqExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASubseqExp} node from {@link ASubseqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubseqExp} node
	*/
	public A inASubseqExp(ASubseqExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ASubseqExp} node from {@link ASubseqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubseqExp} node
	*/
	public A outASubseqExp(ASubseqExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AThreadIdExp} node from {@link AThreadIdExp#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExp} node
	*/
	public A caseAThreadIdExp(AThreadIdExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAThreadIdExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAThreadIdExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AThreadIdExp} node from {@link AThreadIdExp#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExp} node
	*/
	public A inAThreadIdExp(AThreadIdExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AThreadIdExp} node from {@link AThreadIdExp#apply(IAnalysis)}.
	* @param node the calling {@link AThreadIdExp} node
	*/
	public A outAThreadIdExp(AThreadIdExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ATimeExp} node from {@link ATimeExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExp} node
	*/
	public A caseATimeExp(ATimeExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATimeExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outATimeExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ATimeExp} node from {@link ATimeExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExp} node
	*/
	public A inATimeExp(ATimeExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ATimeExp} node from {@link ATimeExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimeExp} node
	*/
	public A outATimeExp(ATimeExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link ATupleExp} node from {@link ATupleExp#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExp} node
	*/
	public A caseATupleExp(ATupleExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATupleExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATupleExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ATupleExp} node from {@link ATupleExp#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExp} node
	*/
	public A inATupleExp(ATupleExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link ATupleExp} node from {@link ATupleExp#apply(IAnalysis)}.
	* @param node the calling {@link ATupleExp} node
	*/
	public A outATupleExp(ATupleExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AUndefinedExp} node from {@link AUndefinedExp#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExp} node
	*/
	public A caseAUndefinedExp(AUndefinedExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUndefinedExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAUndefinedExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AUndefinedExp} node from {@link AUndefinedExp#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExp} node
	*/
	public A inAUndefinedExp(AUndefinedExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AUndefinedExp} node from {@link AUndefinedExp#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedExp} node
	*/
	public A outAUndefinedExp(AUndefinedExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AVariableExp} node from {@link AVariableExp#apply(IAnalysis)}.
	* @param node the calling {@link AVariableExp} node
	*/
	public A caseAVariableExp(AVariableExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAVariableExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getVardef() != null && !_visitedNodes.contains(node.getVardef())) 
		{
			mergeReturns(retVal,node.getVardef().apply(this));
		}

		mergeReturns(retVal,outAVariableExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AVariableExp} node from {@link AVariableExp#apply(IAnalysis)}.
	* @param node the calling {@link AVariableExp} node
	*/
	public A inAVariableExp(AVariableExp node) throws AnalysisException
	{
		return defaultInPExp(node);
	}


	/**
	* Called by the {@link AVariableExp} node from {@link AVariableExp#apply(IAnalysis)}.
	* @param node the calling {@link AVariableExp} node
	*/
	public A outAVariableExp(AVariableExp node) throws AnalysisException
	{
		return defaultOutPExp(node);
	}


	/**
	* Called by the {@link AAbsoluteUnaryExp} node from {@link AAbsoluteUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAbsoluteUnaryExp} node
	*/
	public A caseAAbsoluteUnaryExp(AAbsoluteUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAbsoluteUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAAbsoluteUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AAbsoluteUnaryExp} node from {@link AAbsoluteUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAbsoluteUnaryExp} node
	*/
	public A inAAbsoluteUnaryExp(AAbsoluteUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AAbsoluteUnaryExp} node from {@link AAbsoluteUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAbsoluteUnaryExp} node
	*/
	public A outAAbsoluteUnaryExp(AAbsoluteUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ACardinalityUnaryExp} node from {@link ACardinalityUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACardinalityUnaryExp} node
	*/
	public A caseACardinalityUnaryExp(ACardinalityUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACardinalityUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outACardinalityUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ACardinalityUnaryExp} node from {@link ACardinalityUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACardinalityUnaryExp} node
	*/
	public A inACardinalityUnaryExp(ACardinalityUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ACardinalityUnaryExp} node from {@link ACardinalityUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACardinalityUnaryExp} node
	*/
	public A outACardinalityUnaryExp(ACardinalityUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistConcatUnaryExp} node from {@link ADistConcatUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExp} node
	*/
	public A caseADistConcatUnaryExp(ADistConcatUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistConcatUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistConcatUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistConcatUnaryExp} node from {@link ADistConcatUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExp} node
	*/
	public A inADistConcatUnaryExp(ADistConcatUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistConcatUnaryExp} node from {@link ADistConcatUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistConcatUnaryExp} node
	*/
	public A outADistConcatUnaryExp(ADistConcatUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistIntersectUnaryExp} node from {@link ADistIntersectUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExp} node
	*/
	public A caseADistIntersectUnaryExp(ADistIntersectUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistIntersectUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistIntersectUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistIntersectUnaryExp} node from {@link ADistIntersectUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExp} node
	*/
	public A inADistIntersectUnaryExp(ADistIntersectUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistIntersectUnaryExp} node from {@link ADistIntersectUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistIntersectUnaryExp} node
	*/
	public A outADistIntersectUnaryExp(ADistIntersectUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistMergeUnaryExp} node from {@link ADistMergeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExp} node
	*/
	public A caseADistMergeUnaryExp(ADistMergeUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistMergeUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistMergeUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistMergeUnaryExp} node from {@link ADistMergeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExp} node
	*/
	public A inADistMergeUnaryExp(ADistMergeUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistMergeUnaryExp} node from {@link ADistMergeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistMergeUnaryExp} node
	*/
	public A outADistMergeUnaryExp(ADistMergeUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistUnionUnaryExp} node from {@link ADistUnionUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExp} node
	*/
	public A caseADistUnionUnaryExp(ADistUnionUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADistUnionUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outADistUnionUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADistUnionUnaryExp} node from {@link ADistUnionUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExp} node
	*/
	public A inADistUnionUnaryExp(ADistUnionUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ADistUnionUnaryExp} node from {@link ADistUnionUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADistUnionUnaryExp} node
	*/
	public A outADistUnionUnaryExp(ADistUnionUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AElementsUnaryExp} node from {@link AElementsUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AElementsUnaryExp} node
	*/
	public A caseAElementsUnaryExp(AElementsUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAElementsUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAElementsUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AElementsUnaryExp} node from {@link AElementsUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AElementsUnaryExp} node
	*/
	public A inAElementsUnaryExp(AElementsUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AElementsUnaryExp} node from {@link AElementsUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AElementsUnaryExp} node
	*/
	public A outAElementsUnaryExp(AElementsUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AFloorUnaryExp} node from {@link AFloorUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExp} node
	*/
	public A caseAFloorUnaryExp(AFloorUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFloorUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAFloorUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AFloorUnaryExp} node from {@link AFloorUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExp} node
	*/
	public A inAFloorUnaryExp(AFloorUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AFloorUnaryExp} node from {@link AFloorUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnaryExp} node
	*/
	public A outAFloorUnaryExp(AFloorUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AHeadUnaryExp} node from {@link AHeadUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExp} node
	*/
	public A caseAHeadUnaryExp(AHeadUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAHeadUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAHeadUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AHeadUnaryExp} node from {@link AHeadUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExp} node
	*/
	public A inAHeadUnaryExp(AHeadUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AHeadUnaryExp} node from {@link AHeadUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AHeadUnaryExp} node
	*/
	public A outAHeadUnaryExp(AHeadUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AIndicesUnaryExp} node from {@link AIndicesUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExp} node
	*/
	public A caseAIndicesUnaryExp(AIndicesUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIndicesUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAIndicesUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AIndicesUnaryExp} node from {@link AIndicesUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExp} node
	*/
	public A inAIndicesUnaryExp(AIndicesUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AIndicesUnaryExp} node from {@link AIndicesUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AIndicesUnaryExp} node
	*/
	public A outAIndicesUnaryExp(AIndicesUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ALenUnaryExp} node from {@link ALenUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExp} node
	*/
	public A caseALenUnaryExp(ALenUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALenUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outALenUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ALenUnaryExp} node from {@link ALenUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExp} node
	*/
	public A inALenUnaryExp(ALenUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ALenUnaryExp} node from {@link ALenUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALenUnaryExp} node
	*/
	public A outALenUnaryExp(ALenUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AMapDomainUnaryExp} node from {@link AMapDomainUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExp} node
	*/
	public A caseAMapDomainUnaryExp(AMapDomainUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapDomainUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAMapDomainUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapDomainUnaryExp} node from {@link AMapDomainUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExp} node
	*/
	public A inAMapDomainUnaryExp(AMapDomainUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AMapDomainUnaryExp} node from {@link AMapDomainUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapDomainUnaryExp} node
	*/
	public A outAMapDomainUnaryExp(AMapDomainUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AMapInverseUnaryExp} node from {@link AMapInverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExp} node
	*/
	public A caseAMapInverseUnaryExp(AMapInverseUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapInverseUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getMapType() != null && !_visitedNodes.contains(node.getMapType())) 
		{
			mergeReturns(retVal,node.getMapType().apply(this));
		}

		mergeReturns(retVal,outAMapInverseUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapInverseUnaryExp} node from {@link AMapInverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExp} node
	*/
	public A inAMapInverseUnaryExp(AMapInverseUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AMapInverseUnaryExp} node from {@link AMapInverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapInverseUnaryExp} node
	*/
	public A outAMapInverseUnaryExp(AMapInverseUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AMapRangeUnaryExp} node from {@link AMapRangeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExp} node
	*/
	public A caseAMapRangeUnaryExp(AMapRangeUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapRangeUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAMapRangeUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapRangeUnaryExp} node from {@link AMapRangeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExp} node
	*/
	public A inAMapRangeUnaryExp(AMapRangeUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AMapRangeUnaryExp} node from {@link AMapRangeUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapRangeUnaryExp} node
	*/
	public A outAMapRangeUnaryExp(AMapRangeUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ANotUnaryExp} node from {@link ANotUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExp} node
	*/
	public A caseANotUnaryExp(ANotUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outANotUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotUnaryExp} node from {@link ANotUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExp} node
	*/
	public A inANotUnaryExp(ANotUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ANotUnaryExp} node from {@link ANotUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotUnaryExp} node
	*/
	public A outANotUnaryExp(ANotUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link APowerSetUnaryExp} node from {@link APowerSetUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExp} node
	*/
	public A caseAPowerSetUnaryExp(APowerSetUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPowerSetUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAPowerSetUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link APowerSetUnaryExp} node from {@link APowerSetUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExp} node
	*/
	public A inAPowerSetUnaryExp(APowerSetUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link APowerSetUnaryExp} node from {@link APowerSetUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APowerSetUnaryExp} node
	*/
	public A outAPowerSetUnaryExp(APowerSetUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AReverseUnaryExp} node from {@link AReverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExp} node
	*/
	public A caseAReverseUnaryExp(AReverseUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAReverseUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAReverseUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AReverseUnaryExp} node from {@link AReverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExp} node
	*/
	public A inAReverseUnaryExp(AReverseUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AReverseUnaryExp} node from {@link AReverseUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AReverseUnaryExp} node
	*/
	public A outAReverseUnaryExp(AReverseUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link ATailUnaryExp} node from {@link ATailUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExp} node
	*/
	public A caseATailUnaryExp(ATailUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATailUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outATailUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ATailUnaryExp} node from {@link ATailUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExp} node
	*/
	public A inATailUnaryExp(ATailUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link ATailUnaryExp} node from {@link ATailUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATailUnaryExp} node
	*/
	public A outATailUnaryExp(ATailUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AUnaryMinusUnaryExp} node from {@link AUnaryMinusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryMinusUnaryExp} node
	*/
	public A caseAUnaryMinusUnaryExp(AUnaryMinusUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnaryMinusUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAUnaryMinusUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnaryMinusUnaryExp} node from {@link AUnaryMinusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryMinusUnaryExp} node
	*/
	public A inAUnaryMinusUnaryExp(AUnaryMinusUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AUnaryMinusUnaryExp} node from {@link AUnaryMinusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryMinusUnaryExp} node
	*/
	public A outAUnaryMinusUnaryExp(AUnaryMinusUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link AUnaryPlusUnaryExp} node from {@link AUnaryPlusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryPlusUnaryExp} node
	*/
	public A caseAUnaryPlusUnaryExp(AUnaryPlusUnaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnaryPlusUnaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAUnaryPlusUnaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnaryPlusUnaryExp} node from {@link AUnaryPlusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryPlusUnaryExp} node
	*/
	public A inAUnaryPlusUnaryExp(AUnaryPlusUnaryExp node) throws AnalysisException
	{
		return defaultInSUnaryExp(node);
	}


	/**
	* Called by the {@link AUnaryPlusUnaryExp} node from {@link AUnaryPlusUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryPlusUnaryExp} node
	*/
	public A outAUnaryPlusUnaryExp(AUnaryPlusUnaryExp node) throws AnalysisException
	{
		return defaultOutSUnaryExp(node);
	}


	/**
	* Called by the {@link SBooleanBinaryExp} node from {@link SBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBooleanBinaryExp} node
	*/
	public A defaultInSBooleanBinaryExp(SBooleanBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link SBooleanBinaryExp} node from {@link SBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBooleanBinaryExp} node
	*/
	public A defaultOutSBooleanBinaryExp(SBooleanBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link SBooleanBinaryExp} node from {@link SBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBooleanBinaryExp} node
	*/
	public A defaultSBooleanBinaryExp(SBooleanBinaryExp node) throws AnalysisException
	{
		return defaultSBinaryExp(node);
	}


	/**
	* Called by the {@link SBooleanBinaryExp} node from {@link SBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBooleanBinaryExp} node
	*/
	public A inSBooleanBinaryExp(SBooleanBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link SBooleanBinaryExp} node from {@link SBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SBooleanBinaryExp} node
	*/
	public A outSBooleanBinaryExp(SBooleanBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ACompBinaryExp} node from {@link ACompBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACompBinaryExp} node
	*/
	public A caseACompBinaryExp(ACompBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACompBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outACompBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ACompBinaryExp} node from {@link ACompBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACompBinaryExp} node
	*/
	public A inACompBinaryExp(ACompBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ACompBinaryExp} node from {@link ACompBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ACompBinaryExp} node
	*/
	public A outACompBinaryExp(ACompBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ADomainResByBinaryExp} node from {@link ADomainResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExp} node
	*/
	public A caseADomainResByBinaryExp(ADomainResByBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADomainResByBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outADomainResByBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADomainResByBinaryExp} node from {@link ADomainResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExp} node
	*/
	public A inADomainResByBinaryExp(ADomainResByBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ADomainResByBinaryExp} node from {@link ADomainResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResByBinaryExp} node
	*/
	public A outADomainResByBinaryExp(ADomainResByBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ADomainResToBinaryExp} node from {@link ADomainResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExp} node
	*/
	public A caseADomainResToBinaryExp(ADomainResToBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADomainResToBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outADomainResToBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADomainResToBinaryExp} node from {@link ADomainResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExp} node
	*/
	public A inADomainResToBinaryExp(ADomainResToBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ADomainResToBinaryExp} node from {@link ADomainResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADomainResToBinaryExp} node
	*/
	public A outADomainResToBinaryExp(ADomainResToBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link AEqualsBinaryExp} node from {@link AEqualsBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExp} node
	*/
	public A caseAEqualsBinaryExp(AEqualsBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAEqualsBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAEqualsBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AEqualsBinaryExp} node from {@link AEqualsBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExp} node
	*/
	public A inAEqualsBinaryExp(AEqualsBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link AEqualsBinaryExp} node from {@link AEqualsBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsBinaryExp} node
	*/
	public A outAEqualsBinaryExp(AEqualsBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link AInSetBinaryExp} node from {@link AInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExp} node
	*/
	public A caseAInSetBinaryExp(AInSetBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInSetBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAInSetBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AInSetBinaryExp} node from {@link AInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExp} node
	*/
	public A inAInSetBinaryExp(AInSetBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link AInSetBinaryExp} node from {@link AInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AInSetBinaryExp} node
	*/
	public A outAInSetBinaryExp(AInSetBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link AMapUnionBinaryExp} node from {@link AMapUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExp} node
	*/
	public A caseAMapUnionBinaryExp(AMapUnionBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapUnionBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAMapUnionBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapUnionBinaryExp} node from {@link AMapUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExp} node
	*/
	public A inAMapUnionBinaryExp(AMapUnionBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link AMapUnionBinaryExp} node from {@link AMapUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionBinaryExp} node
	*/
	public A outAMapUnionBinaryExp(AMapUnionBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ANotEqualBinaryExp} node from {@link ANotEqualBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualBinaryExp} node
	*/
	public A caseANotEqualBinaryExp(ANotEqualBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotEqualBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outANotEqualBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotEqualBinaryExp} node from {@link ANotEqualBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualBinaryExp} node
	*/
	public A inANotEqualBinaryExp(ANotEqualBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ANotEqualBinaryExp} node from {@link ANotEqualBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotEqualBinaryExp} node
	*/
	public A outANotEqualBinaryExp(ANotEqualBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ANotInSetBinaryExp} node from {@link ANotInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotInSetBinaryExp} node
	*/
	public A caseANotInSetBinaryExp(ANotInSetBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotInSetBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outANotInSetBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotInSetBinaryExp} node from {@link ANotInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotInSetBinaryExp} node
	*/
	public A inANotInSetBinaryExp(ANotInSetBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ANotInSetBinaryExp} node from {@link ANotInSetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ANotInSetBinaryExp} node
	*/
	public A outANotInSetBinaryExp(ANotInSetBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link SNumericBinaryExp} node from {@link SNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExp} node
	*/
	public A defaultInSNumericBinaryExp(SNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link SNumericBinaryExp} node from {@link SNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExp} node
	*/
	public A defaultOutSNumericBinaryExp(SNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link SNumericBinaryExp} node from {@link SNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExp} node
	*/
	public A defaultSNumericBinaryExp(SNumericBinaryExp node) throws AnalysisException
	{
		return defaultSBinaryExp(node);
	}


	/**
	* Called by the {@link SNumericBinaryExp} node from {@link SNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExp} node
	*/
	public A inSNumericBinaryExp(SNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link SNumericBinaryExp} node from {@link SNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBinaryExp} node
	*/
	public A outSNumericBinaryExp(SNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link APlusPlusBinaryExp} node from {@link APlusPlusBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusPlusBinaryExp} node
	*/
	public A caseAPlusPlusBinaryExp(APlusPlusBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPlusPlusBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAPlusPlusBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link APlusPlusBinaryExp} node from {@link APlusPlusBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusPlusBinaryExp} node
	*/
	public A inAPlusPlusBinaryExp(APlusPlusBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link APlusPlusBinaryExp} node from {@link APlusPlusBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusPlusBinaryExp} node
	*/
	public A outAPlusPlusBinaryExp(APlusPlusBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link AProperSubsetBinaryExp} node from {@link AProperSubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AProperSubsetBinaryExp} node
	*/
	public A caseAProperSubsetBinaryExp(AProperSubsetBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAProperSubsetBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAProperSubsetBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AProperSubsetBinaryExp} node from {@link AProperSubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AProperSubsetBinaryExp} node
	*/
	public A inAProperSubsetBinaryExp(AProperSubsetBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link AProperSubsetBinaryExp} node from {@link AProperSubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AProperSubsetBinaryExp} node
	*/
	public A outAProperSubsetBinaryExp(AProperSubsetBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ARangeResByBinaryExp} node from {@link ARangeResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExp} node
	*/
	public A caseARangeResByBinaryExp(ARangeResByBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARangeResByBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outARangeResByBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ARangeResByBinaryExp} node from {@link ARangeResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExp} node
	*/
	public A inARangeResByBinaryExp(ARangeResByBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ARangeResByBinaryExp} node from {@link ARangeResByBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResByBinaryExp} node
	*/
	public A outARangeResByBinaryExp(ARangeResByBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ARangeResToBinaryExp} node from {@link ARangeResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExp} node
	*/
	public A caseARangeResToBinaryExp(ARangeResToBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARangeResToBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outARangeResToBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ARangeResToBinaryExp} node from {@link ARangeResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExp} node
	*/
	public A inARangeResToBinaryExp(ARangeResToBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ARangeResToBinaryExp} node from {@link ARangeResToBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARangeResToBinaryExp} node
	*/
	public A outARangeResToBinaryExp(ARangeResToBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ASeqConcatBinaryExp} node from {@link ASeqConcatBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExp} node
	*/
	public A caseASeqConcatBinaryExp(ASeqConcatBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqConcatBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASeqConcatBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqConcatBinaryExp} node from {@link ASeqConcatBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExp} node
	*/
	public A inASeqConcatBinaryExp(ASeqConcatBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ASeqConcatBinaryExp} node from {@link ASeqConcatBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqConcatBinaryExp} node
	*/
	public A outASeqConcatBinaryExp(ASeqConcatBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExp} node from {@link ASetDifferenceBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExp} node
	*/
	public A caseASetDifferenceBinaryExp(ASetDifferenceBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetDifferenceBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetDifferenceBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExp} node from {@link ASetDifferenceBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExp} node
	*/
	public A inASetDifferenceBinaryExp(ASetDifferenceBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ASetDifferenceBinaryExp} node from {@link ASetDifferenceBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetDifferenceBinaryExp} node
	*/
	public A outASetDifferenceBinaryExp(ASetDifferenceBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ASetIntersectBinaryExp} node from {@link ASetIntersectBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExp} node
	*/
	public A caseASetIntersectBinaryExp(ASetIntersectBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetIntersectBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetIntersectBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetIntersectBinaryExp} node from {@link ASetIntersectBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExp} node
	*/
	public A inASetIntersectBinaryExp(ASetIntersectBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ASetIntersectBinaryExp} node from {@link ASetIntersectBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetIntersectBinaryExp} node
	*/
	public A outASetIntersectBinaryExp(ASetIntersectBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ASetUnionBinaryExp} node from {@link ASetUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExp} node
	*/
	public A caseASetUnionBinaryExp(ASetUnionBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetUnionBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASetUnionBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetUnionBinaryExp} node from {@link ASetUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExp} node
	*/
	public A inASetUnionBinaryExp(ASetUnionBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ASetUnionBinaryExp} node from {@link ASetUnionBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetUnionBinaryExp} node
	*/
	public A outASetUnionBinaryExp(ASetUnionBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link AStarStarBinaryExp} node from {@link AStarStarBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AStarStarBinaryExp} node
	*/
	public A caseAStarStarBinaryExp(AStarStarBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStarStarBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAStarStarBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AStarStarBinaryExp} node from {@link AStarStarBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AStarStarBinaryExp} node
	*/
	public A inAStarStarBinaryExp(AStarStarBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link AStarStarBinaryExp} node from {@link AStarStarBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AStarStarBinaryExp} node
	*/
	public A outAStarStarBinaryExp(AStarStarBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link ASubsetBinaryExp} node from {@link ASubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubsetBinaryExp} node
	*/
	public A caseASubsetBinaryExp(ASubsetBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASubsetBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASubsetBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASubsetBinaryExp} node from {@link ASubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubsetBinaryExp} node
	*/
	public A inASubsetBinaryExp(ASubsetBinaryExp node) throws AnalysisException
	{
		return defaultInSBinaryExp(node);
	}


	/**
	* Called by the {@link ASubsetBinaryExp} node from {@link ASubsetBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubsetBinaryExp} node
	*/
	public A outASubsetBinaryExp(ASubsetBinaryExp node) throws AnalysisException
	{
		return defaultOutSBinaryExp(node);
	}


	/**
	* Called by the {@link AAndBooleanBinaryExp} node from {@link AAndBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAndBooleanBinaryExp} node
	*/
	public A caseAAndBooleanBinaryExp(AAndBooleanBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAndBooleanBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAAndBooleanBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AAndBooleanBinaryExp} node from {@link AAndBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAndBooleanBinaryExp} node
	*/
	public A inAAndBooleanBinaryExp(AAndBooleanBinaryExp node) throws AnalysisException
	{
		return defaultInSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link AAndBooleanBinaryExp} node from {@link AAndBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AAndBooleanBinaryExp} node
	*/
	public A outAAndBooleanBinaryExp(AAndBooleanBinaryExp node) throws AnalysisException
	{
		return defaultOutSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link AEquivalentBooleanBinaryExp} node from {@link AEquivalentBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEquivalentBooleanBinaryExp} node
	*/
	public A caseAEquivalentBooleanBinaryExp(AEquivalentBooleanBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAEquivalentBooleanBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAEquivalentBooleanBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AEquivalentBooleanBinaryExp} node from {@link AEquivalentBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEquivalentBooleanBinaryExp} node
	*/
	public A inAEquivalentBooleanBinaryExp(AEquivalentBooleanBinaryExp node) throws AnalysisException
	{
		return defaultInSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link AEquivalentBooleanBinaryExp} node from {@link AEquivalentBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AEquivalentBooleanBinaryExp} node
	*/
	public A outAEquivalentBooleanBinaryExp(AEquivalentBooleanBinaryExp node) throws AnalysisException
	{
		return defaultOutSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link AImpliesBooleanBinaryExp} node from {@link AImpliesBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AImpliesBooleanBinaryExp} node
	*/
	public A caseAImpliesBooleanBinaryExp(AImpliesBooleanBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAImpliesBooleanBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAImpliesBooleanBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AImpliesBooleanBinaryExp} node from {@link AImpliesBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AImpliesBooleanBinaryExp} node
	*/
	public A inAImpliesBooleanBinaryExp(AImpliesBooleanBinaryExp node) throws AnalysisException
	{
		return defaultInSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link AImpliesBooleanBinaryExp} node from {@link AImpliesBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AImpliesBooleanBinaryExp} node
	*/
	public A outAImpliesBooleanBinaryExp(AImpliesBooleanBinaryExp node) throws AnalysisException
	{
		return defaultOutSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link AOrBooleanBinaryExp} node from {@link AOrBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AOrBooleanBinaryExp} node
	*/
	public A caseAOrBooleanBinaryExp(AOrBooleanBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAOrBooleanBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAOrBooleanBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AOrBooleanBinaryExp} node from {@link AOrBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AOrBooleanBinaryExp} node
	*/
	public A inAOrBooleanBinaryExp(AOrBooleanBinaryExp node) throws AnalysisException
	{
		return defaultInSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link AOrBooleanBinaryExp} node from {@link AOrBooleanBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AOrBooleanBinaryExp} node
	*/
	public A outAOrBooleanBinaryExp(AOrBooleanBinaryExp node) throws AnalysisException
	{
		return defaultOutSBooleanBinaryExp(node);
	}


	/**
	* Called by the {@link ADivNumericBinaryExp} node from {@link ADivNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivNumericBinaryExp} node
	*/
	public A caseADivNumericBinaryExp(ADivNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADivNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outADivNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADivNumericBinaryExp} node from {@link ADivNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivNumericBinaryExp} node
	*/
	public A inADivNumericBinaryExp(ADivNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ADivNumericBinaryExp} node from {@link ADivNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivNumericBinaryExp} node
	*/
	public A outADivNumericBinaryExp(ADivNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ADivideNumericBinaryExp} node from {@link ADivideNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExp} node
	*/
	public A caseADivideNumericBinaryExp(ADivideNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADivideNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outADivideNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ADivideNumericBinaryExp} node from {@link ADivideNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExp} node
	*/
	public A inADivideNumericBinaryExp(ADivideNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ADivideNumericBinaryExp} node from {@link ADivideNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ADivideNumericBinaryExp} node
	*/
	public A outADivideNumericBinaryExp(ADivideNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExp} node from {@link AGreaterEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExp} node
	*/
	public A caseAGreaterEqualNumericBinaryExp(AGreaterEqualNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAGreaterEqualNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAGreaterEqualNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExp} node from {@link AGreaterEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExp} node
	*/
	public A inAGreaterEqualNumericBinaryExp(AGreaterEqualNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link AGreaterEqualNumericBinaryExp} node from {@link AGreaterEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualNumericBinaryExp} node
	*/
	public A outAGreaterEqualNumericBinaryExp(AGreaterEqualNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExp} node from {@link AGreaterNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExp} node
	*/
	public A caseAGreaterNumericBinaryExp(AGreaterNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAGreaterNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAGreaterNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExp} node from {@link AGreaterNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExp} node
	*/
	public A inAGreaterNumericBinaryExp(AGreaterNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link AGreaterNumericBinaryExp} node from {@link AGreaterNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterNumericBinaryExp} node
	*/
	public A outAGreaterNumericBinaryExp(AGreaterNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExp} node from {@link ALessEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExp} node
	*/
	public A caseALessEqualNumericBinaryExp(ALessEqualNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALessEqualNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outALessEqualNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExp} node from {@link ALessEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExp} node
	*/
	public A inALessEqualNumericBinaryExp(ALessEqualNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ALessEqualNumericBinaryExp} node from {@link ALessEqualNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualNumericBinaryExp} node
	*/
	public A outALessEqualNumericBinaryExp(ALessEqualNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ALessNumericBinaryExp} node from {@link ALessNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExp} node
	*/
	public A caseALessNumericBinaryExp(ALessNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALessNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outALessNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ALessNumericBinaryExp} node from {@link ALessNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExp} node
	*/
	public A inALessNumericBinaryExp(ALessNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ALessNumericBinaryExp} node from {@link ALessNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ALessNumericBinaryExp} node
	*/
	public A outALessNumericBinaryExp(ALessNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link AModNumericBinaryExp} node from {@link AModNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExp} node
	*/
	public A caseAModNumericBinaryExp(AModNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAModNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAModNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AModNumericBinaryExp} node from {@link AModNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExp} node
	*/
	public A inAModNumericBinaryExp(AModNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link AModNumericBinaryExp} node from {@link AModNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AModNumericBinaryExp} node
	*/
	public A outAModNumericBinaryExp(AModNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link APlusNumericBinaryExp} node from {@link APlusNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExp} node
	*/
	public A caseAPlusNumericBinaryExp(APlusNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPlusNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAPlusNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link APlusNumericBinaryExp} node from {@link APlusNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExp} node
	*/
	public A inAPlusNumericBinaryExp(APlusNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link APlusNumericBinaryExp} node from {@link APlusNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link APlusNumericBinaryExp} node
	*/
	public A outAPlusNumericBinaryExp(APlusNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ARemNumericBinaryExp} node from {@link ARemNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExp} node
	*/
	public A caseARemNumericBinaryExp(ARemNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARemNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outARemNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ARemNumericBinaryExp} node from {@link ARemNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExp} node
	*/
	public A inARemNumericBinaryExp(ARemNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ARemNumericBinaryExp} node from {@link ARemNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ARemNumericBinaryExp} node
	*/
	public A outARemNumericBinaryExp(ARemNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExp} node from {@link ASubtractNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExp} node
	*/
	public A caseASubtractNumericBinaryExp(ASubtractNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASubtractNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outASubtractNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExp} node from {@link ASubtractNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExp} node
	*/
	public A inASubtractNumericBinaryExp(ASubtractNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ASubtractNumericBinaryExp} node from {@link ASubtractNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ASubtractNumericBinaryExp} node
	*/
	public A outASubtractNumericBinaryExp(ASubtractNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ATimesNumericBinaryExp} node from {@link ATimesNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExp} node
	*/
	public A caseATimesNumericBinaryExp(ATimesNumericBinaryExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATimesNumericBinaryExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getOp() != null ) 
		{
			mergeReturns(retVal,node.getOp().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outATimesNumericBinaryExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ATimesNumericBinaryExp} node from {@link ATimesNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExp} node
	*/
	public A inATimesNumericBinaryExp(ATimesNumericBinaryExp node) throws AnalysisException
	{
		return defaultInSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link ATimesNumericBinaryExp} node from {@link ATimesNumericBinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimesNumericBinaryExp} node
	*/
	public A outATimesNumericBinaryExp(ATimesNumericBinaryExp node) throws AnalysisException
	{
		return defaultOutSNumericBinaryExp(node);
	}


	/**
	* Called by the {@link AMapCompMapExp} node from {@link AMapCompMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapCompMapExp} node
	*/
	public A caseAMapCompMapExp(AMapCompMapExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapCompMapExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		{
			List<PMultipleBind> copy = new ArrayList<PMultipleBind>(node.getBindings());
			for( PMultipleBind e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outAMapCompMapExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapCompMapExp} node from {@link AMapCompMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapCompMapExp} node
	*/
	public A inAMapCompMapExp(AMapCompMapExp node) throws AnalysisException
	{
		return defaultInSMapExp(node);
	}


	/**
	* Called by the {@link AMapCompMapExp} node from {@link AMapCompMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapCompMapExp} node
	*/
	public A outAMapCompMapExp(AMapCompMapExp node) throws AnalysisException
	{
		return defaultOutSMapExp(node);
	}


	/**
	* Called by the {@link AMapEnumMapExp} node from {@link AMapEnumMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapEnumMapExp} node
	*/
	public A caseAMapEnumMapExp(AMapEnumMapExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapEnumMapExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AMapletExp> copy = new ArrayList<AMapletExp>(node.getMembers());
			for( AMapletExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getDomTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getRngTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAMapEnumMapExp(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapEnumMapExp} node from {@link AMapEnumMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapEnumMapExp} node
	*/
	public A inAMapEnumMapExp(AMapEnumMapExp node) throws AnalysisException
	{
		return defaultInSMapExp(node);
	}


	/**
	* Called by the {@link AMapEnumMapExp} node from {@link AMapEnumMapExp#apply(IAnalysis)}.
	* @param node the calling {@link AMapEnumMapExp} node
	*/
	public A outAMapEnumMapExp(AMapEnumMapExp node) throws AnalysisException
	{
		return defaultOutSMapExp(node);
	}


	/**
	* Called by the {@link ASeqCompSeqExp} node from {@link ASeqCompSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqCompSeqExp} node
	*/
	public A caseASeqCompSeqExp(ASeqCompSeqExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqCompSeqExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		if(node.getSetBind() != null && !_visitedNodes.contains(node.getSetBind())) 
		{
			mergeReturns(retVal,node.getSetBind().apply(this));
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outASeqCompSeqExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqCompSeqExp} node from {@link ASeqCompSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqCompSeqExp} node
	*/
	public A inASeqCompSeqExp(ASeqCompSeqExp node) throws AnalysisException
	{
		return defaultInSSeqExp(node);
	}


	/**
	* Called by the {@link ASeqCompSeqExp} node from {@link ASeqCompSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqCompSeqExp} node
	*/
	public A outASeqCompSeqExp(ASeqCompSeqExp node) throws AnalysisException
	{
		return defaultOutSSeqExp(node);
	}


	/**
	* Called by the {@link ASeqEnumSeqExp} node from {@link ASeqEnumSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqEnumSeqExp} node
	*/
	public A caseASeqEnumSeqExp(ASeqEnumSeqExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqEnumSeqExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getMembers());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outASeqEnumSeqExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqEnumSeqExp} node from {@link ASeqEnumSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqEnumSeqExp} node
	*/
	public A inASeqEnumSeqExp(ASeqEnumSeqExp node) throws AnalysisException
	{
		return defaultInSSeqExp(node);
	}


	/**
	* Called by the {@link ASeqEnumSeqExp} node from {@link ASeqEnumSeqExp#apply(IAnalysis)}.
	* @param node the calling {@link ASeqEnumSeqExp} node
	*/
	public A outASeqEnumSeqExp(ASeqEnumSeqExp node) throws AnalysisException
	{
		return defaultOutSSeqExp(node);
	}


	/**
	* Called by the {@link ASetCompSetExp} node from {@link ASetCompSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetCompSetExp} node
	*/
	public A caseASetCompSetExp(ASetCompSetExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetCompSetExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getSetType() != null && !_visitedNodes.contains(node.getSetType())) 
		{
			mergeReturns(retVal,node.getSetType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		{
			List<PMultipleBind> copy = new ArrayList<PMultipleBind>(node.getBindings());
			for( PMultipleBind e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPredicate() != null && !_visitedNodes.contains(node.getPredicate())) 
		{
			mergeReturns(retVal,node.getPredicate().apply(this));
		}

		mergeReturns(retVal,outASetCompSetExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetCompSetExp} node from {@link ASetCompSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetCompSetExp} node
	*/
	public A inASetCompSetExp(ASetCompSetExp node) throws AnalysisException
	{
		return defaultInSSetExp(node);
	}


	/**
	* Called by the {@link ASetCompSetExp} node from {@link ASetCompSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetCompSetExp} node
	*/
	public A outASetCompSetExp(ASetCompSetExp node) throws AnalysisException
	{
		return defaultOutSSetExp(node);
	}


	/**
	* Called by the {@link ASetEnumSetExp} node from {@link ASetEnumSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetEnumSetExp} node
	*/
	public A caseASetEnumSetExp(ASetEnumSetExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetEnumSetExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getSetType() != null && !_visitedNodes.contains(node.getSetType())) 
		{
			mergeReturns(retVal,node.getSetType().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getMembers());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outASetEnumSetExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetEnumSetExp} node from {@link ASetEnumSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetEnumSetExp} node
	*/
	public A inASetEnumSetExp(ASetEnumSetExp node) throws AnalysisException
	{
		return defaultInSSetExp(node);
	}


	/**
	* Called by the {@link ASetEnumSetExp} node from {@link ASetEnumSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetEnumSetExp} node
	*/
	public A outASetEnumSetExp(ASetEnumSetExp node) throws AnalysisException
	{
		return defaultOutSSetExp(node);
	}


	/**
	* Called by the {@link ASetRangeSetExp} node from {@link ASetRangeSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetRangeSetExp} node
	*/
	public A caseASetRangeSetExp(ASetRangeSetExp node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetRangeSetExp(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getSetType() != null && !_visitedNodes.contains(node.getSetType())) 
		{
			mergeReturns(retVal,node.getSetType().apply(this));
		}
		if(node.getFirst() != null && !_visitedNodes.contains(node.getFirst())) 
		{
			mergeReturns(retVal,node.getFirst().apply(this));
		}
		if(node.getLast() != null && !_visitedNodes.contains(node.getLast())) 
		{
			mergeReturns(retVal,node.getLast().apply(this));
		}
		if(node.getFtype() != null && !_visitedNodes.contains(node.getFtype())) 
		{
			mergeReturns(retVal,node.getFtype().apply(this));
		}
		if(node.getLtype() != null && !_visitedNodes.contains(node.getLtype())) 
		{
			mergeReturns(retVal,node.getLtype().apply(this));
		}

		mergeReturns(retVal,outASetRangeSetExp(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetRangeSetExp} node from {@link ASetRangeSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetRangeSetExp} node
	*/
	public A inASetRangeSetExp(ASetRangeSetExp node) throws AnalysisException
	{
		return defaultInSSetExp(node);
	}


	/**
	* Called by the {@link ASetRangeSetExp} node from {@link ASetRangeSetExp#apply(IAnalysis)}.
	* @param node the calling {@link ASetRangeSetExp} node
	*/
	public A outASetRangeSetExp(ASetRangeSetExp node) throws AnalysisException
	{
		return defaultOutSSetExp(node);
	}


	/**
	* Called by the {@link PModifier} node from {@link PModifier#apply(IAnalysis)}.
	* @param node the calling {@link PModifier} node
	*/
	public A defaultInPModifier(PModifier node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PModifier} node from {@link PModifier#apply(IAnalysis)}.
	* @param node the calling {@link PModifier} node
	*/
	public A defaultOutPModifier(PModifier node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PModifier} node from {@link PModifier#apply(IAnalysis)}.
	* @param node the calling {@link PModifier} node
	*/
	public A defaultPModifier(PModifier node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PModifier} node from {@link PModifier#apply(IAnalysis)}.
	* @param node the calling {@link PModifier} node
	*/
	public A inPModifier(PModifier node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PModifier} node from {@link PModifier#apply(IAnalysis)}.
	* @param node the calling {@link PModifier} node
	*/
	public A outPModifier(PModifier node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ARecordModifier} node from {@link ARecordModifier#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifier} node
	*/
	public A caseARecordModifier(ARecordModifier node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordModifier(node));

		if(node.getTag() != null ) 
		{
			mergeReturns(retVal,node.getTag().apply(this));
		}
		if(node.getValue() != null && !_visitedNodes.contains(node.getValue())) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outARecordModifier(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordModifier} node from {@link ARecordModifier#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifier} node
	*/
	public A inARecordModifier(ARecordModifier node) throws AnalysisException
	{
		return defaultInPModifier(node);
	}


	/**
	* Called by the {@link ARecordModifier} node from {@link ARecordModifier#apply(IAnalysis)}.
	* @param node the calling {@link ARecordModifier} node
	*/
	public A outARecordModifier(ARecordModifier node) throws AnalysisException
	{
		return defaultOutPModifier(node);
	}


	/**
	* Called by the {@link PAlternative} node from {@link PAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PAlternative} node
	*/
	public A defaultInPAlternative(PAlternative node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAlternative} node from {@link PAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PAlternative} node
	*/
	public A defaultOutPAlternative(PAlternative node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PAlternative} node from {@link PAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PAlternative} node
	*/
	public A defaultPAlternative(PAlternative node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PAlternative} node from {@link PAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PAlternative} node
	*/
	public A inPAlternative(PAlternative node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAlternative} node from {@link PAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PAlternative} node
	*/
	public A outPAlternative(PAlternative node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ACaseAlternative} node from {@link ACaseAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternative} node
	*/
	public A caseACaseAlternative(ACaseAlternative node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACaseAlternative(node));

		if(node.getCexp() != null && !_visitedNodes.contains(node.getCexp())) 
		{
			mergeReturns(retVal,node.getCexp().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExpType() != null && !_visitedNodes.contains(node.getExpType())) 
		{
			mergeReturns(retVal,node.getExpType().apply(this));
		}

		mergeReturns(retVal,outACaseAlternative(node));
		return retVal;
	}


	/**
	* Called by the {@link ACaseAlternative} node from {@link ACaseAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternative} node
	*/
	public A inACaseAlternative(ACaseAlternative node) throws AnalysisException
	{
		return defaultInPAlternative(node);
	}


	/**
	* Called by the {@link ACaseAlternative} node from {@link ACaseAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternative} node
	*/
	public A outACaseAlternative(ACaseAlternative node) throws AnalysisException
	{
		return defaultOutPAlternative(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public A defaultInPType(PType node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public A defaultOutPType(PType node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public A defaultPType(PType node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public A inPType(PType node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public A outPType(PType node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link SBasicType} node from {@link SBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SBasicType} node
	*/
	public A defaultInSBasicType(SBasicType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SBasicType} node from {@link SBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SBasicType} node
	*/
	public A defaultOutSBasicType(SBasicType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link SBasicType} node from {@link SBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SBasicType} node
	*/
	public A defaultSBasicType(SBasicType node) throws AnalysisException
	{
		return defaultPType(node);
	}


	/**
	* Called by the {@link SBasicType} node from {@link SBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SBasicType} node
	*/
	public A inSBasicType(SBasicType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SBasicType} node from {@link SBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SBasicType} node
	*/
	public A outSBasicType(SBasicType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link ABracketType} node from {@link ABracketType#apply(IAnalysis)}.
	* @param node the calling {@link ABracketType} node
	*/
	public A caseABracketType(ABracketType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABracketType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outABracketType(node));
		return retVal;
	}


	/**
	* Called by the {@link ABracketType} node from {@link ABracketType#apply(IAnalysis)}.
	* @param node the calling {@link ABracketType} node
	*/
	public A inABracketType(ABracketType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link ABracketType} node from {@link ABracketType#apply(IAnalysis)}.
	* @param node the calling {@link ABracketType} node
	*/
	public A outABracketType(ABracketType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AClassType} node from {@link AClassType#apply(IAnalysis)}.
	* @param node the calling {@link AClassType} node
	*/
	public A caseAClassType(AClassType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAClassType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassdef() != null && !_visitedNodes.contains(node.getClassdef())) 
		{
			mergeReturns(retVal,node.getClassdef().apply(this));
		}

		mergeReturns(retVal,outAClassType(node));
		return retVal;
	}


	/**
	* Called by the {@link AClassType} node from {@link AClassType#apply(IAnalysis)}.
	* @param node the calling {@link AClassType} node
	*/
	public A inAClassType(AClassType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AClassType} node from {@link AClassType#apply(IAnalysis)}.
	* @param node the calling {@link AClassType} node
	*/
	public A outAClassType(AClassType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AFunctionType} node from {@link AFunctionType#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionType} node
	*/
	public A caseAFunctionType(AFunctionType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFunctionType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getParameters());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}

		mergeReturns(retVal,outAFunctionType(node));
		return retVal;
	}


	/**
	* Called by the {@link AFunctionType} node from {@link AFunctionType#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionType} node
	*/
	public A inAFunctionType(AFunctionType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AFunctionType} node from {@link AFunctionType#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionType} node
	*/
	public A outAFunctionType(AFunctionType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link SInvariantType} node from {@link SInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link SInvariantType} node
	*/
	public A defaultInSInvariantType(SInvariantType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SInvariantType} node from {@link SInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link SInvariantType} node
	*/
	public A defaultOutSInvariantType(SInvariantType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link SInvariantType} node from {@link SInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link SInvariantType} node
	*/
	public A defaultSInvariantType(SInvariantType node) throws AnalysisException
	{
		return defaultPType(node);
	}


	/**
	* Called by the {@link SInvariantType} node from {@link SInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link SInvariantType} node
	*/
	public A inSInvariantType(SInvariantType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SInvariantType} node from {@link SInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link SInvariantType} node
	*/
	public A outSInvariantType(SInvariantType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link SMapType} node from {@link SMapType#apply(IAnalysis)}.
	* @param node the calling {@link SMapType} node
	*/
	public A defaultInSMapType(SMapType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SMapType} node from {@link SMapType#apply(IAnalysis)}.
	* @param node the calling {@link SMapType} node
	*/
	public A defaultOutSMapType(SMapType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link SMapType} node from {@link SMapType#apply(IAnalysis)}.
	* @param node the calling {@link SMapType} node
	*/
	public A defaultSMapType(SMapType node) throws AnalysisException
	{
		return defaultPType(node);
	}


	/**
	* Called by the {@link SMapType} node from {@link SMapType#apply(IAnalysis)}.
	* @param node the calling {@link SMapType} node
	*/
	public A inSMapType(SMapType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SMapType} node from {@link SMapType#apply(IAnalysis)}.
	* @param node the calling {@link SMapType} node
	*/
	public A outSMapType(SMapType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AOperationType} node from {@link AOperationType#apply(IAnalysis)}.
	* @param node the calling {@link AOperationType} node
	*/
	public A caseAOperationType(AOperationType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAOperationType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getParameters());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}

		mergeReturns(retVal,outAOperationType(node));
		return retVal;
	}


	/**
	* Called by the {@link AOperationType} node from {@link AOperationType#apply(IAnalysis)}.
	* @param node the calling {@link AOperationType} node
	*/
	public A inAOperationType(AOperationType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AOperationType} node from {@link AOperationType#apply(IAnalysis)}.
	* @param node the calling {@link AOperationType} node
	*/
	public A outAOperationType(AOperationType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AOptionalType} node from {@link AOptionalType#apply(IAnalysis)}.
	* @param node the calling {@link AOptionalType} node
	*/
	public A caseAOptionalType(AOptionalType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAOptionalType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAOptionalType(node));
		return retVal;
	}


	/**
	* Called by the {@link AOptionalType} node from {@link AOptionalType#apply(IAnalysis)}.
	* @param node the calling {@link AOptionalType} node
	*/
	public A inAOptionalType(AOptionalType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AOptionalType} node from {@link AOptionalType#apply(IAnalysis)}.
	* @param node the calling {@link AOptionalType} node
	*/
	public A outAOptionalType(AOptionalType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AParameterType} node from {@link AParameterType#apply(IAnalysis)}.
	* @param node the calling {@link AParameterType} node
	*/
	public A caseAParameterType(AParameterType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAParameterType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outAParameterType(node));
		return retVal;
	}


	/**
	* Called by the {@link AParameterType} node from {@link AParameterType#apply(IAnalysis)}.
	* @param node the calling {@link AParameterType} node
	*/
	public A inAParameterType(AParameterType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AParameterType} node from {@link AParameterType#apply(IAnalysis)}.
	* @param node the calling {@link AParameterType} node
	*/
	public A outAParameterType(AParameterType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AProductType} node from {@link AProductType#apply(IAnalysis)}.
	* @param node the calling {@link AProductType} node
	*/
	public A caseAProductType(AProductType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAProductType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAProductType(node));
		return retVal;
	}


	/**
	* Called by the {@link AProductType} node from {@link AProductType#apply(IAnalysis)}.
	* @param node the calling {@link AProductType} node
	*/
	public A inAProductType(AProductType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AProductType} node from {@link AProductType#apply(IAnalysis)}.
	* @param node the calling {@link AProductType} node
	*/
	public A outAProductType(AProductType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AQuoteType} node from {@link AQuoteType#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteType} node
	*/
	public A caseAQuoteType(AQuoteType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAQuoteType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAQuoteType(node));
		return retVal;
	}


	/**
	* Called by the {@link AQuoteType} node from {@link AQuoteType#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteType} node
	*/
	public A inAQuoteType(AQuoteType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AQuoteType} node from {@link AQuoteType#apply(IAnalysis)}.
	* @param node the calling {@link AQuoteType} node
	*/
	public A outAQuoteType(AQuoteType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link SSeqType} node from {@link SSeqType#apply(IAnalysis)}.
	* @param node the calling {@link SSeqType} node
	*/
	public A defaultInSSeqType(SSeqType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SSeqType} node from {@link SSeqType#apply(IAnalysis)}.
	* @param node the calling {@link SSeqType} node
	*/
	public A defaultOutSSeqType(SSeqType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link SSeqType} node from {@link SSeqType#apply(IAnalysis)}.
	* @param node the calling {@link SSeqType} node
	*/
	public A defaultSSeqType(SSeqType node) throws AnalysisException
	{
		return defaultPType(node);
	}


	/**
	* Called by the {@link SSeqType} node from {@link SSeqType#apply(IAnalysis)}.
	* @param node the calling {@link SSeqType} node
	*/
	public A inSSeqType(SSeqType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link SSeqType} node from {@link SSeqType#apply(IAnalysis)}.
	* @param node the calling {@link SSeqType} node
	*/
	public A outSSeqType(SSeqType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link ASetType} node from {@link ASetType#apply(IAnalysis)}.
	* @param node the calling {@link ASetType} node
	*/
	public A caseASetType(ASetType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getSetof() != null && !_visitedNodes.contains(node.getSetof())) 
		{
			mergeReturns(retVal,node.getSetof().apply(this));
		}

		mergeReturns(retVal,outASetType(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetType} node from {@link ASetType#apply(IAnalysis)}.
	* @param node the calling {@link ASetType} node
	*/
	public A inASetType(ASetType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link ASetType} node from {@link ASetType#apply(IAnalysis)}.
	* @param node the calling {@link ASetType} node
	*/
	public A outASetType(ASetType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AUndefinedType} node from {@link AUndefinedType#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedType} node
	*/
	public A caseAUndefinedType(AUndefinedType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUndefinedType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAUndefinedType(node));
		return retVal;
	}


	/**
	* Called by the {@link AUndefinedType} node from {@link AUndefinedType#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedType} node
	*/
	public A inAUndefinedType(AUndefinedType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AUndefinedType} node from {@link AUndefinedType#apply(IAnalysis)}.
	* @param node the calling {@link AUndefinedType} node
	*/
	public A outAUndefinedType(AUndefinedType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AUnionType} node from {@link AUnionType#apply(IAnalysis)}.
	* @param node the calling {@link AUnionType} node
	*/
	public A caseAUnionType(AUnionType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnionType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getTypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getSeqType() != null && !_visitedNodes.contains(node.getSeqType())) 
		{
			mergeReturns(retVal,node.getSeqType().apply(this));
		}
		if(node.getSetType() != null && !_visitedNodes.contains(node.getSetType())) 
		{
			mergeReturns(retVal,node.getSetType().apply(this));
		}
		if(node.getMapType() != null && !_visitedNodes.contains(node.getMapType())) 
		{
			mergeReturns(retVal,node.getMapType().apply(this));
		}
		if(node.getProdType() != null && !_visitedNodes.contains(node.getProdType())) 
		{
			mergeReturns(retVal,node.getProdType().apply(this));
		}
		if(node.getFuncType() != null && !_visitedNodes.contains(node.getFuncType())) 
		{
			mergeReturns(retVal,node.getFuncType().apply(this));
		}
		if(node.getOpType() != null && !_visitedNodes.contains(node.getOpType())) 
		{
			mergeReturns(retVal,node.getOpType().apply(this));
		}
		if(node.getNumType() != null && !_visitedNodes.contains(node.getNumType())) 
		{
			mergeReturns(retVal,node.getNumType().apply(this));
		}
		if(node.getRecType() != null && !_visitedNodes.contains(node.getRecType())) 
		{
			mergeReturns(retVal,node.getRecType().apply(this));
		}
		if(node.getClassType() != null && !_visitedNodes.contains(node.getClassType())) 
		{
			mergeReturns(retVal,node.getClassType().apply(this));
		}

		mergeReturns(retVal,outAUnionType(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnionType} node from {@link AUnionType#apply(IAnalysis)}.
	* @param node the calling {@link AUnionType} node
	*/
	public A inAUnionType(AUnionType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AUnionType} node from {@link AUnionType#apply(IAnalysis)}.
	* @param node the calling {@link AUnionType} node
	*/
	public A outAUnionType(AUnionType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AUnknownType} node from {@link AUnknownType#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownType} node
	*/
	public A caseAUnknownType(AUnknownType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnknownType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAUnknownType(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnknownType} node from {@link AUnknownType#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownType} node
	*/
	public A inAUnknownType(AUnknownType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AUnknownType} node from {@link AUnknownType#apply(IAnalysis)}.
	* @param node the calling {@link AUnknownType} node
	*/
	public A outAUnknownType(AUnknownType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AUnresolvedType} node from {@link AUnresolvedType#apply(IAnalysis)}.
	* @param node the calling {@link AUnresolvedType} node
	*/
	public A caseAUnresolvedType(AUnresolvedType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnresolvedType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outAUnresolvedType(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnresolvedType} node from {@link AUnresolvedType#apply(IAnalysis)}.
	* @param node the calling {@link AUnresolvedType} node
	*/
	public A inAUnresolvedType(AUnresolvedType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AUnresolvedType} node from {@link AUnresolvedType#apply(IAnalysis)}.
	* @param node the calling {@link AUnresolvedType} node
	*/
	public A outAUnresolvedType(AUnresolvedType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AVoidReturnType} node from {@link AVoidReturnType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidReturnType} node
	*/
	public A caseAVoidReturnType(AVoidReturnType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAVoidReturnType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAVoidReturnType(node));
		return retVal;
	}


	/**
	* Called by the {@link AVoidReturnType} node from {@link AVoidReturnType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidReturnType} node
	*/
	public A inAVoidReturnType(AVoidReturnType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AVoidReturnType} node from {@link AVoidReturnType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidReturnType} node
	*/
	public A outAVoidReturnType(AVoidReturnType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link AVoidType} node from {@link AVoidType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidType} node
	*/
	public A caseAVoidType(AVoidType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAVoidType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAVoidType(node));
		return retVal;
	}


	/**
	* Called by the {@link AVoidType} node from {@link AVoidType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidType} node
	*/
	public A inAVoidType(AVoidType node) throws AnalysisException
	{
		return defaultInPType(node);
	}


	/**
	* Called by the {@link AVoidType} node from {@link AVoidType#apply(IAnalysis)}.
	* @param node the calling {@link AVoidType} node
	*/
	public A outAVoidType(AVoidType node) throws AnalysisException
	{
		return defaultOutPType(node);
	}


	/**
	* Called by the {@link ASeqSeqType} node from {@link ASeqSeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqType} node
	*/
	public A caseASeqSeqType(ASeqSeqType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqSeqType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getSeqof() != null && !_visitedNodes.contains(node.getSeqof())) 
		{
			mergeReturns(retVal,node.getSeqof().apply(this));
		}

		mergeReturns(retVal,outASeqSeqType(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqSeqType} node from {@link ASeqSeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqType} node
	*/
	public A inASeqSeqType(ASeqSeqType node) throws AnalysisException
	{
		return defaultInSSeqType(node);
	}


	/**
	* Called by the {@link ASeqSeqType} node from {@link ASeqSeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeqSeqType} node
	*/
	public A outASeqSeqType(ASeqSeqType node) throws AnalysisException
	{
		return defaultOutSSeqType(node);
	}


	/**
	* Called by the {@link ASeq1SeqType} node from {@link ASeq1SeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeq1SeqType} node
	*/
	public A caseASeq1SeqType(ASeq1SeqType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeq1SeqType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getSeqof() != null && !_visitedNodes.contains(node.getSeqof())) 
		{
			mergeReturns(retVal,node.getSeqof().apply(this));
		}

		mergeReturns(retVal,outASeq1SeqType(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeq1SeqType} node from {@link ASeq1SeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeq1SeqType} node
	*/
	public A inASeq1SeqType(ASeq1SeqType node) throws AnalysisException
	{
		return defaultInSSeqType(node);
	}


	/**
	* Called by the {@link ASeq1SeqType} node from {@link ASeq1SeqType#apply(IAnalysis)}.
	* @param node the calling {@link ASeq1SeqType} node
	*/
	public A outASeq1SeqType(ASeq1SeqType node) throws AnalysisException
	{
		return defaultOutSSeqType(node);
	}


	/**
	* Called by the {@link AInMapMapType} node from {@link AInMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AInMapMapType} node
	*/
	public A caseAInMapMapType(AInMapMapType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInMapMapType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}

		mergeReturns(retVal,outAInMapMapType(node));
		return retVal;
	}


	/**
	* Called by the {@link AInMapMapType} node from {@link AInMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AInMapMapType} node
	*/
	public A inAInMapMapType(AInMapMapType node) throws AnalysisException
	{
		return defaultInSMapType(node);
	}


	/**
	* Called by the {@link AInMapMapType} node from {@link AInMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AInMapMapType} node
	*/
	public A outAInMapMapType(AInMapMapType node) throws AnalysisException
	{
		return defaultOutSMapType(node);
	}


	/**
	* Called by the {@link AMapMapType} node from {@link AMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapType} node
	*/
	public A caseAMapMapType(AMapMapType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapMapType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}

		mergeReturns(retVal,outAMapMapType(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapMapType} node from {@link AMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapType} node
	*/
	public A inAMapMapType(AMapMapType node) throws AnalysisException
	{
		return defaultInSMapType(node);
	}


	/**
	* Called by the {@link AMapMapType} node from {@link AMapMapType#apply(IAnalysis)}.
	* @param node the calling {@link AMapMapType} node
	*/
	public A outAMapMapType(AMapMapType node) throws AnalysisException
	{
		return defaultOutSMapType(node);
	}


	/**
	* Called by the {@link ANamedInvariantType} node from {@link ANamedInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ANamedInvariantType} node
	*/
	public A caseANamedInvariantType(ANamedInvariantType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANamedInvariantType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getInvDef() != null && !_visitedNodes.contains(node.getInvDef())) 
		{
			mergeReturns(retVal,node.getInvDef().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outANamedInvariantType(node));
		return retVal;
	}


	/**
	* Called by the {@link ANamedInvariantType} node from {@link ANamedInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ANamedInvariantType} node
	*/
	public A inANamedInvariantType(ANamedInvariantType node) throws AnalysisException
	{
		return defaultInSInvariantType(node);
	}


	/**
	* Called by the {@link ANamedInvariantType} node from {@link ANamedInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ANamedInvariantType} node
	*/
	public A outANamedInvariantType(ANamedInvariantType node) throws AnalysisException
	{
		return defaultOutSInvariantType(node);
	}


	/**
	* Called by the {@link ARecordInvariantType} node from {@link ARecordInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ARecordInvariantType} node
	*/
	public A caseARecordInvariantType(ARecordInvariantType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordInvariantType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getInvDef() != null && !_visitedNodes.contains(node.getInvDef())) 
		{
			mergeReturns(retVal,node.getInvDef().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		{
			List<AFieldField> copy = new ArrayList<AFieldField>(node.getFields());
			for( AFieldField e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outARecordInvariantType(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordInvariantType} node from {@link ARecordInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ARecordInvariantType} node
	*/
	public A inARecordInvariantType(ARecordInvariantType node) throws AnalysisException
	{
		return defaultInSInvariantType(node);
	}


	/**
	* Called by the {@link ARecordInvariantType} node from {@link ARecordInvariantType#apply(IAnalysis)}.
	* @param node the calling {@link ARecordInvariantType} node
	*/
	public A outARecordInvariantType(ARecordInvariantType node) throws AnalysisException
	{
		return defaultOutSInvariantType(node);
	}


	/**
	* Called by the {@link ABooleanBasicType} node from {@link ABooleanBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanBasicType} node
	*/
	public A caseABooleanBasicType(ABooleanBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABooleanBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outABooleanBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link ABooleanBasicType} node from {@link ABooleanBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanBasicType} node
	*/
	public A inABooleanBasicType(ABooleanBasicType node) throws AnalysisException
	{
		return defaultInSBasicType(node);
	}


	/**
	* Called by the {@link ABooleanBasicType} node from {@link ABooleanBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanBasicType} node
	*/
	public A outABooleanBasicType(ABooleanBasicType node) throws AnalysisException
	{
		return defaultOutSBasicType(node);
	}


	/**
	* Called by the {@link ACharBasicType} node from {@link ACharBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicType} node
	*/
	public A caseACharBasicType(ACharBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outACharBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharBasicType} node from {@link ACharBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicType} node
	*/
	public A inACharBasicType(ACharBasicType node) throws AnalysisException
	{
		return defaultInSBasicType(node);
	}


	/**
	* Called by the {@link ACharBasicType} node from {@link ACharBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ACharBasicType} node
	*/
	public A outACharBasicType(ACharBasicType node) throws AnalysisException
	{
		return defaultOutSBasicType(node);
	}


	/**
	* Called by the {@link SNumericBasicType} node from {@link SNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicType} node
	*/
	public A defaultInSNumericBasicType(SNumericBasicType node) throws AnalysisException
	{
		return defaultInSBasicType(node);
	}


	/**
	* Called by the {@link SNumericBasicType} node from {@link SNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicType} node
	*/
	public A defaultOutSNumericBasicType(SNumericBasicType node) throws AnalysisException
	{
		return defaultOutSBasicType(node);
	}


	/**
	* Called by the {@link SNumericBasicType} node from {@link SNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicType} node
	*/
	public A defaultSNumericBasicType(SNumericBasicType node) throws AnalysisException
	{
		return defaultSBasicType(node);
	}


	/**
	* Called by the {@link SNumericBasicType} node from {@link SNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicType} node
	*/
	public A inSNumericBasicType(SNumericBasicType node) throws AnalysisException
	{
		return defaultInSBasicType(node);
	}


	/**
	* Called by the {@link SNumericBasicType} node from {@link SNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link SNumericBasicType} node
	*/
	public A outSNumericBasicType(SNumericBasicType node) throws AnalysisException
	{
		return defaultOutSBasicType(node);
	}


	/**
	* Called by the {@link ATokenBasicType} node from {@link ATokenBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicType} node
	*/
	public A caseATokenBasicType(ATokenBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATokenBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATokenBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link ATokenBasicType} node from {@link ATokenBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicType} node
	*/
	public A inATokenBasicType(ATokenBasicType node) throws AnalysisException
	{
		return defaultInSBasicType(node);
	}


	/**
	* Called by the {@link ATokenBasicType} node from {@link ATokenBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ATokenBasicType} node
	*/
	public A outATokenBasicType(ATokenBasicType node) throws AnalysisException
	{
		return defaultOutSBasicType(node);
	}


	/**
	* Called by the {@link AIntNumericBasicType} node from {@link AIntNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicType} node
	*/
	public A caseAIntNumericBasicType(AIntNumericBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntNumericBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAIntNumericBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntNumericBasicType} node from {@link AIntNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicType} node
	*/
	public A inAIntNumericBasicType(AIntNumericBasicType node) throws AnalysisException
	{
		return defaultInSNumericBasicType(node);
	}


	/**
	* Called by the {@link AIntNumericBasicType} node from {@link AIntNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link AIntNumericBasicType} node
	*/
	public A outAIntNumericBasicType(AIntNumericBasicType node) throws AnalysisException
	{
		return defaultOutSNumericBasicType(node);
	}


	/**
	* Called by the {@link ANatOneNumericBasicType} node from {@link ANatOneNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatOneNumericBasicType} node
	*/
	public A caseANatOneNumericBasicType(ANatOneNumericBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANatOneNumericBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANatOneNumericBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link ANatOneNumericBasicType} node from {@link ANatOneNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatOneNumericBasicType} node
	*/
	public A inANatOneNumericBasicType(ANatOneNumericBasicType node) throws AnalysisException
	{
		return defaultInSNumericBasicType(node);
	}


	/**
	* Called by the {@link ANatOneNumericBasicType} node from {@link ANatOneNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatOneNumericBasicType} node
	*/
	public A outANatOneNumericBasicType(ANatOneNumericBasicType node) throws AnalysisException
	{
		return defaultOutSNumericBasicType(node);
	}


	/**
	* Called by the {@link ANatNumericBasicType} node from {@link ANatNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicType} node
	*/
	public A caseANatNumericBasicType(ANatNumericBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANatNumericBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANatNumericBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link ANatNumericBasicType} node from {@link ANatNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicType} node
	*/
	public A inANatNumericBasicType(ANatNumericBasicType node) throws AnalysisException
	{
		return defaultInSNumericBasicType(node);
	}


	/**
	* Called by the {@link ANatNumericBasicType} node from {@link ANatNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ANatNumericBasicType} node
	*/
	public A outANatNumericBasicType(ANatNumericBasicType node) throws AnalysisException
	{
		return defaultOutSNumericBasicType(node);
	}


	/**
	* Called by the {@link ARationalNumericBasicType} node from {@link ARationalNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARationalNumericBasicType} node
	*/
	public A caseARationalNumericBasicType(ARationalNumericBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARationalNumericBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outARationalNumericBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link ARationalNumericBasicType} node from {@link ARationalNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARationalNumericBasicType} node
	*/
	public A inARationalNumericBasicType(ARationalNumericBasicType node) throws AnalysisException
	{
		return defaultInSNumericBasicType(node);
	}


	/**
	* Called by the {@link ARationalNumericBasicType} node from {@link ARationalNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARationalNumericBasicType} node
	*/
	public A outARationalNumericBasicType(ARationalNumericBasicType node) throws AnalysisException
	{
		return defaultOutSNumericBasicType(node);
	}


	/**
	* Called by the {@link ARealNumericBasicType} node from {@link ARealNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicType} node
	*/
	public A caseARealNumericBasicType(ARealNumericBasicType node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealNumericBasicType(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outARealNumericBasicType(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealNumericBasicType} node from {@link ARealNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicType} node
	*/
	public A inARealNumericBasicType(ARealNumericBasicType node) throws AnalysisException
	{
		return defaultInSNumericBasicType(node);
	}


	/**
	* Called by the {@link ARealNumericBasicType} node from {@link ARealNumericBasicType#apply(IAnalysis)}.
	* @param node the calling {@link ARealNumericBasicType} node
	*/
	public A outARealNumericBasicType(ARealNumericBasicType node) throws AnalysisException
	{
		return defaultOutSNumericBasicType(node);
	}


	/**
	* Called by the {@link PField} node from {@link PField#apply(IAnalysis)}.
	* @param node the calling {@link PField} node
	*/
	public A defaultInPField(PField node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PField} node from {@link PField#apply(IAnalysis)}.
	* @param node the calling {@link PField} node
	*/
	public A defaultOutPField(PField node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PField} node from {@link PField#apply(IAnalysis)}.
	* @param node the calling {@link PField} node
	*/
	public A defaultPField(PField node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PField} node from {@link PField#apply(IAnalysis)}.
	* @param node the calling {@link PField} node
	*/
	public A inPField(PField node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PField} node from {@link PField#apply(IAnalysis)}.
	* @param node the calling {@link PField} node
	*/
	public A outPField(PField node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AFieldField} node from {@link AFieldField#apply(IAnalysis)}.
	* @param node the calling {@link AFieldField} node
	*/
	public A caseAFieldField(AFieldField node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldField(node));

		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getTagname() != null ) 
		{
			mergeReturns(retVal,node.getTagname().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAFieldField(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldField} node from {@link AFieldField#apply(IAnalysis)}.
	* @param node the calling {@link AFieldField} node
	*/
	public A inAFieldField(AFieldField node) throws AnalysisException
	{
		return defaultInPField(node);
	}


	/**
	* Called by the {@link AFieldField} node from {@link AFieldField#apply(IAnalysis)}.
	* @param node the calling {@link AFieldField} node
	*/
	public A outAFieldField(AFieldField node) throws AnalysisException
	{
		return defaultOutPField(node);
	}


	/**
	* Called by the {@link PAccessSpecifier} node from {@link PAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link PAccessSpecifier} node
	*/
	public A defaultInPAccessSpecifier(PAccessSpecifier node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAccessSpecifier} node from {@link PAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link PAccessSpecifier} node
	*/
	public A defaultOutPAccessSpecifier(PAccessSpecifier node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PAccessSpecifier} node from {@link PAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link PAccessSpecifier} node
	*/
	public A defaultPAccessSpecifier(PAccessSpecifier node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PAccessSpecifier} node from {@link PAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link PAccessSpecifier} node
	*/
	public A inPAccessSpecifier(PAccessSpecifier node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAccessSpecifier} node from {@link PAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link PAccessSpecifier} node
	*/
	public A outPAccessSpecifier(PAccessSpecifier node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AAccessSpecifierAccessSpecifier} node from {@link AAccessSpecifierAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link AAccessSpecifierAccessSpecifier} node
	*/
	public A caseAAccessSpecifierAccessSpecifier(AAccessSpecifierAccessSpecifier node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAccessSpecifierAccessSpecifier(node));

		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getStatic() != null && !_visitedNodes.contains(node.getStatic())) 
		{
			mergeReturns(retVal,node.getStatic().apply(this));
		}
		if(node.getAsync() != null && !_visitedNodes.contains(node.getAsync())) 
		{
			mergeReturns(retVal,node.getAsync().apply(this));
		}

		mergeReturns(retVal,outAAccessSpecifierAccessSpecifier(node));
		return retVal;
	}


	/**
	* Called by the {@link AAccessSpecifierAccessSpecifier} node from {@link AAccessSpecifierAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link AAccessSpecifierAccessSpecifier} node
	*/
	public A inAAccessSpecifierAccessSpecifier(AAccessSpecifierAccessSpecifier node) throws AnalysisException
	{
		return defaultInPAccessSpecifier(node);
	}


	/**
	* Called by the {@link AAccessSpecifierAccessSpecifier} node from {@link AAccessSpecifierAccessSpecifier#apply(IAnalysis)}.
	* @param node the calling {@link AAccessSpecifierAccessSpecifier} node
	*/
	public A outAAccessSpecifierAccessSpecifier(AAccessSpecifierAccessSpecifier node) throws AnalysisException
	{
		return defaultOutPAccessSpecifier(node);
	}


	/**
	* Called by the {@link PAccess} node from {@link PAccess#apply(IAnalysis)}.
	* @param node the calling {@link PAccess} node
	*/
	public A defaultInPAccess(PAccess node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAccess} node from {@link PAccess#apply(IAnalysis)}.
	* @param node the calling {@link PAccess} node
	*/
	public A defaultOutPAccess(PAccess node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PAccess} node from {@link PAccess#apply(IAnalysis)}.
	* @param node the calling {@link PAccess} node
	*/
	public A defaultPAccess(PAccess node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PAccess} node from {@link PAccess#apply(IAnalysis)}.
	* @param node the calling {@link PAccess} node
	*/
	public A inPAccess(PAccess node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAccess} node from {@link PAccess#apply(IAnalysis)}.
	* @param node the calling {@link PAccess} node
	*/
	public A outPAccess(PAccess node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link APublicAccess} node from {@link APublicAccess#apply(IAnalysis)}.
	* @param node the calling {@link APublicAccess} node
	*/
	public A caseAPublicAccess(APublicAccess node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPublicAccess(node));


		mergeReturns(retVal,outAPublicAccess(node));
		return retVal;
	}


	/**
	* Called by the {@link APublicAccess} node from {@link APublicAccess#apply(IAnalysis)}.
	* @param node the calling {@link APublicAccess} node
	*/
	public A inAPublicAccess(APublicAccess node) throws AnalysisException
	{
		return defaultInPAccess(node);
	}


	/**
	* Called by the {@link APublicAccess} node from {@link APublicAccess#apply(IAnalysis)}.
	* @param node the calling {@link APublicAccess} node
	*/
	public A outAPublicAccess(APublicAccess node) throws AnalysisException
	{
		return defaultOutPAccess(node);
	}


	/**
	* Called by the {@link AProtectedAccess} node from {@link AProtectedAccess#apply(IAnalysis)}.
	* @param node the calling {@link AProtectedAccess} node
	*/
	public A caseAProtectedAccess(AProtectedAccess node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAProtectedAccess(node));


		mergeReturns(retVal,outAProtectedAccess(node));
		return retVal;
	}


	/**
	* Called by the {@link AProtectedAccess} node from {@link AProtectedAccess#apply(IAnalysis)}.
	* @param node the calling {@link AProtectedAccess} node
	*/
	public A inAProtectedAccess(AProtectedAccess node) throws AnalysisException
	{
		return defaultInPAccess(node);
	}


	/**
	* Called by the {@link AProtectedAccess} node from {@link AProtectedAccess#apply(IAnalysis)}.
	* @param node the calling {@link AProtectedAccess} node
	*/
	public A outAProtectedAccess(AProtectedAccess node) throws AnalysisException
	{
		return defaultOutPAccess(node);
	}


	/**
	* Called by the {@link APrivateAccess} node from {@link APrivateAccess#apply(IAnalysis)}.
	* @param node the calling {@link APrivateAccess} node
	*/
	public A caseAPrivateAccess(APrivateAccess node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPrivateAccess(node));


		mergeReturns(retVal,outAPrivateAccess(node));
		return retVal;
	}


	/**
	* Called by the {@link APrivateAccess} node from {@link APrivateAccess#apply(IAnalysis)}.
	* @param node the calling {@link APrivateAccess} node
	*/
	public A inAPrivateAccess(APrivateAccess node) throws AnalysisException
	{
		return defaultInPAccess(node);
	}


	/**
	* Called by the {@link APrivateAccess} node from {@link APrivateAccess#apply(IAnalysis)}.
	* @param node the calling {@link APrivateAccess} node
	*/
	public A outAPrivateAccess(APrivateAccess node) throws AnalysisException
	{
		return defaultOutPAccess(node);
	}


	/**
	* Called by the {@link PPattern} node from {@link PPattern#apply(IAnalysis)}.
	* @param node the calling {@link PPattern} node
	*/
	public A defaultInPPattern(PPattern node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PPattern} node from {@link PPattern#apply(IAnalysis)}.
	* @param node the calling {@link PPattern} node
	*/
	public A defaultOutPPattern(PPattern node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PPattern} node from {@link PPattern#apply(IAnalysis)}.
	* @param node the calling {@link PPattern} node
	*/
	public A defaultPPattern(PPattern node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PPattern} node from {@link PPattern#apply(IAnalysis)}.
	* @param node the calling {@link PPattern} node
	*/
	public A inPPattern(PPattern node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PPattern} node from {@link PPattern#apply(IAnalysis)}.
	* @param node the calling {@link PPattern} node
	*/
	public A outPPattern(PPattern node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ABooleanPattern} node from {@link ABooleanPattern#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanPattern} node
	*/
	public A caseABooleanPattern(ABooleanPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABooleanPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outABooleanPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ABooleanPattern} node from {@link ABooleanPattern#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanPattern} node
	*/
	public A inABooleanPattern(ABooleanPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ABooleanPattern} node from {@link ABooleanPattern#apply(IAnalysis)}.
	* @param node the calling {@link ABooleanPattern} node
	*/
	public A outABooleanPattern(ABooleanPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link ACharacterPattern} node from {@link ACharacterPattern#apply(IAnalysis)}.
	* @param node the calling {@link ACharacterPattern} node
	*/
	public A caseACharacterPattern(ACharacterPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACharacterPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outACharacterPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ACharacterPattern} node from {@link ACharacterPattern#apply(IAnalysis)}.
	* @param node the calling {@link ACharacterPattern} node
	*/
	public A inACharacterPattern(ACharacterPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ACharacterPattern} node from {@link ACharacterPattern#apply(IAnalysis)}.
	* @param node the calling {@link ACharacterPattern} node
	*/
	public A outACharacterPattern(ACharacterPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AConcatenationPattern} node from {@link AConcatenationPattern#apply(IAnalysis)}.
	* @param node the calling {@link AConcatenationPattern} node
	*/
	public A caseAConcatenationPattern(AConcatenationPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAConcatenationPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAConcatenationPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AConcatenationPattern} node from {@link AConcatenationPattern#apply(IAnalysis)}.
	* @param node the calling {@link AConcatenationPattern} node
	*/
	public A inAConcatenationPattern(AConcatenationPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AConcatenationPattern} node from {@link AConcatenationPattern#apply(IAnalysis)}.
	* @param node the calling {@link AConcatenationPattern} node
	*/
	public A outAConcatenationPattern(AConcatenationPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AExpressionPattern} node from {@link AExpressionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AExpressionPattern} node
	*/
	public A caseAExpressionPattern(AExpressionPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExpressionPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outAExpressionPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AExpressionPattern} node from {@link AExpressionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AExpressionPattern} node
	*/
	public A inAExpressionPattern(AExpressionPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AExpressionPattern} node from {@link AExpressionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AExpressionPattern} node
	*/
	public A outAExpressionPattern(AExpressionPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AIdentifierPattern} node from {@link AIdentifierPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPattern} node
	*/
	public A caseAIdentifierPattern(AIdentifierPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIdentifierPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outAIdentifierPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AIdentifierPattern} node from {@link AIdentifierPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPattern} node
	*/
	public A inAIdentifierPattern(AIdentifierPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AIdentifierPattern} node from {@link AIdentifierPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierPattern} node
	*/
	public A outAIdentifierPattern(AIdentifierPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AIgnorePattern} node from {@link AIgnorePattern#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePattern} node
	*/
	public A caseAIgnorePattern(AIgnorePattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIgnorePattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getAnyName() != null ) 
		{
			mergeReturns(retVal,node.getAnyName().apply(this));
		}

		mergeReturns(retVal,outAIgnorePattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AIgnorePattern} node from {@link AIgnorePattern#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePattern} node
	*/
	public A inAIgnorePattern(AIgnorePattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AIgnorePattern} node from {@link AIgnorePattern#apply(IAnalysis)}.
	* @param node the calling {@link AIgnorePattern} node
	*/
	public A outAIgnorePattern(AIgnorePattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AIntegerPattern} node from {@link AIntegerPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIntegerPattern} node
	*/
	public A caseAIntegerPattern(AIntegerPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIntegerPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAIntegerPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AIntegerPattern} node from {@link AIntegerPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIntegerPattern} node
	*/
	public A inAIntegerPattern(AIntegerPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AIntegerPattern} node from {@link AIntegerPattern#apply(IAnalysis)}.
	* @param node the calling {@link AIntegerPattern} node
	*/
	public A outAIntegerPattern(AIntegerPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link ANilPattern} node from {@link ANilPattern#apply(IAnalysis)}.
	* @param node the calling {@link ANilPattern} node
	*/
	public A caseANilPattern(ANilPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANilPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANilPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ANilPattern} node from {@link ANilPattern#apply(IAnalysis)}.
	* @param node the calling {@link ANilPattern} node
	*/
	public A inANilPattern(ANilPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ANilPattern} node from {@link ANilPattern#apply(IAnalysis)}.
	* @param node the calling {@link ANilPattern} node
	*/
	public A outANilPattern(ANilPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AQuotePattern} node from {@link AQuotePattern#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePattern} node
	*/
	public A caseAQuotePattern(AQuotePattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAQuotePattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAQuotePattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AQuotePattern} node from {@link AQuotePattern#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePattern} node
	*/
	public A inAQuotePattern(AQuotePattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AQuotePattern} node from {@link AQuotePattern#apply(IAnalysis)}.
	* @param node the calling {@link AQuotePattern} node
	*/
	public A outAQuotePattern(AQuotePattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link ARealPattern} node from {@link ARealPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARealPattern} node
	*/
	public A caseARealPattern(ARealPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARealPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outARealPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ARealPattern} node from {@link ARealPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARealPattern} node
	*/
	public A inARealPattern(ARealPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ARealPattern} node from {@link ARealPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARealPattern} node
	*/
	public A outARealPattern(ARealPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link ARecordPattern} node from {@link ARecordPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPattern} node
	*/
	public A caseARecordPattern(ARecordPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARecordPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getTypename() != null ) 
		{
			mergeReturns(retVal,node.getTypename().apply(this));
		}
		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getPlist());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outARecordPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ARecordPattern} node from {@link ARecordPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPattern} node
	*/
	public A inARecordPattern(ARecordPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ARecordPattern} node from {@link ARecordPattern#apply(IAnalysis)}.
	* @param node the calling {@link ARecordPattern} node
	*/
	public A outARecordPattern(ARecordPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link ASeqPattern} node from {@link ASeqPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASeqPattern} node
	*/
	public A caseASeqPattern(ASeqPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASeqPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getPlist());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outASeqPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ASeqPattern} node from {@link ASeqPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASeqPattern} node
	*/
	public A inASeqPattern(ASeqPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ASeqPattern} node from {@link ASeqPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASeqPattern} node
	*/
	public A outASeqPattern(ASeqPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link ASetPattern} node from {@link ASetPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASetPattern} node
	*/
	public A caseASetPattern(ASetPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getPlist());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outASetPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetPattern} node from {@link ASetPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASetPattern} node
	*/
	public A inASetPattern(ASetPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ASetPattern} node from {@link ASetPattern#apply(IAnalysis)}.
	* @param node the calling {@link ASetPattern} node
	*/
	public A outASetPattern(ASetPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AStringPattern} node from {@link AStringPattern#apply(IAnalysis)}.
	* @param node the calling {@link AStringPattern} node
	*/
	public A caseAStringPattern(AStringPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStringPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getValue() != null ) 
		{
			mergeReturns(retVal,node.getValue().apply(this));
		}

		mergeReturns(retVal,outAStringPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AStringPattern} node from {@link AStringPattern#apply(IAnalysis)}.
	* @param node the calling {@link AStringPattern} node
	*/
	public A inAStringPattern(AStringPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AStringPattern} node from {@link AStringPattern#apply(IAnalysis)}.
	* @param node the calling {@link AStringPattern} node
	*/
	public A outAStringPattern(AStringPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link ATuplePattern} node from {@link ATuplePattern#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePattern} node
	*/
	public A caseATuplePattern(ATuplePattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATuplePattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getPlist());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATuplePattern(node));
		return retVal;
	}


	/**
	* Called by the {@link ATuplePattern} node from {@link ATuplePattern#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePattern} node
	*/
	public A inATuplePattern(ATuplePattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link ATuplePattern} node from {@link ATuplePattern#apply(IAnalysis)}.
	* @param node the calling {@link ATuplePattern} node
	*/
	public A outATuplePattern(ATuplePattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AUnionPattern} node from {@link AUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AUnionPattern} node
	*/
	public A caseAUnionPattern(AUnionPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUnionPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAUnionPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AUnionPattern} node from {@link AUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AUnionPattern} node
	*/
	public A inAUnionPattern(AUnionPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AUnionPattern} node from {@link AUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AUnionPattern} node
	*/
	public A outAUnionPattern(AUnionPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AMapPattern} node from {@link AMapPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapPattern} node
	*/
	public A caseAMapPattern(AMapPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AMapletPatternMaplet> copy = new ArrayList<AMapletPatternMaplet>(node.getMaplets());
			for( AMapletPatternMaplet e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAMapPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapPattern} node from {@link AMapPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapPattern} node
	*/
	public A inAMapPattern(AMapPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AMapPattern} node from {@link AMapPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapPattern} node
	*/
	public A outAMapPattern(AMapPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AMapUnionPattern} node from {@link AMapUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionPattern} node
	*/
	public A caseAMapUnionPattern(AMapUnionPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapUnionPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAMapUnionPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapUnionPattern} node from {@link AMapUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionPattern} node
	*/
	public A inAMapUnionPattern(AMapUnionPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AMapUnionPattern} node from {@link AMapUnionPattern#apply(IAnalysis)}.
	* @param node the calling {@link AMapUnionPattern} node
	*/
	public A outAMapUnionPattern(AMapUnionPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link AObjectPattern} node from {@link AObjectPattern#apply(IAnalysis)}.
	* @param node the calling {@link AObjectPattern} node
	*/
	public A caseAObjectPattern(AObjectPattern node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAObjectPattern(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getClassname() != null ) 
		{
			mergeReturns(retVal,node.getClassname().apply(this));
		}
		{
			List<ANamePatternPair> copy = new ArrayList<ANamePatternPair>(node.getFields());
			for( ANamePatternPair e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAObjectPattern(node));
		return retVal;
	}


	/**
	* Called by the {@link AObjectPattern} node from {@link AObjectPattern#apply(IAnalysis)}.
	* @param node the calling {@link AObjectPattern} node
	*/
	public A inAObjectPattern(AObjectPattern node) throws AnalysisException
	{
		return defaultInPPattern(node);
	}


	/**
	* Called by the {@link AObjectPattern} node from {@link AObjectPattern#apply(IAnalysis)}.
	* @param node the calling {@link AObjectPattern} node
	*/
	public A outAObjectPattern(AObjectPattern node) throws AnalysisException
	{
		return defaultOutPPattern(node);
	}


	/**
	* Called by the {@link PMaplet} node from {@link PMaplet#apply(IAnalysis)}.
	* @param node the calling {@link PMaplet} node
	*/
	public A defaultInPMaplet(PMaplet node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PMaplet} node from {@link PMaplet#apply(IAnalysis)}.
	* @param node the calling {@link PMaplet} node
	*/
	public A defaultOutPMaplet(PMaplet node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PMaplet} node from {@link PMaplet#apply(IAnalysis)}.
	* @param node the calling {@link PMaplet} node
	*/
	public A defaultPMaplet(PMaplet node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PMaplet} node from {@link PMaplet#apply(IAnalysis)}.
	* @param node the calling {@link PMaplet} node
	*/
	public A inPMaplet(PMaplet node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PMaplet} node from {@link PMaplet#apply(IAnalysis)}.
	* @param node the calling {@link PMaplet} node
	*/
	public A outPMaplet(PMaplet node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AMapletPatternMaplet} node from {@link AMapletPatternMaplet#apply(IAnalysis)}.
	* @param node the calling {@link AMapletPatternMaplet} node
	*/
	public A caseAMapletPatternMaplet(AMapletPatternMaplet node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapletPatternMaplet(node));

		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}

		mergeReturns(retVal,outAMapletPatternMaplet(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapletPatternMaplet} node from {@link AMapletPatternMaplet#apply(IAnalysis)}.
	* @param node the calling {@link AMapletPatternMaplet} node
	*/
	public A inAMapletPatternMaplet(AMapletPatternMaplet node) throws AnalysisException
	{
		return defaultInPMaplet(node);
	}


	/**
	* Called by the {@link AMapletPatternMaplet} node from {@link AMapletPatternMaplet#apply(IAnalysis)}.
	* @param node the calling {@link AMapletPatternMaplet} node
	*/
	public A outAMapletPatternMaplet(AMapletPatternMaplet node) throws AnalysisException
	{
		return defaultOutPMaplet(node);
	}


	/**
	* Called by the {@link PPair} node from {@link PPair#apply(IAnalysis)}.
	* @param node the calling {@link PPair} node
	*/
	public A defaultInPPair(PPair node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PPair} node from {@link PPair#apply(IAnalysis)}.
	* @param node the calling {@link PPair} node
	*/
	public A defaultOutPPair(PPair node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PPair} node from {@link PPair#apply(IAnalysis)}.
	* @param node the calling {@link PPair} node
	*/
	public A defaultPPair(PPair node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PPair} node from {@link PPair#apply(IAnalysis)}.
	* @param node the calling {@link PPair} node
	*/
	public A inPPair(PPair node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PPair} node from {@link PPair#apply(IAnalysis)}.
	* @param node the calling {@link PPair} node
	*/
	public A outPPair(PPair node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link APatternTypePair} node from {@link APatternTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternTypePair} node
	*/
	public A caseAPatternTypePair(APatternTypePair node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPatternTypePair(node));

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAPatternTypePair(node));
		return retVal;
	}


	/**
	* Called by the {@link APatternTypePair} node from {@link APatternTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternTypePair} node
	*/
	public A inAPatternTypePair(APatternTypePair node) throws AnalysisException
	{
		return defaultInPPair(node);
	}


	/**
	* Called by the {@link APatternTypePair} node from {@link APatternTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternTypePair} node
	*/
	public A outAPatternTypePair(APatternTypePair node) throws AnalysisException
	{
		return defaultOutPPair(node);
	}


	/**
	* Called by the {@link APatternListTypePair} node from {@link APatternListTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternListTypePair} node
	*/
	public A caseAPatternListTypePair(APatternListTypePair node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPatternListTypePair(node));

		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getPatterns());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAPatternListTypePair(node));
		return retVal;
	}


	/**
	* Called by the {@link APatternListTypePair} node from {@link APatternListTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternListTypePair} node
	*/
	public A inAPatternListTypePair(APatternListTypePair node) throws AnalysisException
	{
		return defaultInPPair(node);
	}


	/**
	* Called by the {@link APatternListTypePair} node from {@link APatternListTypePair#apply(IAnalysis)}.
	* @param node the calling {@link APatternListTypePair} node
	*/
	public A outAPatternListTypePair(APatternListTypePair node) throws AnalysisException
	{
		return defaultOutPPair(node);
	}


	/**
	* Called by the {@link ANamePatternPair} node from {@link ANamePatternPair#apply(IAnalysis)}.
	* @param node the calling {@link ANamePatternPair} node
	*/
	public A caseANamePatternPair(ANamePatternPair node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANamePatternPair(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}

		mergeReturns(retVal,outANamePatternPair(node));
		return retVal;
	}


	/**
	* Called by the {@link ANamePatternPair} node from {@link ANamePatternPair#apply(IAnalysis)}.
	* @param node the calling {@link ANamePatternPair} node
	*/
	public A inANamePatternPair(ANamePatternPair node) throws AnalysisException
	{
		return defaultInPPair(node);
	}


	/**
	* Called by the {@link ANamePatternPair} node from {@link ANamePatternPair#apply(IAnalysis)}.
	* @param node the calling {@link ANamePatternPair} node
	*/
	public A outANamePatternPair(ANamePatternPair node) throws AnalysisException
	{
		return defaultOutPPair(node);
	}


	/**
	* Called by the {@link PBind} node from {@link PBind#apply(IAnalysis)}.
	* @param node the calling {@link PBind} node
	*/
	public A defaultInPBind(PBind node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PBind} node from {@link PBind#apply(IAnalysis)}.
	* @param node the calling {@link PBind} node
	*/
	public A defaultOutPBind(PBind node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PBind} node from {@link PBind#apply(IAnalysis)}.
	* @param node the calling {@link PBind} node
	*/
	public A defaultPBind(PBind node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PBind} node from {@link PBind#apply(IAnalysis)}.
	* @param node the calling {@link PBind} node
	*/
	public A inPBind(PBind node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PBind} node from {@link PBind#apply(IAnalysis)}.
	* @param node the calling {@link PBind} node
	*/
	public A outPBind(PBind node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ASetBind} node from {@link ASetBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetBind} node
	*/
	public A caseASetBind(ASetBind node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetBind(node));

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			mergeReturns(retVal,node.getSet().apply(this));
		}

		mergeReturns(retVal,outASetBind(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetBind} node from {@link ASetBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetBind} node
	*/
	public A inASetBind(ASetBind node) throws AnalysisException
	{
		return defaultInPBind(node);
	}


	/**
	* Called by the {@link ASetBind} node from {@link ASetBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetBind} node
	*/
	public A outASetBind(ASetBind node) throws AnalysisException
	{
		return defaultOutPBind(node);
	}


	/**
	* Called by the {@link ATypeBind} node from {@link ATypeBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeBind} node
	*/
	public A caseATypeBind(ATypeBind node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeBind(node));

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outATypeBind(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeBind} node from {@link ATypeBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeBind} node
	*/
	public A inATypeBind(ATypeBind node) throws AnalysisException
	{
		return defaultInPBind(node);
	}


	/**
	* Called by the {@link ATypeBind} node from {@link ATypeBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeBind} node
	*/
	public A outATypeBind(ATypeBind node) throws AnalysisException
	{
		return defaultOutPBind(node);
	}


	/**
	* Called by the {@link PMultipleBind} node from {@link PMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link PMultipleBind} node
	*/
	public A defaultInPMultipleBind(PMultipleBind node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PMultipleBind} node from {@link PMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link PMultipleBind} node
	*/
	public A defaultOutPMultipleBind(PMultipleBind node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PMultipleBind} node from {@link PMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link PMultipleBind} node
	*/
	public A defaultPMultipleBind(PMultipleBind node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PMultipleBind} node from {@link PMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link PMultipleBind} node
	*/
	public A inPMultipleBind(PMultipleBind node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PMultipleBind} node from {@link PMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link PMultipleBind} node
	*/
	public A outPMultipleBind(PMultipleBind node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ASetMultipleBind} node from {@link ASetMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBind} node
	*/
	public A caseASetMultipleBind(ASetMultipleBind node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASetMultipleBind(node));

		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getPlist());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			mergeReturns(retVal,node.getSet().apply(this));
		}

		mergeReturns(retVal,outASetMultipleBind(node));
		return retVal;
	}


	/**
	* Called by the {@link ASetMultipleBind} node from {@link ASetMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBind} node
	*/
	public A inASetMultipleBind(ASetMultipleBind node) throws AnalysisException
	{
		return defaultInPMultipleBind(node);
	}


	/**
	* Called by the {@link ASetMultipleBind} node from {@link ASetMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ASetMultipleBind} node
	*/
	public A outASetMultipleBind(ASetMultipleBind node) throws AnalysisException
	{
		return defaultOutPMultipleBind(node);
	}


	/**
	* Called by the {@link ATypeMultipleBind} node from {@link ATypeMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeMultipleBind} node
	*/
	public A caseATypeMultipleBind(ATypeMultipleBind node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeMultipleBind(node));

		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getPlist());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outATypeMultipleBind(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeMultipleBind} node from {@link ATypeMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeMultipleBind} node
	*/
	public A inATypeMultipleBind(ATypeMultipleBind node) throws AnalysisException
	{
		return defaultInPMultipleBind(node);
	}


	/**
	* Called by the {@link ATypeMultipleBind} node from {@link ATypeMultipleBind#apply(IAnalysis)}.
	* @param node the calling {@link ATypeMultipleBind} node
	*/
	public A outATypeMultipleBind(ATypeMultipleBind node) throws AnalysisException
	{
		return defaultOutPMultipleBind(node);
	}


	/**
	* Called by the {@link PPatternBind} node from {@link PPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link PPatternBind} node
	*/
	public A defaultInPPatternBind(PPatternBind node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PPatternBind} node from {@link PPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link PPatternBind} node
	*/
	public A defaultOutPPatternBind(PPatternBind node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PPatternBind} node from {@link PPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link PPatternBind} node
	*/
	public A defaultPPatternBind(PPatternBind node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PPatternBind} node from {@link PPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link PPatternBind} node
	*/
	public A inPPatternBind(PPatternBind node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PPatternBind} node from {@link PPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link PPatternBind} node
	*/
	public A outPPatternBind(PPatternBind node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ADefPatternBind} node from {@link ADefPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link ADefPatternBind} node
	*/
	public A caseADefPatternBind(ADefPatternBind node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADefPatternBind(node));

		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			mergeReturns(retVal,node.getBind().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outADefPatternBind(node));
		return retVal;
	}


	/**
	* Called by the {@link ADefPatternBind} node from {@link ADefPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link ADefPatternBind} node
	*/
	public A inADefPatternBind(ADefPatternBind node) throws AnalysisException
	{
		return defaultInPPatternBind(node);
	}


	/**
	* Called by the {@link ADefPatternBind} node from {@link ADefPatternBind#apply(IAnalysis)}.
	* @param node the calling {@link ADefPatternBind} node
	*/
	public A outADefPatternBind(ADefPatternBind node) throws AnalysisException
	{
		return defaultOutPPatternBind(node);
	}


	/**
	* Called by the {@link PDefinition} node from {@link PDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PDefinition} node
	*/
	public A defaultInPDefinition(PDefinition node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PDefinition} node from {@link PDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PDefinition} node
	*/
	public A defaultOutPDefinition(PDefinition node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PDefinition} node from {@link PDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PDefinition} node
	*/
	public A defaultPDefinition(PDefinition node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PDefinition} node from {@link PDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PDefinition} node
	*/
	public A inPDefinition(PDefinition node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PDefinition} node from {@link PDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PDefinition} node
	*/
	public A outPDefinition(PDefinition node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AAssignmentDefinition} node from {@link AAssignmentDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentDefinition} node
	*/
	public A caseAAssignmentDefinition(AAssignmentDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAssignmentDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}
		if(node.getExpType() != null && !_visitedNodes.contains(node.getExpType())) 
		{
			mergeReturns(retVal,node.getExpType().apply(this));
		}

		mergeReturns(retVal,outAAssignmentDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AAssignmentDefinition} node from {@link AAssignmentDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentDefinition} node
	*/
	public A inAAssignmentDefinition(AAssignmentDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AAssignmentDefinition} node from {@link AAssignmentDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentDefinition} node
	*/
	public A outAAssignmentDefinition(AAssignmentDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AInstanceVariableDefinition} node from {@link AInstanceVariableDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceVariableDefinition} node
	*/
	public A caseAInstanceVariableDefinition(AInstanceVariableDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInstanceVariableDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}
		if(node.getExpType() != null && !_visitedNodes.contains(node.getExpType())) 
		{
			mergeReturns(retVal,node.getExpType().apply(this));
		}
		if(node.getOldname() != null ) 
		{
			mergeReturns(retVal,node.getOldname().apply(this));
		}

		mergeReturns(retVal,outAInstanceVariableDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AInstanceVariableDefinition} node from {@link AInstanceVariableDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceVariableDefinition} node
	*/
	public A inAInstanceVariableDefinition(AInstanceVariableDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AInstanceVariableDefinition} node from {@link AInstanceVariableDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceVariableDefinition} node
	*/
	public A outAInstanceVariableDefinition(AInstanceVariableDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link SClassDefinition} node from {@link SClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SClassDefinition} node
	*/
	public A defaultInSClassDefinition(SClassDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link SClassDefinition} node from {@link SClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SClassDefinition} node
	*/
	public A defaultOutSClassDefinition(SClassDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link SClassDefinition} node from {@link SClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SClassDefinition} node
	*/
	public A defaultSClassDefinition(SClassDefinition node) throws AnalysisException
	{
		return defaultPDefinition(node);
	}


	/**
	* Called by the {@link SClassDefinition} node from {@link SClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SClassDefinition} node
	*/
	public A inSClassDefinition(SClassDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link SClassDefinition} node from {@link SClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SClassDefinition} node
	*/
	public A outSClassDefinition(SClassDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AClassInvariantDefinition} node from {@link AClassInvariantDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantDefinition} node
	*/
	public A caseAClassInvariantDefinition(AClassInvariantDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAClassInvariantDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}

		mergeReturns(retVal,outAClassInvariantDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AClassInvariantDefinition} node from {@link AClassInvariantDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantDefinition} node
	*/
	public A inAClassInvariantDefinition(AClassInvariantDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AClassInvariantDefinition} node from {@link AClassInvariantDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantDefinition} node
	*/
	public A outAClassInvariantDefinition(AClassInvariantDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AEqualsDefinition} node from {@link AEqualsDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsDefinition} node
	*/
	public A caseAEqualsDefinition(AEqualsDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAEqualsDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getTypebind() != null && !_visitedNodes.contains(node.getTypebind())) 
		{
			mergeReturns(retVal,node.getTypebind().apply(this));
		}
		if(node.getSetbind() != null && !_visitedNodes.contains(node.getSetbind())) 
		{
			mergeReturns(retVal,node.getSetbind().apply(this));
		}
		if(node.getTest() != null && !_visitedNodes.contains(node.getTest())) 
		{
			mergeReturns(retVal,node.getTest().apply(this));
		}
		if(node.getExpType() != null && !_visitedNodes.contains(node.getExpType())) 
		{
			mergeReturns(retVal,node.getExpType().apply(this));
		}
		if(node.getDefType() != null && !_visitedNodes.contains(node.getDefType())) 
		{
			mergeReturns(retVal,node.getDefType().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAEqualsDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AEqualsDefinition} node from {@link AEqualsDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsDefinition} node
	*/
	public A inAEqualsDefinition(AEqualsDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AEqualsDefinition} node from {@link AEqualsDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AEqualsDefinition} node
	*/
	public A outAEqualsDefinition(AEqualsDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link SFunctionDefinition} node from {@link SFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SFunctionDefinition} node
	*/
	public A defaultInSFunctionDefinition(SFunctionDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link SFunctionDefinition} node from {@link SFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SFunctionDefinition} node
	*/
	public A defaultOutSFunctionDefinition(SFunctionDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link SFunctionDefinition} node from {@link SFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SFunctionDefinition} node
	*/
	public A defaultSFunctionDefinition(SFunctionDefinition node) throws AnalysisException
	{
		return defaultPDefinition(node);
	}


	/**
	* Called by the {@link SFunctionDefinition} node from {@link SFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SFunctionDefinition} node
	*/
	public A inSFunctionDefinition(SFunctionDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link SFunctionDefinition} node from {@link SFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SFunctionDefinition} node
	*/
	public A outSFunctionDefinition(SFunctionDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AExternalDefinition} node from {@link AExternalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExternalDefinition} node
	*/
	public A caseAExternalDefinition(AExternalDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExternalDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getState() != null && !_visitedNodes.contains(node.getState())) 
		{
			mergeReturns(retVal,node.getState().apply(this));
		}
		if(node.getOldname() != null ) 
		{
			mergeReturns(retVal,node.getOldname().apply(this));
		}

		mergeReturns(retVal,outAExternalDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AExternalDefinition} node from {@link AExternalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExternalDefinition} node
	*/
	public A inAExternalDefinition(AExternalDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AExternalDefinition} node from {@link AExternalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExternalDefinition} node
	*/
	public A outAExternalDefinition(AExternalDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link SOperationDefinition} node from {@link SOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SOperationDefinition} node
	*/
	public A defaultInSOperationDefinition(SOperationDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link SOperationDefinition} node from {@link SOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SOperationDefinition} node
	*/
	public A defaultOutSOperationDefinition(SOperationDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link SOperationDefinition} node from {@link SOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SOperationDefinition} node
	*/
	public A defaultSOperationDefinition(SOperationDefinition node) throws AnalysisException
	{
		return defaultPDefinition(node);
	}


	/**
	* Called by the {@link SOperationDefinition} node from {@link SOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SOperationDefinition} node
	*/
	public A inSOperationDefinition(SOperationDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link SOperationDefinition} node from {@link SOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link SOperationDefinition} node
	*/
	public A outSOperationDefinition(SOperationDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AImportedDefinition} node from {@link AImportedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImportedDefinition} node
	*/
	public A caseAImportedDefinition(AImportedDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAImportedDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outAImportedDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AImportedDefinition} node from {@link AImportedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImportedDefinition} node
	*/
	public A inAImportedDefinition(AImportedDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AImportedDefinition} node from {@link AImportedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImportedDefinition} node
	*/
	public A outAImportedDefinition(AImportedDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AInheritedDefinition} node from {@link AInheritedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInheritedDefinition} node
	*/
	public A caseAInheritedDefinition(AInheritedDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInheritedDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getSuperdef() != null && !_visitedNodes.contains(node.getSuperdef())) 
		{
			mergeReturns(retVal,node.getSuperdef().apply(this));
		}
		if(node.getOldname() != null ) 
		{
			mergeReturns(retVal,node.getOldname().apply(this));
		}

		mergeReturns(retVal,outAInheritedDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AInheritedDefinition} node from {@link AInheritedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInheritedDefinition} node
	*/
	public A inAInheritedDefinition(AInheritedDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AInheritedDefinition} node from {@link AInheritedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInheritedDefinition} node
	*/
	public A outAInheritedDefinition(AInheritedDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link ALocalDefinition} node from {@link ALocalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALocalDefinition} node
	*/
	public A caseALocalDefinition(ALocalDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALocalDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outALocalDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ALocalDefinition} node from {@link ALocalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALocalDefinition} node
	*/
	public A inALocalDefinition(ALocalDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link ALocalDefinition} node from {@link ALocalDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALocalDefinition} node
	*/
	public A outALocalDefinition(ALocalDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AMultiBindListDefinition} node from {@link AMultiBindListDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMultiBindListDefinition} node
	*/
	public A caseAMultiBindListDefinition(AMultiBindListDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMultiBindListDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PMultipleBind> copy = new ArrayList<PMultipleBind>(node.getBindings());
			for( PMultipleBind e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAMultiBindListDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AMultiBindListDefinition} node from {@link AMultiBindListDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMultiBindListDefinition} node
	*/
	public A inAMultiBindListDefinition(AMultiBindListDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AMultiBindListDefinition} node from {@link AMultiBindListDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMultiBindListDefinition} node
	*/
	public A outAMultiBindListDefinition(AMultiBindListDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AMutexSyncDefinition} node from {@link AMutexSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDefinition} node
	*/
	public A caseAMutexSyncDefinition(AMutexSyncDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMutexSyncDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getOperations());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}

		mergeReturns(retVal,outAMutexSyncDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AMutexSyncDefinition} node from {@link AMutexSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDefinition} node
	*/
	public A inAMutexSyncDefinition(AMutexSyncDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AMutexSyncDefinition} node from {@link AMutexSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AMutexSyncDefinition} node
	*/
	public A outAMutexSyncDefinition(AMutexSyncDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link ANamedTraceDefinition} node from {@link ANamedTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDefinition} node
	*/
	public A caseANamedTraceDefinition(ANamedTraceDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANamedTraceDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ATraceDefinitionTerm> copy = new ArrayList<ATraceDefinitionTerm>(node.getTerms());
			for( ATraceDefinitionTerm e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANamedTraceDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ANamedTraceDefinition} node from {@link ANamedTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDefinition} node
	*/
	public A inANamedTraceDefinition(ANamedTraceDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link ANamedTraceDefinition} node from {@link ANamedTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ANamedTraceDefinition} node
	*/
	public A outANamedTraceDefinition(ANamedTraceDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link APerSyncDefinition} node from {@link APerSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link APerSyncDefinition} node
	*/
	public A caseAPerSyncDefinition(APerSyncDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPerSyncDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getOpname() != null ) 
		{
			mergeReturns(retVal,node.getOpname().apply(this));
		}
		if(node.getGuard() != null && !_visitedNodes.contains(node.getGuard())) 
		{
			mergeReturns(retVal,node.getGuard().apply(this));
		}

		mergeReturns(retVal,outAPerSyncDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link APerSyncDefinition} node from {@link APerSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link APerSyncDefinition} node
	*/
	public A inAPerSyncDefinition(APerSyncDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link APerSyncDefinition} node from {@link APerSyncDefinition#apply(IAnalysis)}.
	* @param node the calling {@link APerSyncDefinition} node
	*/
	public A outAPerSyncDefinition(APerSyncDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link ARenamedDefinition} node from {@link ARenamedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARenamedDefinition} node
	*/
	public A caseARenamedDefinition(ARenamedDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARenamedDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}

		mergeReturns(retVal,outARenamedDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ARenamedDefinition} node from {@link ARenamedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARenamedDefinition} node
	*/
	public A inARenamedDefinition(ARenamedDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link ARenamedDefinition} node from {@link ARenamedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARenamedDefinition} node
	*/
	public A outARenamedDefinition(ARenamedDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AStateDefinition} node from {@link AStateDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AStateDefinition} node
	*/
	public A caseAStateDefinition(AStateDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStateDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AFieldField> copy = new ArrayList<AFieldField>(node.getFields());
			for( AFieldField e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getInvPattern() != null && !_visitedNodes.contains(node.getInvPattern())) 
		{
			mergeReturns(retVal,node.getInvPattern().apply(this));
		}
		if(node.getInvExpression() != null && !_visitedNodes.contains(node.getInvExpression())) 
		{
			mergeReturns(retVal,node.getInvExpression().apply(this));
		}
		if(node.getInvdef() != null && !_visitedNodes.contains(node.getInvdef())) 
		{
			mergeReturns(retVal,node.getInvdef().apply(this));
		}
		if(node.getInitPattern() != null && !_visitedNodes.contains(node.getInitPattern())) 
		{
			mergeReturns(retVal,node.getInitPattern().apply(this));
		}
		if(node.getInitExpression() != null && !_visitedNodes.contains(node.getInitExpression())) 
		{
			mergeReturns(retVal,node.getInitExpression().apply(this));
		}
		if(node.getInitdef() != null && !_visitedNodes.contains(node.getInitdef())) 
		{
			mergeReturns(retVal,node.getInitdef().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getStateDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getRecordDefinition() != null && !_visitedNodes.contains(node.getRecordDefinition())) 
		{
			mergeReturns(retVal,node.getRecordDefinition().apply(this));
		}
		if(node.getRecordType() != null && !_visitedNodes.contains(node.getRecordType())) 
		{
			mergeReturns(retVal,node.getRecordType().apply(this));
		}

		mergeReturns(retVal,outAStateDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AStateDefinition} node from {@link AStateDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AStateDefinition} node
	*/
	public A inAStateDefinition(AStateDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AStateDefinition} node from {@link AStateDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AStateDefinition} node
	*/
	public A outAStateDefinition(AStateDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AThreadDefinition} node from {@link AThreadDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDefinition} node
	*/
	public A caseAThreadDefinition(AThreadDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAThreadDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}
		if(node.getOperationName() != null ) 
		{
			mergeReturns(retVal,node.getOperationName().apply(this));
		}
		if(node.getOperationDef() != null && !_visitedNodes.contains(node.getOperationDef())) 
		{
			mergeReturns(retVal,node.getOperationDef().apply(this));
		}

		mergeReturns(retVal,outAThreadDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AThreadDefinition} node from {@link AThreadDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDefinition} node
	*/
	public A inAThreadDefinition(AThreadDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AThreadDefinition} node from {@link AThreadDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AThreadDefinition} node
	*/
	public A outAThreadDefinition(AThreadDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link ATypeDefinition} node from {@link ATypeDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDefinition} node
	*/
	public A caseATypeDefinition(ATypeDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getInvType() != null && !_visitedNodes.contains(node.getInvType())) 
		{
			mergeReturns(retVal,node.getInvType().apply(this));
		}
		if(node.getInvPattern() != null && !_visitedNodes.contains(node.getInvPattern())) 
		{
			mergeReturns(retVal,node.getInvPattern().apply(this));
		}
		if(node.getInvExpression() != null && !_visitedNodes.contains(node.getInvExpression())) 
		{
			mergeReturns(retVal,node.getInvExpression().apply(this));
		}
		if(node.getInvdef() != null && !_visitedNodes.contains(node.getInvdef())) 
		{
			mergeReturns(retVal,node.getInvdef().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getComposeDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATypeDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeDefinition} node from {@link ATypeDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDefinition} node
	*/
	public A inATypeDefinition(ATypeDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link ATypeDefinition} node from {@link ATypeDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ATypeDefinition} node
	*/
	public A outATypeDefinition(ATypeDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AUntypedDefinition} node from {@link AUntypedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AUntypedDefinition} node
	*/
	public A caseAUntypedDefinition(AUntypedDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAUntypedDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAUntypedDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AUntypedDefinition} node from {@link AUntypedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AUntypedDefinition} node
	*/
	public A inAUntypedDefinition(AUntypedDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AUntypedDefinition} node from {@link AUntypedDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AUntypedDefinition} node
	*/
	public A outAUntypedDefinition(AUntypedDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AValueDefinition} node from {@link AValueDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AValueDefinition} node
	*/
	public A caseAValueDefinition(AValueDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAValueDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getExpType() != null && !_visitedNodes.contains(node.getExpType())) 
		{
			mergeReturns(retVal,node.getExpType().apply(this));
		}

		mergeReturns(retVal,outAValueDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AValueDefinition} node from {@link AValueDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AValueDefinition} node
	*/
	public A inAValueDefinition(AValueDefinition node) throws AnalysisException
	{
		return defaultInPDefinition(node);
	}


	/**
	* Called by the {@link AValueDefinition} node from {@link AValueDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AValueDefinition} node
	*/
	public A outAValueDefinition(AValueDefinition node) throws AnalysisException
	{
		return defaultOutPDefinition(node);
	}


	/**
	* Called by the {@link AExplicitFunctionDefinition} node from {@link AExplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitFunctionDefinition} node
	*/
	public A caseAExplicitFunctionDefinition(AExplicitFunctionDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExplicitFunctionDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getTypeParams());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}
		if(node.getPrecondition() != null && !_visitedNodes.contains(node.getPrecondition())) 
		{
			mergeReturns(retVal,node.getPrecondition().apply(this));
		}
		if(node.getPostcondition() != null && !_visitedNodes.contains(node.getPostcondition())) 
		{
			mergeReturns(retVal,node.getPostcondition().apply(this));
		}
		if(node.getMeasure() != null ) 
		{
			mergeReturns(retVal,node.getMeasure().apply(this));
		}
		if(node.getPredef() != null && !_visitedNodes.contains(node.getPredef())) 
		{
			mergeReturns(retVal,node.getPredef().apply(this));
		}
		if(node.getPostdef() != null && !_visitedNodes.contains(node.getPostdef())) 
		{
			mergeReturns(retVal,node.getPostdef().apply(this));
		}
		if(node.getMeasureDef() != null && !_visitedNodes.contains(node.getMeasureDef())) 
		{
			mergeReturns(retVal,node.getMeasureDef().apply(this));
		}
		if(node.getExpectedResult() != null && !_visitedNodes.contains(node.getExpectedResult())) 
		{
			mergeReturns(retVal,node.getExpectedResult().apply(this));
		}
		if(node.getActualResult() != null && !_visitedNodes.contains(node.getActualResult())) 
		{
			mergeReturns(retVal,node.getActualResult().apply(this));
		}
		{
			List<List<PPattern>> copy = new ArrayList<List<PPattern>>(node.getParamPatternList());
			for( List<PPattern> list : copy) {
				for( PPattern e : list) 
			{
					if(!_visitedNodes.contains(e))
					{
						mergeReturns(retVal,e.apply(this));
					}
				}
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getParamDefinitionList());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAExplicitFunctionDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AExplicitFunctionDefinition} node from {@link AExplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitFunctionDefinition} node
	*/
	public A inAExplicitFunctionDefinition(AExplicitFunctionDefinition node) throws AnalysisException
	{
		return defaultInSFunctionDefinition(node);
	}


	/**
	* Called by the {@link AExplicitFunctionDefinition} node from {@link AExplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitFunctionDefinition} node
	*/
	public A outAExplicitFunctionDefinition(AExplicitFunctionDefinition node) throws AnalysisException
	{
		return defaultOutSFunctionDefinition(node);
	}


	/**
	* Called by the {@link AImplicitFunctionDefinition} node from {@link AImplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitFunctionDefinition} node
	*/
	public A caseAImplicitFunctionDefinition(AImplicitFunctionDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAImplicitFunctionDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getTypeParams());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}
		if(node.getPrecondition() != null && !_visitedNodes.contains(node.getPrecondition())) 
		{
			mergeReturns(retVal,node.getPrecondition().apply(this));
		}
		if(node.getPostcondition() != null && !_visitedNodes.contains(node.getPostcondition())) 
		{
			mergeReturns(retVal,node.getPostcondition().apply(this));
		}
		if(node.getMeasure() != null ) 
		{
			mergeReturns(retVal,node.getMeasure().apply(this));
		}
		if(node.getPredef() != null && !_visitedNodes.contains(node.getPredef())) 
		{
			mergeReturns(retVal,node.getPredef().apply(this));
		}
		if(node.getPostdef() != null && !_visitedNodes.contains(node.getPostdef())) 
		{
			mergeReturns(retVal,node.getPostdef().apply(this));
		}
		if(node.getMeasureDef() != null && !_visitedNodes.contains(node.getMeasureDef())) 
		{
			mergeReturns(retVal,node.getMeasureDef().apply(this));
		}
		if(node.getExpectedResult() != null && !_visitedNodes.contains(node.getExpectedResult())) 
		{
			mergeReturns(retVal,node.getExpectedResult().apply(this));
		}
		if(node.getActualResult() != null && !_visitedNodes.contains(node.getActualResult())) 
		{
			mergeReturns(retVal,node.getActualResult().apply(this));
		}
		{
			List<APatternListTypePair> copy = new ArrayList<APatternListTypePair>(node.getParamPatterns());
			for( APatternListTypePair e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAImplicitFunctionDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AImplicitFunctionDefinition} node from {@link AImplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitFunctionDefinition} node
	*/
	public A inAImplicitFunctionDefinition(AImplicitFunctionDefinition node) throws AnalysisException
	{
		return defaultInSFunctionDefinition(node);
	}


	/**
	* Called by the {@link AImplicitFunctionDefinition} node from {@link AImplicitFunctionDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitFunctionDefinition} node
	*/
	public A outAImplicitFunctionDefinition(AImplicitFunctionDefinition node) throws AnalysisException
	{
		return defaultOutSFunctionDefinition(node);
	}


	/**
	* Called by the {@link AExplicitOperationDefinition} node from {@link AExplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitOperationDefinition} node
	*/
	public A caseAExplicitOperationDefinition(AExplicitOperationDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExplicitOperationDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}
		if(node.getPrecondition() != null && !_visitedNodes.contains(node.getPrecondition())) 
		{
			mergeReturns(retVal,node.getPrecondition().apply(this));
		}
		if(node.getPostcondition() != null && !_visitedNodes.contains(node.getPostcondition())) 
		{
			mergeReturns(retVal,node.getPostcondition().apply(this));
		}
		if(node.getPredef() != null && !_visitedNodes.contains(node.getPredef())) 
		{
			mergeReturns(retVal,node.getPredef().apply(this));
		}
		if(node.getPostdef() != null && !_visitedNodes.contains(node.getPostdef())) 
		{
			mergeReturns(retVal,node.getPostdef().apply(this));
		}
		if(node.getState() != null && !_visitedNodes.contains(node.getState())) 
		{
			mergeReturns(retVal,node.getState().apply(this));
		}
		if(node.getActualResult() != null && !_visitedNodes.contains(node.getActualResult())) 
		{
			mergeReturns(retVal,node.getActualResult().apply(this));
		}
		{
			List<PPattern> copy = new ArrayList<PPattern>(node.getParameterPatterns());
			for( PPattern e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getParamDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAExplicitOperationDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AExplicitOperationDefinition} node from {@link AExplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitOperationDefinition} node
	*/
	public A inAExplicitOperationDefinition(AExplicitOperationDefinition node) throws AnalysisException
	{
		return defaultInSOperationDefinition(node);
	}


	/**
	* Called by the {@link AExplicitOperationDefinition} node from {@link AExplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AExplicitOperationDefinition} node
	*/
	public A outAExplicitOperationDefinition(AExplicitOperationDefinition node) throws AnalysisException
	{
		return defaultOutSOperationDefinition(node);
	}


	/**
	* Called by the {@link AImplicitOperationDefinition} node from {@link AImplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitOperationDefinition} node
	*/
	public A caseAImplicitOperationDefinition(AImplicitOperationDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAImplicitOperationDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}
		if(node.getPrecondition() != null && !_visitedNodes.contains(node.getPrecondition())) 
		{
			mergeReturns(retVal,node.getPrecondition().apply(this));
		}
		if(node.getPostcondition() != null && !_visitedNodes.contains(node.getPostcondition())) 
		{
			mergeReturns(retVal,node.getPostcondition().apply(this));
		}
		if(node.getPredef() != null && !_visitedNodes.contains(node.getPredef())) 
		{
			mergeReturns(retVal,node.getPredef().apply(this));
		}
		if(node.getPostdef() != null && !_visitedNodes.contains(node.getPostdef())) 
		{
			mergeReturns(retVal,node.getPostdef().apply(this));
		}
		if(node.getState() != null && !_visitedNodes.contains(node.getState())) 
		{
			mergeReturns(retVal,node.getState().apply(this));
		}
		if(node.getActualResult() != null && !_visitedNodes.contains(node.getActualResult())) 
		{
			mergeReturns(retVal,node.getActualResult().apply(this));
		}
		{
			List<APatternListTypePair> copy = new ArrayList<APatternListTypePair>(node.getParameterPatterns());
			for( APatternListTypePair e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}
		{
			List<AExternalClause> copy = new ArrayList<AExternalClause>(node.getExternals());
			for( AExternalClause e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AErrorCase> copy = new ArrayList<AErrorCase>(node.getErrors());
			for( AErrorCase e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getStateDefinition() != null && !_visitedNodes.contains(node.getStateDefinition())) 
		{
			mergeReturns(retVal,node.getStateDefinition().apply(this));
		}

		mergeReturns(retVal,outAImplicitOperationDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AImplicitOperationDefinition} node from {@link AImplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitOperationDefinition} node
	*/
	public A inAImplicitOperationDefinition(AImplicitOperationDefinition node) throws AnalysisException
	{
		return defaultInSOperationDefinition(node);
	}


	/**
	* Called by the {@link AImplicitOperationDefinition} node from {@link AImplicitOperationDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AImplicitOperationDefinition} node
	*/
	public A outAImplicitOperationDefinition(AImplicitOperationDefinition node) throws AnalysisException
	{
		return defaultOutSOperationDefinition(node);
	}


	/**
	* Called by the {@link PTerm} node from {@link PTerm#apply(IAnalysis)}.
	* @param node the calling {@link PTerm} node
	*/
	public A defaultInPTerm(PTerm node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PTerm} node from {@link PTerm#apply(IAnalysis)}.
	* @param node the calling {@link PTerm} node
	*/
	public A defaultOutPTerm(PTerm node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PTerm} node from {@link PTerm#apply(IAnalysis)}.
	* @param node the calling {@link PTerm} node
	*/
	public A defaultPTerm(PTerm node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PTerm} node from {@link PTerm#apply(IAnalysis)}.
	* @param node the calling {@link PTerm} node
	*/
	public A inPTerm(PTerm node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PTerm} node from {@link PTerm#apply(IAnalysis)}.
	* @param node the calling {@link PTerm} node
	*/
	public A outPTerm(PTerm node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ATraceDefinitionTerm} node from {@link ATraceDefinitionTerm#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDefinitionTerm} node
	*/
	public A caseATraceDefinitionTerm(ATraceDefinitionTerm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATraceDefinitionTerm(node));

		{
			List<PTraceDefinition> copy = new ArrayList<PTraceDefinition>(node.getList());
			for( PTraceDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outATraceDefinitionTerm(node));
		return retVal;
	}


	/**
	* Called by the {@link ATraceDefinitionTerm} node from {@link ATraceDefinitionTerm#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDefinitionTerm} node
	*/
	public A inATraceDefinitionTerm(ATraceDefinitionTerm node) throws AnalysisException
	{
		return defaultInPTerm(node);
	}


	/**
	* Called by the {@link ATraceDefinitionTerm} node from {@link ATraceDefinitionTerm#apply(IAnalysis)}.
	* @param node the calling {@link ATraceDefinitionTerm} node
	*/
	public A outATraceDefinitionTerm(ATraceDefinitionTerm node) throws AnalysisException
	{
		return defaultOutPTerm(node);
	}


	/**
	* Called by the {@link PTraceDefinition} node from {@link PTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceDefinition} node
	*/
	public A defaultInPTraceDefinition(PTraceDefinition node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PTraceDefinition} node from {@link PTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceDefinition} node
	*/
	public A defaultOutPTraceDefinition(PTraceDefinition node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PTraceDefinition} node from {@link PTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceDefinition} node
	*/
	public A defaultPTraceDefinition(PTraceDefinition node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PTraceDefinition} node from {@link PTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceDefinition} node
	*/
	public A inPTraceDefinition(PTraceDefinition node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PTraceDefinition} node from {@link PTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceDefinition} node
	*/
	public A outPTraceDefinition(PTraceDefinition node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AInstanceTraceDefinition} node from {@link AInstanceTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDefinition} node
	*/
	public A caseAInstanceTraceDefinition(AInstanceTraceDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAInstanceTraceDefinition(node));


		mergeReturns(retVal,outAInstanceTraceDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AInstanceTraceDefinition} node from {@link AInstanceTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDefinition} node
	*/
	public A inAInstanceTraceDefinition(AInstanceTraceDefinition node) throws AnalysisException
	{
		return defaultInPTraceDefinition(node);
	}


	/**
	* Called by the {@link AInstanceTraceDefinition} node from {@link AInstanceTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AInstanceTraceDefinition} node
	*/
	public A outAInstanceTraceDefinition(AInstanceTraceDefinition node) throws AnalysisException
	{
		return defaultOutPTraceDefinition(node);
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDefinition} node from {@link ALetBeStBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDefinition} node
	*/
	public A caseALetBeStBindingTraceDefinition(ALetBeStBindingTraceDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetBeStBindingTraceDefinition(node));

		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			mergeReturns(retVal,node.getBind().apply(this));
		}
		if(node.getStexp() != null && !_visitedNodes.contains(node.getStexp())) 
		{
			mergeReturns(retVal,node.getStexp().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}
		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}

		mergeReturns(retVal,outALetBeStBindingTraceDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDefinition} node from {@link ALetBeStBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDefinition} node
	*/
	public A inALetBeStBindingTraceDefinition(ALetBeStBindingTraceDefinition node) throws AnalysisException
	{
		return defaultInPTraceDefinition(node);
	}


	/**
	* Called by the {@link ALetBeStBindingTraceDefinition} node from {@link ALetBeStBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStBindingTraceDefinition} node
	*/
	public A outALetBeStBindingTraceDefinition(ALetBeStBindingTraceDefinition node) throws AnalysisException
	{
		return defaultOutPTraceDefinition(node);
	}


	/**
	* Called by the {@link ALetDefBindingTraceDefinition} node from {@link ALetDefBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDefinition} node
	*/
	public A caseALetDefBindingTraceDefinition(ALetDefBindingTraceDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetDefBindingTraceDefinition(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outALetDefBindingTraceDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetDefBindingTraceDefinition} node from {@link ALetDefBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDefinition} node
	*/
	public A inALetDefBindingTraceDefinition(ALetDefBindingTraceDefinition node) throws AnalysisException
	{
		return defaultInPTraceDefinition(node);
	}


	/**
	* Called by the {@link ALetDefBindingTraceDefinition} node from {@link ALetDefBindingTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ALetDefBindingTraceDefinition} node
	*/
	public A outALetDefBindingTraceDefinition(ALetDefBindingTraceDefinition node) throws AnalysisException
	{
		return defaultOutPTraceDefinition(node);
	}


	/**
	* Called by the {@link ARepeatTraceDefinition} node from {@link ARepeatTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDefinition} node
	*/
	public A caseARepeatTraceDefinition(ARepeatTraceDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inARepeatTraceDefinition(node));

		if(node.getCore() != null && !_visitedNodes.contains(node.getCore())) 
		{
			mergeReturns(retVal,node.getCore().apply(this));
		}

		mergeReturns(retVal,outARepeatTraceDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ARepeatTraceDefinition} node from {@link ARepeatTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDefinition} node
	*/
	public A inARepeatTraceDefinition(ARepeatTraceDefinition node) throws AnalysisException
	{
		return defaultInPTraceDefinition(node);
	}


	/**
	* Called by the {@link ARepeatTraceDefinition} node from {@link ARepeatTraceDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ARepeatTraceDefinition} node
	*/
	public A outARepeatTraceDefinition(ARepeatTraceDefinition node) throws AnalysisException
	{
		return defaultOutPTraceDefinition(node);
	}


	/**
	* Called by the {@link PTraceCoreDefinition} node from {@link PTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceCoreDefinition} node
	*/
	public A defaultInPTraceCoreDefinition(PTraceCoreDefinition node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PTraceCoreDefinition} node from {@link PTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceCoreDefinition} node
	*/
	public A defaultOutPTraceCoreDefinition(PTraceCoreDefinition node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PTraceCoreDefinition} node from {@link PTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceCoreDefinition} node
	*/
	public A defaultPTraceCoreDefinition(PTraceCoreDefinition node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PTraceCoreDefinition} node from {@link PTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceCoreDefinition} node
	*/
	public A inPTraceCoreDefinition(PTraceCoreDefinition node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PTraceCoreDefinition} node from {@link PTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link PTraceCoreDefinition} node
	*/
	public A outPTraceCoreDefinition(PTraceCoreDefinition node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AApplyExpressionTraceCoreDefinition} node from {@link AApplyExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpressionTraceCoreDefinition} node
	*/
	public A caseAApplyExpressionTraceCoreDefinition(AApplyExpressionTraceCoreDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAApplyExpressionTraceCoreDefinition(node));

		if(node.getCallStatement() != null && !_visitedNodes.contains(node.getCallStatement())) 
		{
			mergeReturns(retVal,node.getCallStatement().apply(this));
		}

		mergeReturns(retVal,outAApplyExpressionTraceCoreDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AApplyExpressionTraceCoreDefinition} node from {@link AApplyExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpressionTraceCoreDefinition} node
	*/
	public A inAApplyExpressionTraceCoreDefinition(AApplyExpressionTraceCoreDefinition node) throws AnalysisException
	{
		return defaultInPTraceCoreDefinition(node);
	}


	/**
	* Called by the {@link AApplyExpressionTraceCoreDefinition} node from {@link AApplyExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AApplyExpressionTraceCoreDefinition} node
	*/
	public A outAApplyExpressionTraceCoreDefinition(AApplyExpressionTraceCoreDefinition node) throws AnalysisException
	{
		return defaultOutPTraceCoreDefinition(node);
	}


	/**
	* Called by the {@link ABracketedExpressionTraceCoreDefinition} node from {@link ABracketedExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpressionTraceCoreDefinition} node
	*/
	public A caseABracketedExpressionTraceCoreDefinition(ABracketedExpressionTraceCoreDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABracketedExpressionTraceCoreDefinition(node));

		{
			List<ATraceDefinitionTerm> copy = new ArrayList<ATraceDefinitionTerm>(node.getTerms());
			for( ATraceDefinitionTerm e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outABracketedExpressionTraceCoreDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ABracketedExpressionTraceCoreDefinition} node from {@link ABracketedExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpressionTraceCoreDefinition} node
	*/
	public A inABracketedExpressionTraceCoreDefinition(ABracketedExpressionTraceCoreDefinition node) throws AnalysisException
	{
		return defaultInPTraceCoreDefinition(node);
	}


	/**
	* Called by the {@link ABracketedExpressionTraceCoreDefinition} node from {@link ABracketedExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABracketedExpressionTraceCoreDefinition} node
	*/
	public A outABracketedExpressionTraceCoreDefinition(ABracketedExpressionTraceCoreDefinition node) throws AnalysisException
	{
		return defaultOutPTraceCoreDefinition(node);
	}


	/**
	* Called by the {@link AConcurrentExpressionTraceCoreDefinition} node from {@link AConcurrentExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpressionTraceCoreDefinition} node
	*/
	public A caseAConcurrentExpressionTraceCoreDefinition(AConcurrentExpressionTraceCoreDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAConcurrentExpressionTraceCoreDefinition(node));

		{
			List<PTraceDefinition> copy = new ArrayList<PTraceDefinition>(node.getDefs());
			for( PTraceDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAConcurrentExpressionTraceCoreDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AConcurrentExpressionTraceCoreDefinition} node from {@link AConcurrentExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpressionTraceCoreDefinition} node
	*/
	public A inAConcurrentExpressionTraceCoreDefinition(AConcurrentExpressionTraceCoreDefinition node) throws AnalysisException
	{
		return defaultInPTraceCoreDefinition(node);
	}


	/**
	* Called by the {@link AConcurrentExpressionTraceCoreDefinition} node from {@link AConcurrentExpressionTraceCoreDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AConcurrentExpressionTraceCoreDefinition} node
	*/
	public A outAConcurrentExpressionTraceCoreDefinition(AConcurrentExpressionTraceCoreDefinition node) throws AnalysisException
	{
		return defaultOutPTraceCoreDefinition(node);
	}


	/**
	* Called by the {@link ABusClassDefinition} node from {@link ABusClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABusClassDefinition} node
	*/
	public A caseABusClassDefinition(ABusClassDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABusClassDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getSupertypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getSupernames());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getAllInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<SClassDefinition> copy = new ArrayList<SClassDefinition>(node.getSuperDefs());
			for( SClassDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getSuperInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getClasstype() != null && !_visitedNodes.contains(node.getClasstype())) 
		{
			mergeReturns(retVal,node.getClasstype().apply(this));
		}
		if(node.getInvariant() != null && !_visitedNodes.contains(node.getInvariant())) 
		{
			mergeReturns(retVal,node.getInvariant().apply(this));
		}
		if(node.getInstance() != null && !_visitedNodes.contains(node.getInstance())) 
		{
			mergeReturns(retVal,node.getInstance().apply(this));
		}

		mergeReturns(retVal,outABusClassDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ABusClassDefinition} node from {@link ABusClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABusClassDefinition} node
	*/
	public A inABusClassDefinition(ABusClassDefinition node) throws AnalysisException
	{
		return defaultInSClassDefinition(node);
	}


	/**
	* Called by the {@link ABusClassDefinition} node from {@link ABusClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ABusClassDefinition} node
	*/
	public A outABusClassDefinition(ABusClassDefinition node) throws AnalysisException
	{
		return defaultOutSClassDefinition(node);
	}


	/**
	* Called by the {@link ACpuClassDefinition} node from {@link ACpuClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ACpuClassDefinition} node
	*/
	public A caseACpuClassDefinition(ACpuClassDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACpuClassDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getSupertypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getSupernames());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getAllInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<SClassDefinition> copy = new ArrayList<SClassDefinition>(node.getSuperDefs());
			for( SClassDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getSuperInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getClasstype() != null && !_visitedNodes.contains(node.getClasstype())) 
		{
			mergeReturns(retVal,node.getClasstype().apply(this));
		}
		if(node.getInvariant() != null && !_visitedNodes.contains(node.getInvariant())) 
		{
			mergeReturns(retVal,node.getInvariant().apply(this));
		}

		mergeReturns(retVal,outACpuClassDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ACpuClassDefinition} node from {@link ACpuClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ACpuClassDefinition} node
	*/
	public A inACpuClassDefinition(ACpuClassDefinition node) throws AnalysisException
	{
		return defaultInSClassDefinition(node);
	}


	/**
	* Called by the {@link ACpuClassDefinition} node from {@link ACpuClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ACpuClassDefinition} node
	*/
	public A outACpuClassDefinition(ACpuClassDefinition node) throws AnalysisException
	{
		return defaultOutSClassDefinition(node);
	}


	/**
	* Called by the {@link ASystemClassDefinition} node from {@link ASystemClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ASystemClassDefinition} node
	*/
	public A caseASystemClassDefinition(ASystemClassDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASystemClassDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getSupertypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getSupernames());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getAllInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<SClassDefinition> copy = new ArrayList<SClassDefinition>(node.getSuperDefs());
			for( SClassDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getSuperInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getClasstype() != null && !_visitedNodes.contains(node.getClasstype())) 
		{
			mergeReturns(retVal,node.getClasstype().apply(this));
		}
		if(node.getInvariant() != null && !_visitedNodes.contains(node.getInvariant())) 
		{
			mergeReturns(retVal,node.getInvariant().apply(this));
		}

		mergeReturns(retVal,outASystemClassDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link ASystemClassDefinition} node from {@link ASystemClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ASystemClassDefinition} node
	*/
	public A inASystemClassDefinition(ASystemClassDefinition node) throws AnalysisException
	{
		return defaultInSClassDefinition(node);
	}


	/**
	* Called by the {@link ASystemClassDefinition} node from {@link ASystemClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link ASystemClassDefinition} node
	*/
	public A outASystemClassDefinition(ASystemClassDefinition node) throws AnalysisException
	{
		return defaultOutSClassDefinition(node);
	}


	/**
	* Called by the {@link AClassClassDefinition} node from {@link AClassClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassClassDefinition} node
	*/
	public A caseAClassClassDefinition(AClassClassDefinition node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAClassClassDefinition(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getAccess() != null && !_visitedNodes.contains(node.getAccess())) 
		{
			mergeReturns(retVal,node.getAccess().apply(this));
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PType> copy = new ArrayList<PType>(node.getSupertypes());
			for( PType e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getSupernames());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getAllInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<SClassDefinition> copy = new ArrayList<SClassDefinition>(node.getSuperDefs());
			for( SClassDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getSuperInheritedDefinitions());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getClasstype() != null && !_visitedNodes.contains(node.getClasstype())) 
		{
			mergeReturns(retVal,node.getClasstype().apply(this));
		}
		if(node.getInvariant() != null && !_visitedNodes.contains(node.getInvariant())) 
		{
			mergeReturns(retVal,node.getInvariant().apply(this));
		}

		mergeReturns(retVal,outAClassClassDefinition(node));
		return retVal;
	}


	/**
	* Called by the {@link AClassClassDefinition} node from {@link AClassClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassClassDefinition} node
	*/
	public A inAClassClassDefinition(AClassClassDefinition node) throws AnalysisException
	{
		return defaultInSClassDefinition(node);
	}


	/**
	* Called by the {@link AClassClassDefinition} node from {@link AClassClassDefinition#apply(IAnalysis)}.
	* @param node the calling {@link AClassClassDefinition} node
	*/
	public A outAClassClassDefinition(AClassClassDefinition node) throws AnalysisException
	{
		return defaultOutSClassDefinition(node);
	}


	/**
	* Called by the {@link PModules} node from {@link PModules#apply(IAnalysis)}.
	* @param node the calling {@link PModules} node
	*/
	public A defaultInPModules(PModules node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PModules} node from {@link PModules#apply(IAnalysis)}.
	* @param node the calling {@link PModules} node
	*/
	public A defaultOutPModules(PModules node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PModules} node from {@link PModules#apply(IAnalysis)}.
	* @param node the calling {@link PModules} node
	*/
	public A defaultPModules(PModules node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PModules} node from {@link PModules#apply(IAnalysis)}.
	* @param node the calling {@link PModules} node
	*/
	public A inPModules(PModules node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PModules} node from {@link PModules#apply(IAnalysis)}.
	* @param node the calling {@link PModules} node
	*/
	public A outPModules(PModules node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AModuleModules} node from {@link AModuleModules#apply(IAnalysis)}.
	* @param node the calling {@link AModuleModules} node
	*/
	public A caseAModuleModules(AModuleModules node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAModuleModules(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getImports() != null && !_visitedNodes.contains(node.getImports())) 
		{
			mergeReturns(retVal,node.getImports().apply(this));
		}
		if(node.getExports() != null && !_visitedNodes.contains(node.getExports())) 
		{
			mergeReturns(retVal,node.getExports().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getImportdefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getExportdefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAModuleModules(node));
		return retVal;
	}


	/**
	* Called by the {@link AModuleModules} node from {@link AModuleModules#apply(IAnalysis)}.
	* @param node the calling {@link AModuleModules} node
	*/
	public A inAModuleModules(AModuleModules node) throws AnalysisException
	{
		return defaultInPModules(node);
	}


	/**
	* Called by the {@link AModuleModules} node from {@link AModuleModules#apply(IAnalysis)}.
	* @param node the calling {@link AModuleModules} node
	*/
	public A outAModuleModules(AModuleModules node) throws AnalysisException
	{
		return defaultOutPModules(node);
	}


	/**
	* Called by the {@link PImports} node from {@link PImports#apply(IAnalysis)}.
	* @param node the calling {@link PImports} node
	*/
	public A defaultInPImports(PImports node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PImports} node from {@link PImports#apply(IAnalysis)}.
	* @param node the calling {@link PImports} node
	*/
	public A defaultOutPImports(PImports node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PImports} node from {@link PImports#apply(IAnalysis)}.
	* @param node the calling {@link PImports} node
	*/
	public A defaultPImports(PImports node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PImports} node from {@link PImports#apply(IAnalysis)}.
	* @param node the calling {@link PImports} node
	*/
	public A inPImports(PImports node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PImports} node from {@link PImports#apply(IAnalysis)}.
	* @param node the calling {@link PImports} node
	*/
	public A outPImports(PImports node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AModuleImports} node from {@link AModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleImports} node
	*/
	public A caseAModuleImports(AModuleImports node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAModuleImports(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		{
			List<AFromModuleImports> copy = new ArrayList<AFromModuleImports>(node.getImports());
			for( AFromModuleImports e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAModuleImports(node));
		return retVal;
	}


	/**
	* Called by the {@link AModuleImports} node from {@link AModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleImports} node
	*/
	public A inAModuleImports(AModuleImports node) throws AnalysisException
	{
		return defaultInPImports(node);
	}


	/**
	* Called by the {@link AModuleImports} node from {@link AModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleImports} node
	*/
	public A outAModuleImports(AModuleImports node) throws AnalysisException
	{
		return defaultOutPImports(node);
	}


	/**
	* Called by the {@link AFromModuleImports} node from {@link AFromModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AFromModuleImports} node
	*/
	public A caseAFromModuleImports(AFromModuleImports node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFromModuleImports(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		{
			List<List<PImport>> copy = new ArrayList<List<PImport>>(node.getSignatures());
			for( List<PImport> list : copy) {
				for( PImport e : list) 
			{
					if(!_visitedNodes.contains(e))
					{
						mergeReturns(retVal,e.apply(this));
					}
				}
			}
		}

		mergeReturns(retVal,outAFromModuleImports(node));
		return retVal;
	}


	/**
	* Called by the {@link AFromModuleImports} node from {@link AFromModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AFromModuleImports} node
	*/
	public A inAFromModuleImports(AFromModuleImports node) throws AnalysisException
	{
		return defaultInPImports(node);
	}


	/**
	* Called by the {@link AFromModuleImports} node from {@link AFromModuleImports#apply(IAnalysis)}.
	* @param node the calling {@link AFromModuleImports} node
	*/
	public A outAFromModuleImports(AFromModuleImports node) throws AnalysisException
	{
		return defaultOutPImports(node);
	}


	/**
	* Called by the {@link PImport} node from {@link PImport#apply(IAnalysis)}.
	* @param node the calling {@link PImport} node
	*/
	public A defaultInPImport(PImport node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PImport} node from {@link PImport#apply(IAnalysis)}.
	* @param node the calling {@link PImport} node
	*/
	public A defaultOutPImport(PImport node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PImport} node from {@link PImport#apply(IAnalysis)}.
	* @param node the calling {@link PImport} node
	*/
	public A defaultPImport(PImport node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PImport} node from {@link PImport#apply(IAnalysis)}.
	* @param node the calling {@link PImport} node
	*/
	public A inPImport(PImport node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PImport} node from {@link PImport#apply(IAnalysis)}.
	* @param node the calling {@link PImport} node
	*/
	public A outPImport(PImport node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AAllImport} node from {@link AAllImport#apply(IAnalysis)}.
	* @param node the calling {@link AAllImport} node
	*/
	public A caseAAllImport(AAllImport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAllImport(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getRenamed() != null ) 
		{
			mergeReturns(retVal,node.getRenamed().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}

		mergeReturns(retVal,outAAllImport(node));
		return retVal;
	}


	/**
	* Called by the {@link AAllImport} node from {@link AAllImport#apply(IAnalysis)}.
	* @param node the calling {@link AAllImport} node
	*/
	public A inAAllImport(AAllImport node) throws AnalysisException
	{
		return defaultInPImport(node);
	}


	/**
	* Called by the {@link AAllImport} node from {@link AAllImport#apply(IAnalysis)}.
	* @param node the calling {@link AAllImport} node
	*/
	public A outAAllImport(AAllImport node) throws AnalysisException
	{
		return defaultOutPImport(node);
	}


	/**
	* Called by the {@link ATypeImport} node from {@link ATypeImport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeImport} node
	*/
	public A caseATypeImport(ATypeImport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeImport(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getRenamed() != null ) 
		{
			mergeReturns(retVal,node.getRenamed().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}

		mergeReturns(retVal,outATypeImport(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeImport} node from {@link ATypeImport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeImport} node
	*/
	public A inATypeImport(ATypeImport node) throws AnalysisException
	{
		return defaultInPImport(node);
	}


	/**
	* Called by the {@link ATypeImport} node from {@link ATypeImport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeImport} node
	*/
	public A outATypeImport(ATypeImport node) throws AnalysisException
	{
		return defaultOutPImport(node);
	}


	/**
	* Called by the {@link SValueImport} node from {@link SValueImport#apply(IAnalysis)}.
	* @param node the calling {@link SValueImport} node
	*/
	public A defaultInSValueImport(SValueImport node) throws AnalysisException
	{
		return defaultInPImport(node);
	}


	/**
	* Called by the {@link SValueImport} node from {@link SValueImport#apply(IAnalysis)}.
	* @param node the calling {@link SValueImport} node
	*/
	public A defaultOutSValueImport(SValueImport node) throws AnalysisException
	{
		return defaultOutPImport(node);
	}


	/**
	* Called by the {@link SValueImport} node from {@link SValueImport#apply(IAnalysis)}.
	* @param node the calling {@link SValueImport} node
	*/
	public A defaultSValueImport(SValueImport node) throws AnalysisException
	{
		return defaultPImport(node);
	}


	/**
	* Called by the {@link SValueImport} node from {@link SValueImport#apply(IAnalysis)}.
	* @param node the calling {@link SValueImport} node
	*/
	public A inSValueImport(SValueImport node) throws AnalysisException
	{
		return defaultInPImport(node);
	}


	/**
	* Called by the {@link SValueImport} node from {@link SValueImport#apply(IAnalysis)}.
	* @param node the calling {@link SValueImport} node
	*/
	public A outSValueImport(SValueImport node) throws AnalysisException
	{
		return defaultOutPImport(node);
	}


	/**
	* Called by the {@link AValueValueImport} node from {@link AValueValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AValueValueImport} node
	*/
	public A caseAValueValueImport(AValueValueImport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAValueValueImport(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getRenamed() != null ) 
		{
			mergeReturns(retVal,node.getRenamed().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getImportType() != null && !_visitedNodes.contains(node.getImportType())) 
		{
			mergeReturns(retVal,node.getImportType().apply(this));
		}

		mergeReturns(retVal,outAValueValueImport(node));
		return retVal;
	}


	/**
	* Called by the {@link AValueValueImport} node from {@link AValueValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AValueValueImport} node
	*/
	public A inAValueValueImport(AValueValueImport node) throws AnalysisException
	{
		return defaultInSValueImport(node);
	}


	/**
	* Called by the {@link AValueValueImport} node from {@link AValueValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AValueValueImport} node
	*/
	public A outAValueValueImport(AValueValueImport node) throws AnalysisException
	{
		return defaultOutSValueImport(node);
	}


	/**
	* Called by the {@link AFunctionValueImport} node from {@link AFunctionValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionValueImport} node
	*/
	public A caseAFunctionValueImport(AFunctionValueImport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFunctionValueImport(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getRenamed() != null ) 
		{
			mergeReturns(retVal,node.getRenamed().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getImportType() != null && !_visitedNodes.contains(node.getImportType())) 
		{
			mergeReturns(retVal,node.getImportType().apply(this));
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getTypeParams());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}

		mergeReturns(retVal,outAFunctionValueImport(node));
		return retVal;
	}


	/**
	* Called by the {@link AFunctionValueImport} node from {@link AFunctionValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionValueImport} node
	*/
	public A inAFunctionValueImport(AFunctionValueImport node) throws AnalysisException
	{
		return defaultInSValueImport(node);
	}


	/**
	* Called by the {@link AFunctionValueImport} node from {@link AFunctionValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionValueImport} node
	*/
	public A outAFunctionValueImport(AFunctionValueImport node) throws AnalysisException
	{
		return defaultOutSValueImport(node);
	}


	/**
	* Called by the {@link AOperationValueImport} node from {@link AOperationValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationValueImport} node
	*/
	public A caseAOperationValueImport(AOperationValueImport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAOperationValueImport(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getRenamed() != null ) 
		{
			mergeReturns(retVal,node.getRenamed().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getImportType() != null && !_visitedNodes.contains(node.getImportType())) 
		{
			mergeReturns(retVal,node.getImportType().apply(this));
		}

		mergeReturns(retVal,outAOperationValueImport(node));
		return retVal;
	}


	/**
	* Called by the {@link AOperationValueImport} node from {@link AOperationValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationValueImport} node
	*/
	public A inAOperationValueImport(AOperationValueImport node) throws AnalysisException
	{
		return defaultInSValueImport(node);
	}


	/**
	* Called by the {@link AOperationValueImport} node from {@link AOperationValueImport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationValueImport} node
	*/
	public A outAOperationValueImport(AOperationValueImport node) throws AnalysisException
	{
		return defaultOutSValueImport(node);
	}


	/**
	* Called by the {@link PExports} node from {@link PExports#apply(IAnalysis)}.
	* @param node the calling {@link PExports} node
	*/
	public A defaultInPExports(PExports node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExports} node from {@link PExports#apply(IAnalysis)}.
	* @param node the calling {@link PExports} node
	*/
	public A defaultOutPExports(PExports node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PExports} node from {@link PExports#apply(IAnalysis)}.
	* @param node the calling {@link PExports} node
	*/
	public A defaultPExports(PExports node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PExports} node from {@link PExports#apply(IAnalysis)}.
	* @param node the calling {@link PExports} node
	*/
	public A inPExports(PExports node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExports} node from {@link PExports#apply(IAnalysis)}.
	* @param node the calling {@link PExports} node
	*/
	public A outPExports(PExports node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AModuleExports} node from {@link AModuleExports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleExports} node
	*/
	public A caseAModuleExports(AModuleExports node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAModuleExports(node));

		{
			List<List<PExport>> copy = new ArrayList<List<PExport>>(node.getExports());
			for( List<PExport> list : copy) {
				for( PExport e : list) 
			{
					if(!_visitedNodes.contains(e))
					{
						mergeReturns(retVal,e.apply(this));
					}
				}
			}
		}

		mergeReturns(retVal,outAModuleExports(node));
		return retVal;
	}


	/**
	* Called by the {@link AModuleExports} node from {@link AModuleExports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleExports} node
	*/
	public A inAModuleExports(AModuleExports node) throws AnalysisException
	{
		return defaultInPExports(node);
	}


	/**
	* Called by the {@link AModuleExports} node from {@link AModuleExports#apply(IAnalysis)}.
	* @param node the calling {@link AModuleExports} node
	*/
	public A outAModuleExports(AModuleExports node) throws AnalysisException
	{
		return defaultOutPExports(node);
	}


	/**
	* Called by the {@link PExport} node from {@link PExport#apply(IAnalysis)}.
	* @param node the calling {@link PExport} node
	*/
	public A defaultInPExport(PExport node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExport} node from {@link PExport#apply(IAnalysis)}.
	* @param node the calling {@link PExport} node
	*/
	public A defaultOutPExport(PExport node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PExport} node from {@link PExport#apply(IAnalysis)}.
	* @param node the calling {@link PExport} node
	*/
	public A defaultPExport(PExport node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PExport} node from {@link PExport#apply(IAnalysis)}.
	* @param node the calling {@link PExport} node
	*/
	public A inPExport(PExport node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PExport} node from {@link PExport#apply(IAnalysis)}.
	* @param node the calling {@link PExport} node
	*/
	public A outPExport(PExport node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AAllExport} node from {@link AAllExport#apply(IAnalysis)}.
	* @param node the calling {@link AAllExport} node
	*/
	public A caseAAllExport(AAllExport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAllExport(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinition());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAAllExport(node));
		return retVal;
	}


	/**
	* Called by the {@link AAllExport} node from {@link AAllExport#apply(IAnalysis)}.
	* @param node the calling {@link AAllExport} node
	*/
	public A inAAllExport(AAllExport node) throws AnalysisException
	{
		return defaultInPExport(node);
	}


	/**
	* Called by the {@link AAllExport} node from {@link AAllExport#apply(IAnalysis)}.
	* @param node the calling {@link AAllExport} node
	*/
	public A outAAllExport(AAllExport node) throws AnalysisException
	{
		return defaultOutPExport(node);
	}


	/**
	* Called by the {@link AFunctionExport} node from {@link AFunctionExport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionExport} node
	*/
	public A caseAFunctionExport(AFunctionExport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFunctionExport(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinition());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getNameList());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		if(node.getExportType() != null && !_visitedNodes.contains(node.getExportType())) 
		{
			mergeReturns(retVal,node.getExportType().apply(this));
		}

		mergeReturns(retVal,outAFunctionExport(node));
		return retVal;
	}


	/**
	* Called by the {@link AFunctionExport} node from {@link AFunctionExport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionExport} node
	*/
	public A inAFunctionExport(AFunctionExport node) throws AnalysisException
	{
		return defaultInPExport(node);
	}


	/**
	* Called by the {@link AFunctionExport} node from {@link AFunctionExport#apply(IAnalysis)}.
	* @param node the calling {@link AFunctionExport} node
	*/
	public A outAFunctionExport(AFunctionExport node) throws AnalysisException
	{
		return defaultOutPExport(node);
	}


	/**
	* Called by the {@link AOperationExport} node from {@link AOperationExport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationExport} node
	*/
	public A caseAOperationExport(AOperationExport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAOperationExport(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinition());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getNameList());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		if(node.getExportType() != null && !_visitedNodes.contains(node.getExportType())) 
		{
			mergeReturns(retVal,node.getExportType().apply(this));
		}

		mergeReturns(retVal,outAOperationExport(node));
		return retVal;
	}


	/**
	* Called by the {@link AOperationExport} node from {@link AOperationExport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationExport} node
	*/
	public A inAOperationExport(AOperationExport node) throws AnalysisException
	{
		return defaultInPExport(node);
	}


	/**
	* Called by the {@link AOperationExport} node from {@link AOperationExport#apply(IAnalysis)}.
	* @param node the calling {@link AOperationExport} node
	*/
	public A outAOperationExport(AOperationExport node) throws AnalysisException
	{
		return defaultOutPExport(node);
	}


	/**
	* Called by the {@link ATypeExport} node from {@link ATypeExport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeExport} node
	*/
	public A caseATypeExport(ATypeExport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATypeExport(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinition());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outATypeExport(node));
		return retVal;
	}


	/**
	* Called by the {@link ATypeExport} node from {@link ATypeExport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeExport} node
	*/
	public A inATypeExport(ATypeExport node) throws AnalysisException
	{
		return defaultInPExport(node);
	}


	/**
	* Called by the {@link ATypeExport} node from {@link ATypeExport#apply(IAnalysis)}.
	* @param node the calling {@link ATypeExport} node
	*/
	public A outATypeExport(ATypeExport node) throws AnalysisException
	{
		return defaultOutPExport(node);
	}


	/**
	* Called by the {@link AValueExport} node from {@link AValueExport#apply(IAnalysis)}.
	* @param node the calling {@link AValueExport} node
	*/
	public A caseAValueExport(AValueExport node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAValueExport(node));

		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinition());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getNameList());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		if(node.getExportType() != null && !_visitedNodes.contains(node.getExportType())) 
		{
			mergeReturns(retVal,node.getExportType().apply(this));
		}

		mergeReturns(retVal,outAValueExport(node));
		return retVal;
	}


	/**
	* Called by the {@link AValueExport} node from {@link AValueExport#apply(IAnalysis)}.
	* @param node the calling {@link AValueExport} node
	*/
	public A inAValueExport(AValueExport node) throws AnalysisException
	{
		return defaultInPExport(node);
	}


	/**
	* Called by the {@link AValueExport} node from {@link AValueExport#apply(IAnalysis)}.
	* @param node the calling {@link AValueExport} node
	*/
	public A outAValueExport(AValueExport node) throws AnalysisException
	{
		return defaultOutPExport(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public A defaultInPStm(PStm node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public A defaultOutPStm(PStm node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public A defaultPStm(PStm node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public A inPStm(PStm node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public A outPStm(PStm node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AAlwaysStm} node from {@link AAlwaysStm#apply(IAnalysis)}.
	* @param node the calling {@link AAlwaysStm} node
	*/
	public A caseAAlwaysStm(AAlwaysStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAlwaysStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getAlways() != null && !_visitedNodes.contains(node.getAlways())) 
		{
			mergeReturns(retVal,node.getAlways().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outAAlwaysStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AAlwaysStm} node from {@link AAlwaysStm#apply(IAnalysis)}.
	* @param node the calling {@link AAlwaysStm} node
	*/
	public A inAAlwaysStm(AAlwaysStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AAlwaysStm} node from {@link AAlwaysStm#apply(IAnalysis)}.
	* @param node the calling {@link AAlwaysStm} node
	*/
	public A outAAlwaysStm(AAlwaysStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AAssignmentStm} node from {@link AAssignmentStm#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStm} node
	*/
	public A caseAAssignmentStm(AAssignmentStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAssignmentStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getTarget() != null && !_visitedNodes.contains(node.getTarget())) 
		{
			mergeReturns(retVal,node.getTarget().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getTargetType() != null && !_visitedNodes.contains(node.getTargetType())) 
		{
			mergeReturns(retVal,node.getTargetType().apply(this));
		}
		if(node.getExpType() != null && !_visitedNodes.contains(node.getExpType())) 
		{
			mergeReturns(retVal,node.getExpType().apply(this));
		}
		if(node.getClassDefinition() != null && !_visitedNodes.contains(node.getClassDefinition())) 
		{
			mergeReturns(retVal,node.getClassDefinition().apply(this));
		}
		if(node.getStateDefinition() != null && !_visitedNodes.contains(node.getStateDefinition())) 
		{
			mergeReturns(retVal,node.getStateDefinition().apply(this));
		}

		mergeReturns(retVal,outAAssignmentStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AAssignmentStm} node from {@link AAssignmentStm#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStm} node
	*/
	public A inAAssignmentStm(AAssignmentStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AAssignmentStm} node from {@link AAssignmentStm#apply(IAnalysis)}.
	* @param node the calling {@link AAssignmentStm} node
	*/
	public A outAAssignmentStm(AAssignmentStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AAtomicStm} node from {@link AAtomicStm#apply(IAnalysis)}.
	* @param node the calling {@link AAtomicStm} node
	*/
	public A caseAAtomicStm(AAtomicStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAAtomicStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AAssignmentStm> copy = new ArrayList<AAssignmentStm>(node.getAssignments());
			for( AAssignmentStm e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getStatedef() != null && !_visitedNodes.contains(node.getStatedef())) 
		{
			mergeReturns(retVal,node.getStatedef().apply(this));
		}

		mergeReturns(retVal,outAAtomicStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AAtomicStm} node from {@link AAtomicStm#apply(IAnalysis)}.
	* @param node the calling {@link AAtomicStm} node
	*/
	public A inAAtomicStm(AAtomicStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AAtomicStm} node from {@link AAtomicStm#apply(IAnalysis)}.
	* @param node the calling {@link AAtomicStm} node
	*/
	public A outAAtomicStm(AAtomicStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ACallObjectStm} node from {@link ACallObjectStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStm} node
	*/
	public A caseACallObjectStm(ACallObjectStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACallObjectStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getDesignator() != null && !_visitedNodes.contains(node.getDesignator())) 
		{
			mergeReturns(retVal,node.getDesignator().apply(this));
		}
		if(node.getClassname() != null ) 
		{
			mergeReturns(retVal,node.getClassname().apply(this));
		}
		if(node.getFieldname() != null ) 
		{
			mergeReturns(retVal,node.getFieldname().apply(this));
		}
		if(node.getField() != null ) 
		{
			mergeReturns(retVal,node.getField().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outACallObjectStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ACallObjectStm} node from {@link ACallObjectStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStm} node
	*/
	public A inACallObjectStm(ACallObjectStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ACallObjectStm} node from {@link ACallObjectStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallObjectStm} node
	*/
	public A outACallObjectStm(ACallObjectStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ACallStm} node from {@link ACallStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallStm} node
	*/
	public A caseACallStm(ACallStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACallStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getRootdef() != null && !_visitedNodes.contains(node.getRootdef())) 
		{
			mergeReturns(retVal,node.getRootdef().apply(this));
		}

		mergeReturns(retVal,outACallStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ACallStm} node from {@link ACallStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallStm} node
	*/
	public A inACallStm(ACallStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ACallStm} node from {@link ACallStm#apply(IAnalysis)}.
	* @param node the calling {@link ACallStm} node
	*/
	public A outACallStm(ACallStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ACasesStm} node from {@link ACasesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStm} node
	*/
	public A caseACasesStm(ACasesStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACasesStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		{
			List<ACaseAlternativeStm> copy = new ArrayList<ACaseAlternativeStm>(node.getCases());
			for( ACaseAlternativeStm e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getOthers() != null && !_visitedNodes.contains(node.getOthers())) 
		{
			mergeReturns(retVal,node.getOthers().apply(this));
		}

		mergeReturns(retVal,outACasesStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ACasesStm} node from {@link ACasesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStm} node
	*/
	public A inACasesStm(ACasesStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ACasesStm} node from {@link ACasesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACasesStm} node
	*/
	public A outACasesStm(ACasesStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AClassInvariantStm} node from {@link AClassInvariantStm#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantStm} node
	*/
	public A caseAClassInvariantStm(AClassInvariantStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAClassInvariantStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getInvDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAClassInvariantStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AClassInvariantStm} node from {@link AClassInvariantStm#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantStm} node
	*/
	public A inAClassInvariantStm(AClassInvariantStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AClassInvariantStm} node from {@link AClassInvariantStm#apply(IAnalysis)}.
	* @param node the calling {@link AClassInvariantStm} node
	*/
	public A outAClassInvariantStm(AClassInvariantStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ACyclesStm} node from {@link ACyclesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACyclesStm} node
	*/
	public A caseACyclesStm(ACyclesStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACyclesStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getCycles() != null && !_visitedNodes.contains(node.getCycles())) 
		{
			mergeReturns(retVal,node.getCycles().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}

		mergeReturns(retVal,outACyclesStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ACyclesStm} node from {@link ACyclesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACyclesStm} node
	*/
	public A inACyclesStm(ACyclesStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ACyclesStm} node from {@link ACyclesStm#apply(IAnalysis)}.
	* @param node the calling {@link ACyclesStm} node
	*/
	public A outACyclesStm(ACyclesStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ADurationStm} node from {@link ADurationStm#apply(IAnalysis)}.
	* @param node the calling {@link ADurationStm} node
	*/
	public A caseADurationStm(ADurationStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inADurationStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getDuration() != null && !_visitedNodes.contains(node.getDuration())) 
		{
			mergeReturns(retVal,node.getDuration().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}

		mergeReturns(retVal,outADurationStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ADurationStm} node from {@link ADurationStm#apply(IAnalysis)}.
	* @param node the calling {@link ADurationStm} node
	*/
	public A inADurationStm(ADurationStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ADurationStm} node from {@link ADurationStm#apply(IAnalysis)}.
	* @param node the calling {@link ADurationStm} node
	*/
	public A outADurationStm(ADurationStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AElseIfStm} node from {@link AElseIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStm} node
	*/
	public A caseAElseIfStm(AElseIfStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAElseIfStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getElseIf() != null && !_visitedNodes.contains(node.getElseIf())) 
		{
			mergeReturns(retVal,node.getElseIf().apply(this));
		}
		if(node.getThenStm() != null && !_visitedNodes.contains(node.getThenStm())) 
		{
			mergeReturns(retVal,node.getThenStm().apply(this));
		}

		mergeReturns(retVal,outAElseIfStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AElseIfStm} node from {@link AElseIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStm} node
	*/
	public A inAElseIfStm(AElseIfStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AElseIfStm} node from {@link AElseIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AElseIfStm} node
	*/
	public A outAElseIfStm(AElseIfStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AErrorStm} node from {@link AErrorStm#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStm} node
	*/
	public A caseAErrorStm(AErrorStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAErrorStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAErrorStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AErrorStm} node from {@link AErrorStm#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStm} node
	*/
	public A inAErrorStm(AErrorStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AErrorStm} node from {@link AErrorStm#apply(IAnalysis)}.
	* @param node the calling {@link AErrorStm} node
	*/
	public A outAErrorStm(AErrorStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AExitStm} node from {@link AExitStm#apply(IAnalysis)}.
	* @param node the calling {@link AExitStm} node
	*/
	public A caseAExitStm(AExitStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExitStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}
		if(node.getExpType() != null && !_visitedNodes.contains(node.getExpType())) 
		{
			mergeReturns(retVal,node.getExpType().apply(this));
		}

		mergeReturns(retVal,outAExitStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AExitStm} node from {@link AExitStm#apply(IAnalysis)}.
	* @param node the calling {@link AExitStm} node
	*/
	public A inAExitStm(AExitStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AExitStm} node from {@link AExitStm#apply(IAnalysis)}.
	* @param node the calling {@link AExitStm} node
	*/
	public A outAExitStm(AExitStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AForAllStm} node from {@link AForAllStm#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStm} node
	*/
	public A caseAForAllStm(AForAllStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForAllStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getSet() != null && !_visitedNodes.contains(node.getSet())) 
		{
			mergeReturns(retVal,node.getSet().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}

		mergeReturns(retVal,outAForAllStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AForAllStm} node from {@link AForAllStm#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStm} node
	*/
	public A inAForAllStm(AForAllStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AForAllStm} node from {@link AForAllStm#apply(IAnalysis)}.
	* @param node the calling {@link AForAllStm} node
	*/
	public A outAForAllStm(AForAllStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AForIndexStm} node from {@link AForIndexStm#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStm} node
	*/
	public A caseAForIndexStm(AForIndexStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForIndexStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getVar() != null ) 
		{
			mergeReturns(retVal,node.getVar().apply(this));
		}
		if(node.getFrom() != null && !_visitedNodes.contains(node.getFrom())) 
		{
			mergeReturns(retVal,node.getFrom().apply(this));
		}
		if(node.getTo() != null && !_visitedNodes.contains(node.getTo())) 
		{
			mergeReturns(retVal,node.getTo().apply(this));
		}
		if(node.getBy() != null && !_visitedNodes.contains(node.getBy())) 
		{
			mergeReturns(retVal,node.getBy().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}

		mergeReturns(retVal,outAForIndexStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AForIndexStm} node from {@link AForIndexStm#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStm} node
	*/
	public A inAForIndexStm(AForIndexStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AForIndexStm} node from {@link AForIndexStm#apply(IAnalysis)}.
	* @param node the calling {@link AForIndexStm} node
	*/
	public A outAForIndexStm(AForIndexStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AForPatternBindStm} node from {@link AForPatternBindStm#apply(IAnalysis)}.
	* @param node the calling {@link AForPatternBindStm} node
	*/
	public A caseAForPatternBindStm(AForPatternBindStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAForPatternBindStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPatternBind() != null && !_visitedNodes.contains(node.getPatternBind())) 
		{
			mergeReturns(retVal,node.getPatternBind().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}
		if(node.getSeqType() != null && !_visitedNodes.contains(node.getSeqType())) 
		{
			mergeReturns(retVal,node.getSeqType().apply(this));
		}

		mergeReturns(retVal,outAForPatternBindStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AForPatternBindStm} node from {@link AForPatternBindStm#apply(IAnalysis)}.
	* @param node the calling {@link AForPatternBindStm} node
	*/
	public A inAForPatternBindStm(AForPatternBindStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AForPatternBindStm} node from {@link AForPatternBindStm#apply(IAnalysis)}.
	* @param node the calling {@link AForPatternBindStm} node
	*/
	public A outAForPatternBindStm(AForPatternBindStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AIfStm} node from {@link AIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AIfStm} node
	*/
	public A caseAIfStm(AIfStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIfStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getIfExp() != null && !_visitedNodes.contains(node.getIfExp())) 
		{
			mergeReturns(retVal,node.getIfExp().apply(this));
		}
		if(node.getThenStm() != null && !_visitedNodes.contains(node.getThenStm())) 
		{
			mergeReturns(retVal,node.getThenStm().apply(this));
		}
		{
			List<AElseIfStm> copy = new ArrayList<AElseIfStm>(node.getElseIf());
			for( AElseIfStm e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getElseStm() != null && !_visitedNodes.contains(node.getElseStm())) 
		{
			mergeReturns(retVal,node.getElseStm().apply(this));
		}

		mergeReturns(retVal,outAIfStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AIfStm} node from {@link AIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AIfStm} node
	*/
	public A inAIfStm(AIfStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AIfStm} node from {@link AIfStm#apply(IAnalysis)}.
	* @param node the calling {@link AIfStm} node
	*/
	public A outAIfStm(AIfStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ALetBeStStm} node from {@link ALetBeStStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStm} node
	*/
	public A caseALetBeStStm(ALetBeStStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetBeStStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getBind() != null && !_visitedNodes.contains(node.getBind())) 
		{
			mergeReturns(retVal,node.getBind().apply(this));
		}
		if(node.getSuchThat() != null && !_visitedNodes.contains(node.getSuchThat())) 
		{
			mergeReturns(retVal,node.getSuchThat().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}
		if(node.getDef() != null && !_visitedNodes.contains(node.getDef())) 
		{
			mergeReturns(retVal,node.getDef().apply(this));
		}

		mergeReturns(retVal,outALetBeStStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetBeStStm} node from {@link ALetBeStStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStm} node
	*/
	public A inALetBeStStm(ALetBeStStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ALetBeStStm} node from {@link ALetBeStStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetBeStStm} node
	*/
	public A outALetBeStStm(ALetBeStStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ALetStm} node from {@link ALetStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetStm} node
	*/
	public A caseALetStm(ALetStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inALetStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getLocalDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}

		mergeReturns(retVal,outALetStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ALetStm} node from {@link ALetStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetStm} node
	*/
	public A inALetStm(ALetStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ALetStm} node from {@link ALetStm#apply(IAnalysis)}.
	* @param node the calling {@link ALetStm} node
	*/
	public A outALetStm(ALetStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ANotYetSpecifiedStm} node from {@link ANotYetSpecifiedStm#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedStm} node
	*/
	public A caseANotYetSpecifiedStm(ANotYetSpecifiedStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANotYetSpecifiedStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getOpname() != null ) 
		{
			mergeReturns(retVal,node.getOpname().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANotYetSpecifiedStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ANotYetSpecifiedStm} node from {@link ANotYetSpecifiedStm#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedStm} node
	*/
	public A inANotYetSpecifiedStm(ANotYetSpecifiedStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ANotYetSpecifiedStm} node from {@link ANotYetSpecifiedStm#apply(IAnalysis)}.
	* @param node the calling {@link ANotYetSpecifiedStm} node
	*/
	public A outANotYetSpecifiedStm(ANotYetSpecifiedStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AReturnStm} node from {@link AReturnStm#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStm} node
	*/
	public A caseAReturnStm(AReturnStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAReturnStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}

		mergeReturns(retVal,outAReturnStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AReturnStm} node from {@link AReturnStm#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStm} node
	*/
	public A inAReturnStm(AReturnStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AReturnStm} node from {@link AReturnStm#apply(IAnalysis)}.
	* @param node the calling {@link AReturnStm} node
	*/
	public A outAReturnStm(AReturnStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link SSimpleBlockStm} node from {@link SSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link SSimpleBlockStm} node
	*/
	public A defaultInSSimpleBlockStm(SSimpleBlockStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link SSimpleBlockStm} node from {@link SSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link SSimpleBlockStm} node
	*/
	public A defaultOutSSimpleBlockStm(SSimpleBlockStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link SSimpleBlockStm} node from {@link SSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link SSimpleBlockStm} node
	*/
	public A defaultSSimpleBlockStm(SSimpleBlockStm node) throws AnalysisException
	{
		return defaultPStm(node);
	}


	/**
	* Called by the {@link SSimpleBlockStm} node from {@link SSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link SSimpleBlockStm} node
	*/
	public A inSSimpleBlockStm(SSimpleBlockStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link SSimpleBlockStm} node from {@link SSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link SSimpleBlockStm} node
	*/
	public A outSSimpleBlockStm(SSimpleBlockStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ASkipStm} node from {@link ASkipStm#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStm} node
	*/
	public A caseASkipStm(ASkipStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASkipStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outASkipStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ASkipStm} node from {@link ASkipStm#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStm} node
	*/
	public A inASkipStm(ASkipStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ASkipStm} node from {@link ASkipStm#apply(IAnalysis)}.
	* @param node the calling {@link ASkipStm} node
	*/
	public A outASkipStm(ASkipStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ASpecificationStm} node from {@link ASpecificationStm#apply(IAnalysis)}.
	* @param node the calling {@link ASpecificationStm} node
	*/
	public A caseASpecificationStm(ASpecificationStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASpecificationStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<AExternalClause> copy = new ArrayList<AExternalClause>(node.getExternals());
			for( AExternalClause e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getPrecondition() != null && !_visitedNodes.contains(node.getPrecondition())) 
		{
			mergeReturns(retVal,node.getPrecondition().apply(this));
		}
		if(node.getPostcondition() != null && !_visitedNodes.contains(node.getPostcondition())) 
		{
			mergeReturns(retVal,node.getPostcondition().apply(this));
		}
		{
			List<AErrorCase> copy = new ArrayList<AErrorCase>(node.getErrors());
			for( AErrorCase e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outASpecificationStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ASpecificationStm} node from {@link ASpecificationStm#apply(IAnalysis)}.
	* @param node the calling {@link ASpecificationStm} node
	*/
	public A inASpecificationStm(ASpecificationStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ASpecificationStm} node from {@link ASpecificationStm#apply(IAnalysis)}.
	* @param node the calling {@link ASpecificationStm} node
	*/
	public A outASpecificationStm(ASpecificationStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AStartStm} node from {@link AStartStm#apply(IAnalysis)}.
	* @param node the calling {@link AStartStm} node
	*/
	public A caseAStartStm(AStartStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStartStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getObj() != null && !_visitedNodes.contains(node.getObj())) 
		{
			mergeReturns(retVal,node.getObj().apply(this));
		}

		mergeReturns(retVal,outAStartStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AStartStm} node from {@link AStartStm#apply(IAnalysis)}.
	* @param node the calling {@link AStartStm} node
	*/
	public A inAStartStm(AStartStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AStartStm} node from {@link AStartStm#apply(IAnalysis)}.
	* @param node the calling {@link AStartStm} node
	*/
	public A outAStartStm(AStartStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AStopStm} node from {@link AStopStm#apply(IAnalysis)}.
	* @param node the calling {@link AStopStm} node
	*/
	public A caseAStopStm(AStopStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAStopStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getObj() != null && !_visitedNodes.contains(node.getObj())) 
		{
			mergeReturns(retVal,node.getObj().apply(this));
		}

		mergeReturns(retVal,outAStopStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AStopStm} node from {@link AStopStm#apply(IAnalysis)}.
	* @param node the calling {@link AStopStm} node
	*/
	public A inAStopStm(AStopStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AStopStm} node from {@link AStopStm#apply(IAnalysis)}.
	* @param node the calling {@link AStopStm} node
	*/
	public A outAStopStm(AStopStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ASubclassResponsibilityStm} node from {@link ASubclassResponsibilityStm#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityStm} node
	*/
	public A caseASubclassResponsibilityStm(ASubclassResponsibilityStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASubclassResponsibilityStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outASubclassResponsibilityStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ASubclassResponsibilityStm} node from {@link ASubclassResponsibilityStm#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityStm} node
	*/
	public A inASubclassResponsibilityStm(ASubclassResponsibilityStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ASubclassResponsibilityStm} node from {@link ASubclassResponsibilityStm#apply(IAnalysis)}.
	* @param node the calling {@link ASubclassResponsibilityStm} node
	*/
	public A outASubclassResponsibilityStm(ASubclassResponsibilityStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ATixeStm} node from {@link ATixeStm#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStm} node
	*/
	public A caseATixeStm(ATixeStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATixeStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<ATixeStmtAlternative> copy = new ArrayList<ATixeStmtAlternative>(node.getTraps());
			for( ATixeStmtAlternative e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outATixeStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ATixeStm} node from {@link ATixeStm#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStm} node
	*/
	public A inATixeStm(ATixeStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ATixeStm} node from {@link ATixeStm#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStm} node
	*/
	public A outATixeStm(ATixeStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ATrapStm} node from {@link ATrapStm#apply(IAnalysis)}.
	* @param node the calling {@link ATrapStm} node
	*/
	public A caseATrapStm(ATrapStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATrapStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getPatternBind() != null && !_visitedNodes.contains(node.getPatternBind())) 
		{
			mergeReturns(retVal,node.getPatternBind().apply(this));
		}
		if(node.getWith() != null && !_visitedNodes.contains(node.getWith())) 
		{
			mergeReturns(retVal,node.getWith().apply(this));
		}
		if(node.getBody() != null && !_visitedNodes.contains(node.getBody())) 
		{
			mergeReturns(retVal,node.getBody().apply(this));
		}

		mergeReturns(retVal,outATrapStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ATrapStm} node from {@link ATrapStm#apply(IAnalysis)}.
	* @param node the calling {@link ATrapStm} node
	*/
	public A inATrapStm(ATrapStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ATrapStm} node from {@link ATrapStm#apply(IAnalysis)}.
	* @param node the calling {@link ATrapStm} node
	*/
	public A outATrapStm(ATrapStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link AWhileStm} node from {@link AWhileStm#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStm} node
	*/
	public A caseAWhileStm(AWhileStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAWhileStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}

		mergeReturns(retVal,outAWhileStm(node));
		return retVal;
	}


	/**
	* Called by the {@link AWhileStm} node from {@link AWhileStm#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStm} node
	*/
	public A inAWhileStm(AWhileStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link AWhileStm} node from {@link AWhileStm#apply(IAnalysis)}.
	* @param node the calling {@link AWhileStm} node
	*/
	public A outAWhileStm(AWhileStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link APeriodicStm} node from {@link APeriodicStm#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStm} node
	*/
	public A caseAPeriodicStm(APeriodicStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAPeriodicStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getOpname() != null ) 
		{
			mergeReturns(retVal,node.getOpname().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAPeriodicStm(node));
		return retVal;
	}


	/**
	* Called by the {@link APeriodicStm} node from {@link APeriodicStm#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStm} node
	*/
	public A inAPeriodicStm(APeriodicStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link APeriodicStm} node from {@link APeriodicStm#apply(IAnalysis)}.
	* @param node the calling {@link APeriodicStm} node
	*/
	public A outAPeriodicStm(APeriodicStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ASporadicStm} node from {@link ASporadicStm#apply(IAnalysis)}.
	* @param node the calling {@link ASporadicStm} node
	*/
	public A caseASporadicStm(ASporadicStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASporadicStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getOpname() != null ) 
		{
			mergeReturns(retVal,node.getOpname().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outASporadicStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ASporadicStm} node from {@link ASporadicStm#apply(IAnalysis)}.
	* @param node the calling {@link ASporadicStm} node
	*/
	public A inASporadicStm(ASporadicStm node) throws AnalysisException
	{
		return defaultInPStm(node);
	}


	/**
	* Called by the {@link ASporadicStm} node from {@link ASporadicStm#apply(IAnalysis)}.
	* @param node the calling {@link ASporadicStm} node
	*/
	public A outASporadicStm(ASporadicStm node) throws AnalysisException
	{
		return defaultOutPStm(node);
	}


	/**
	* Called by the {@link ABlockSimpleBlockStm} node from {@link ABlockSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ABlockSimpleBlockStm} node
	*/
	public A caseABlockSimpleBlockStm(ABlockSimpleBlockStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inABlockSimpleBlockStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PStm> copy = new ArrayList<PStm>(node.getStatements());
			for( PStm e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		{
			List<AAssignmentDefinition> copy = new ArrayList<AAssignmentDefinition>(node.getAssignmentDefs());
			for( AAssignmentDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outABlockSimpleBlockStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ABlockSimpleBlockStm} node from {@link ABlockSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ABlockSimpleBlockStm} node
	*/
	public A inABlockSimpleBlockStm(ABlockSimpleBlockStm node) throws AnalysisException
	{
		return defaultInSSimpleBlockStm(node);
	}


	/**
	* Called by the {@link ABlockSimpleBlockStm} node from {@link ABlockSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ABlockSimpleBlockStm} node
	*/
	public A outABlockSimpleBlockStm(ABlockSimpleBlockStm node) throws AnalysisException
	{
		return defaultOutSSimpleBlockStm(node);
	}


	/**
	* Called by the {@link ANonDeterministicSimpleBlockStm} node from {@link ANonDeterministicSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ANonDeterministicSimpleBlockStm} node
	*/
	public A caseANonDeterministicSimpleBlockStm(ANonDeterministicSimpleBlockStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANonDeterministicSimpleBlockStm(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		{
			List<PStm> copy = new ArrayList<PStm>(node.getStatements());
			for( PStm e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outANonDeterministicSimpleBlockStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ANonDeterministicSimpleBlockStm} node from {@link ANonDeterministicSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ANonDeterministicSimpleBlockStm} node
	*/
	public A inANonDeterministicSimpleBlockStm(ANonDeterministicSimpleBlockStm node) throws AnalysisException
	{
		return defaultInSSimpleBlockStm(node);
	}


	/**
	* Called by the {@link ANonDeterministicSimpleBlockStm} node from {@link ANonDeterministicSimpleBlockStm#apply(IAnalysis)}.
	* @param node the calling {@link ANonDeterministicSimpleBlockStm} node
	*/
	public A outANonDeterministicSimpleBlockStm(ANonDeterministicSimpleBlockStm node) throws AnalysisException
	{
		return defaultOutSSimpleBlockStm(node);
	}


	/**
	* Called by the {@link PStateDesignator} node from {@link PStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PStateDesignator} node
	*/
	public A defaultInPStateDesignator(PStateDesignator node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PStateDesignator} node from {@link PStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PStateDesignator} node
	*/
	public A defaultOutPStateDesignator(PStateDesignator node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PStateDesignator} node from {@link PStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PStateDesignator} node
	*/
	public A defaultPStateDesignator(PStateDesignator node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PStateDesignator} node from {@link PStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PStateDesignator} node
	*/
	public A inPStateDesignator(PStateDesignator node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PStateDesignator} node from {@link PStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PStateDesignator} node
	*/
	public A outPStateDesignator(PStateDesignator node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AFieldStateDesignator} node from {@link AFieldStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignator} node
	*/
	public A caseAFieldStateDesignator(AFieldStateDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldStateDesignator(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}
		if(node.getField() != null ) 
		{
			mergeReturns(retVal,node.getField().apply(this));
		}
		if(node.getObjectfield() != null ) 
		{
			mergeReturns(retVal,node.getObjectfield().apply(this));
		}

		mergeReturns(retVal,outAFieldStateDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldStateDesignator} node from {@link AFieldStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignator} node
	*/
	public A inAFieldStateDesignator(AFieldStateDesignator node) throws AnalysisException
	{
		return defaultInPStateDesignator(node);
	}


	/**
	* Called by the {@link AFieldStateDesignator} node from {@link AFieldStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldStateDesignator} node
	*/
	public A outAFieldStateDesignator(AFieldStateDesignator node) throws AnalysisException
	{
		return defaultOutPStateDesignator(node);
	}


	/**
	* Called by the {@link AIdentifierStateDesignator} node from {@link AIdentifierStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignator} node
	*/
	public A caseAIdentifierStateDesignator(AIdentifierStateDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIdentifierStateDesignator(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}

		mergeReturns(retVal,outAIdentifierStateDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link AIdentifierStateDesignator} node from {@link AIdentifierStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignator} node
	*/
	public A inAIdentifierStateDesignator(AIdentifierStateDesignator node) throws AnalysisException
	{
		return defaultInPStateDesignator(node);
	}


	/**
	* Called by the {@link AIdentifierStateDesignator} node from {@link AIdentifierStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierStateDesignator} node
	*/
	public A outAIdentifierStateDesignator(AIdentifierStateDesignator node) throws AnalysisException
	{
		return defaultOutPStateDesignator(node);
	}


	/**
	* Called by the {@link AMapSeqStateDesignator} node from {@link AMapSeqStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignator} node
	*/
	public A caseAMapSeqStateDesignator(AMapSeqStateDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAMapSeqStateDesignator(node));

		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}
		if(node.getMapseq() != null && !_visitedNodes.contains(node.getMapseq())) 
		{
			mergeReturns(retVal,node.getMapseq().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}
		if(node.getMapType() != null && !_visitedNodes.contains(node.getMapType())) 
		{
			mergeReturns(retVal,node.getMapType().apply(this));
		}
		if(node.getSeqType() != null && !_visitedNodes.contains(node.getSeqType())) 
		{
			mergeReturns(retVal,node.getSeqType().apply(this));
		}

		mergeReturns(retVal,outAMapSeqStateDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link AMapSeqStateDesignator} node from {@link AMapSeqStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignator} node
	*/
	public A inAMapSeqStateDesignator(AMapSeqStateDesignator node) throws AnalysisException
	{
		return defaultInPStateDesignator(node);
	}


	/**
	* Called by the {@link AMapSeqStateDesignator} node from {@link AMapSeqStateDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AMapSeqStateDesignator} node
	*/
	public A outAMapSeqStateDesignator(AMapSeqStateDesignator node) throws AnalysisException
	{
		return defaultOutPStateDesignator(node);
	}


	/**
	* Called by the {@link PObjectDesignator} node from {@link PObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PObjectDesignator} node
	*/
	public A defaultInPObjectDesignator(PObjectDesignator node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PObjectDesignator} node from {@link PObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PObjectDesignator} node
	*/
	public A defaultOutPObjectDesignator(PObjectDesignator node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PObjectDesignator} node from {@link PObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PObjectDesignator} node
	*/
	public A defaultPObjectDesignator(PObjectDesignator node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PObjectDesignator} node from {@link PObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PObjectDesignator} node
	*/
	public A inPObjectDesignator(PObjectDesignator node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PObjectDesignator} node from {@link PObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link PObjectDesignator} node
	*/
	public A outPObjectDesignator(PObjectDesignator node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AApplyObjectDesignator} node from {@link AApplyObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignator} node
	*/
	public A caseAApplyObjectDesignator(AApplyObjectDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAApplyObjectDesignator(node));

		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}
		{
			List<PExp> copy = new ArrayList<PExp>(node.getArgs());
			for( PExp e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}

		mergeReturns(retVal,outAApplyObjectDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link AApplyObjectDesignator} node from {@link AApplyObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignator} node
	*/
	public A inAApplyObjectDesignator(AApplyObjectDesignator node) throws AnalysisException
	{
		return defaultInPObjectDesignator(node);
	}


	/**
	* Called by the {@link AApplyObjectDesignator} node from {@link AApplyObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AApplyObjectDesignator} node
	*/
	public A outAApplyObjectDesignator(AApplyObjectDesignator node) throws AnalysisException
	{
		return defaultOutPObjectDesignator(node);
	}


	/**
	* Called by the {@link AFieldObjectDesignator} node from {@link AFieldObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignator} node
	*/
	public A caseAFieldObjectDesignator(AFieldObjectDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAFieldObjectDesignator(node));

		if(node.getObject() != null && !_visitedNodes.contains(node.getObject())) 
		{
			mergeReturns(retVal,node.getObject().apply(this));
		}
		if(node.getClassName() != null ) 
		{
			mergeReturns(retVal,node.getClassName().apply(this));
		}
		if(node.getFieldName() != null ) 
		{
			mergeReturns(retVal,node.getFieldName().apply(this));
		}
		if(node.getField() != null ) 
		{
			mergeReturns(retVal,node.getField().apply(this));
		}

		mergeReturns(retVal,outAFieldObjectDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link AFieldObjectDesignator} node from {@link AFieldObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignator} node
	*/
	public A inAFieldObjectDesignator(AFieldObjectDesignator node) throws AnalysisException
	{
		return defaultInPObjectDesignator(node);
	}


	/**
	* Called by the {@link AFieldObjectDesignator} node from {@link AFieldObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AFieldObjectDesignator} node
	*/
	public A outAFieldObjectDesignator(AFieldObjectDesignator node) throws AnalysisException
	{
		return defaultOutPObjectDesignator(node);
	}


	/**
	* Called by the {@link AIdentifierObjectDesignator} node from {@link AIdentifierObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignator} node
	*/
	public A caseAIdentifierObjectDesignator(AIdentifierObjectDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAIdentifierObjectDesignator(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}

		mergeReturns(retVal,outAIdentifierObjectDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link AIdentifierObjectDesignator} node from {@link AIdentifierObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignator} node
	*/
	public A inAIdentifierObjectDesignator(AIdentifierObjectDesignator node) throws AnalysisException
	{
		return defaultInPObjectDesignator(node);
	}


	/**
	* Called by the {@link AIdentifierObjectDesignator} node from {@link AIdentifierObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierObjectDesignator} node
	*/
	public A outAIdentifierObjectDesignator(AIdentifierObjectDesignator node) throws AnalysisException
	{
		return defaultOutPObjectDesignator(node);
	}


	/**
	* Called by the {@link ANewObjectDesignator} node from {@link ANewObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignator} node
	*/
	public A caseANewObjectDesignator(ANewObjectDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inANewObjectDesignator(node));

		if(node.getExpression() != null && !_visitedNodes.contains(node.getExpression())) 
		{
			mergeReturns(retVal,node.getExpression().apply(this));
		}

		mergeReturns(retVal,outANewObjectDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link ANewObjectDesignator} node from {@link ANewObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignator} node
	*/
	public A inANewObjectDesignator(ANewObjectDesignator node) throws AnalysisException
	{
		return defaultInPObjectDesignator(node);
	}


	/**
	* Called by the {@link ANewObjectDesignator} node from {@link ANewObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ANewObjectDesignator} node
	*/
	public A outANewObjectDesignator(ANewObjectDesignator node) throws AnalysisException
	{
		return defaultOutPObjectDesignator(node);
	}


	/**
	* Called by the {@link ASelfObjectDesignator} node from {@link ASelfObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignator} node
	*/
	public A caseASelfObjectDesignator(ASelfObjectDesignator node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inASelfObjectDesignator(node));

		if(node.getSelf() != null ) 
		{
			mergeReturns(retVal,node.getSelf().apply(this));
		}

		mergeReturns(retVal,outASelfObjectDesignator(node));
		return retVal;
	}


	/**
	* Called by the {@link ASelfObjectDesignator} node from {@link ASelfObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignator} node
	*/
	public A inASelfObjectDesignator(ASelfObjectDesignator node) throws AnalysisException
	{
		return defaultInPObjectDesignator(node);
	}


	/**
	* Called by the {@link ASelfObjectDesignator} node from {@link ASelfObjectDesignator#apply(IAnalysis)}.
	* @param node the calling {@link ASelfObjectDesignator} node
	*/
	public A outASelfObjectDesignator(ASelfObjectDesignator node) throws AnalysisException
	{
		return defaultOutPObjectDesignator(node);
	}


	/**
	* Called by the {@link PAlternativeStm} node from {@link PAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link PAlternativeStm} node
	*/
	public A defaultInPAlternativeStm(PAlternativeStm node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAlternativeStm} node from {@link PAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link PAlternativeStm} node
	*/
	public A defaultOutPAlternativeStm(PAlternativeStm node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PAlternativeStm} node from {@link PAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link PAlternativeStm} node
	*/
	public A defaultPAlternativeStm(PAlternativeStm node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PAlternativeStm} node from {@link PAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link PAlternativeStm} node
	*/
	public A inPAlternativeStm(PAlternativeStm node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PAlternativeStm} node from {@link PAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link PAlternativeStm} node
	*/
	public A outPAlternativeStm(PAlternativeStm node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ACaseAlternativeStm} node from {@link ACaseAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternativeStm} node
	*/
	public A caseACaseAlternativeStm(ACaseAlternativeStm node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inACaseAlternativeStm(node));

		if(node.getCexp() != null && !_visitedNodes.contains(node.getCexp())) 
		{
			mergeReturns(retVal,node.getCexp().apply(this));
		}
		if(node.getPattern() != null && !_visitedNodes.contains(node.getPattern())) 
		{
			mergeReturns(retVal,node.getPattern().apply(this));
		}
		if(node.getResult() != null && !_visitedNodes.contains(node.getResult())) 
		{
			mergeReturns(retVal,node.getResult().apply(this));
		}
		{
			List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefs());
			for( PDefinition e : copy) 
			{
				if(!_visitedNodes.contains(e))
				{
					mergeReturns(retVal,e.apply(this));
				}
			}
		}
		if(node.getCtype() != null && !_visitedNodes.contains(node.getCtype())) 
		{
			mergeReturns(retVal,node.getCtype().apply(this));
		}

		mergeReturns(retVal,outACaseAlternativeStm(node));
		return retVal;
	}


	/**
	* Called by the {@link ACaseAlternativeStm} node from {@link ACaseAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternativeStm} node
	*/
	public A inACaseAlternativeStm(ACaseAlternativeStm node) throws AnalysisException
	{
		return defaultInPAlternativeStm(node);
	}


	/**
	* Called by the {@link ACaseAlternativeStm} node from {@link ACaseAlternativeStm#apply(IAnalysis)}.
	* @param node the calling {@link ACaseAlternativeStm} node
	*/
	public A outACaseAlternativeStm(ACaseAlternativeStm node) throws AnalysisException
	{
		return defaultOutPAlternativeStm(node);
	}


	/**
	* Called by the {@link PStmtAlternative} node from {@link PStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PStmtAlternative} node
	*/
	public A defaultInPStmtAlternative(PStmtAlternative node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PStmtAlternative} node from {@link PStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PStmtAlternative} node
	*/
	public A defaultOutPStmtAlternative(PStmtAlternative node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PStmtAlternative} node from {@link PStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PStmtAlternative} node
	*/
	public A defaultPStmtAlternative(PStmtAlternative node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PStmtAlternative} node from {@link PStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PStmtAlternative} node
	*/
	public A inPStmtAlternative(PStmtAlternative node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PStmtAlternative} node from {@link PStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link PStmtAlternative} node
	*/
	public A outPStmtAlternative(PStmtAlternative node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link ATixeStmtAlternative} node from {@link ATixeStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStmtAlternative} node
	*/
	public A caseATixeStmtAlternative(ATixeStmtAlternative node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inATixeStmtAlternative(node));

		if(node.getPatternBind() != null && !_visitedNodes.contains(node.getPatternBind())) 
		{
			mergeReturns(retVal,node.getPatternBind().apply(this));
		}
		if(node.getStatement() != null && !_visitedNodes.contains(node.getStatement())) 
		{
			mergeReturns(retVal,node.getStatement().apply(this));
		}
		if(node.getExp() != null && !_visitedNodes.contains(node.getExp())) 
		{
			mergeReturns(retVal,node.getExp().apply(this));
		}

		mergeReturns(retVal,outATixeStmtAlternative(node));
		return retVal;
	}


	/**
	* Called by the {@link ATixeStmtAlternative} node from {@link ATixeStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStmtAlternative} node
	*/
	public A inATixeStmtAlternative(ATixeStmtAlternative node) throws AnalysisException
	{
		return defaultInPStmtAlternative(node);
	}


	/**
	* Called by the {@link ATixeStmtAlternative} node from {@link ATixeStmtAlternative#apply(IAnalysis)}.
	* @param node the calling {@link ATixeStmtAlternative} node
	*/
	public A outATixeStmtAlternative(ATixeStmtAlternative node) throws AnalysisException
	{
		return defaultOutPStmtAlternative(node);
	}


	/**
	* Called by the {@link PClause} node from {@link PClause#apply(IAnalysis)}.
	* @param node the calling {@link PClause} node
	*/
	public A defaultInPClause(PClause node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PClause} node from {@link PClause#apply(IAnalysis)}.
	* @param node the calling {@link PClause} node
	*/
	public A defaultOutPClause(PClause node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PClause} node from {@link PClause#apply(IAnalysis)}.
	* @param node the calling {@link PClause} node
	*/
	public A defaultPClause(PClause node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PClause} node from {@link PClause#apply(IAnalysis)}.
	* @param node the calling {@link PClause} node
	*/
	public A inPClause(PClause node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PClause} node from {@link PClause#apply(IAnalysis)}.
	* @param node the calling {@link PClause} node
	*/
	public A outPClause(PClause node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AExternalClause} node from {@link AExternalClause#apply(IAnalysis)}.
	* @param node the calling {@link AExternalClause} node
	*/
	public A caseAExternalClause(AExternalClause node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAExternalClause(node));

		if(node.getMode() != null ) 
		{
			mergeReturns(retVal,node.getMode().apply(this));
		}
		{
			List<ILexNameToken> copy = new ArrayList<ILexNameToken>(node.getIdentifiers());
			for( ILexNameToken e : copy) 
			{
				mergeReturns(retVal,e.apply(this));
			}
		}
		if(node.getType() != null && !_visitedNodes.contains(node.getType())) 
		{
			mergeReturns(retVal,node.getType().apply(this));
		}

		mergeReturns(retVal,outAExternalClause(node));
		return retVal;
	}


	/**
	* Called by the {@link AExternalClause} node from {@link AExternalClause#apply(IAnalysis)}.
	* @param node the calling {@link AExternalClause} node
	*/
	public A inAExternalClause(AExternalClause node) throws AnalysisException
	{
		return defaultInPClause(node);
	}


	/**
	* Called by the {@link AExternalClause} node from {@link AExternalClause#apply(IAnalysis)}.
	* @param node the calling {@link AExternalClause} node
	*/
	public A outAExternalClause(AExternalClause node) throws AnalysisException
	{
		return defaultOutPClause(node);
	}


	/**
	* Called by the {@link PCase} node from {@link PCase#apply(IAnalysis)}.
	* @param node the calling {@link PCase} node
	*/
	public A defaultInPCase(PCase node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PCase} node from {@link PCase#apply(IAnalysis)}.
	* @param node the calling {@link PCase} node
	*/
	public A defaultOutPCase(PCase node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link PCase} node from {@link PCase#apply(IAnalysis)}.
	* @param node the calling {@link PCase} node
	*/
	public A defaultPCase(PCase node) throws AnalysisException
	{
		return defaultINode(node);
	}


	/**
	* Called by the {@link PCase} node from {@link PCase#apply(IAnalysis)}.
	* @param node the calling {@link PCase} node
	*/
	public A inPCase(PCase node) throws AnalysisException
	{
		return defaultInINode(node);
	}


	/**
	* Called by the {@link PCase} node from {@link PCase#apply(IAnalysis)}.
	* @param node the calling {@link PCase} node
	*/
	public A outPCase(PCase node) throws AnalysisException
	{
		return defaultOutINode(node);
	}


	/**
	* Called by the {@link AErrorCase} node from {@link AErrorCase#apply(IAnalysis)}.
	* @param node the calling {@link AErrorCase} node
	*/
	public A caseAErrorCase(AErrorCase node) throws AnalysisException
	{
		_visitedNodes.add(node);
		A retVal = createNewReturnValue(node);
		mergeReturns(retVal,inAErrorCase(node));

		if(node.getName() != null ) 
		{
			mergeReturns(retVal,node.getName().apply(this));
		}
		if(node.getLeft() != null && !_visitedNodes.contains(node.getLeft())) 
		{
			mergeReturns(retVal,node.getLeft().apply(this));
		}
		if(node.getRight() != null && !_visitedNodes.contains(node.getRight())) 
		{
			mergeReturns(retVal,node.getRight().apply(this));
		}

		mergeReturns(retVal,outAErrorCase(node));
		return retVal;
	}


	/**
	* Called by the {@link AErrorCase} node from {@link AErrorCase#apply(IAnalysis)}.
	* @param node the calling {@link AErrorCase} node
	*/
	public A inAErrorCase(AErrorCase node) throws AnalysisException
	{
		return defaultInPCase(node);
	}


	/**
	* Called by the {@link AErrorCase} node from {@link AErrorCase#apply(IAnalysis)}.
	* @param node the calling {@link AErrorCase} node
	*/
	public A outAErrorCase(AErrorCase node) throws AnalysisException
	{
		return defaultOutPCase(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public A defaultOutINode(INode node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public A defaultInINode(INode node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public A defaultINode(INode node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A defaultOutIToken(IToken node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A defaultInIToken(IToken node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public A defaultIToken(IToken node) throws AnalysisException
	{
		return createNewReturnValue(node);
	}



	public abstract A mergeReturns(A original, A new_);


	public abstract A createNewReturnValue(INode node) throws AnalysisException;


	public abstract A createNewReturnValue(Object node) throws AnalysisException;


}
