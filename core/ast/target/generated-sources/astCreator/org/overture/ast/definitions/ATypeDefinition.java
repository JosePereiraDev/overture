/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.definitions;


import org.overture.ast.definitions.PDefinition;
import org.overture.ast.types.SInvariantType;
import org.overture.ast.definitions.PDefinitionBase;
import java.util.HashMap;
import org.overture.ast.definitions.SClassDefinition;
import org.overture.ast.typechecker.Pass;
import org.overture.ast.analysis.intf.IAnswer;
import org.overture.ast.patterns.PPattern;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.definitions.ATypeDefinition;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import java.lang.String;
import org.overture.ast.node.GraphNodeList;
import java.util.LinkedList;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.expressions.PExp;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import java.util.List;
import org.overture.ast.typechecker.NameScope;
import org.overture.ast.types.PType;
import org.overture.ast.definitions.AExplicitFunctionDefinition;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class ATypeDefinition extends PDefinitionBase
{
	private static final long serialVersionUID = 1L;

	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private SInvariantType _invType;
	private PPattern _invPattern;
	private PExp _invExpression;
	private AExplicitFunctionDefinition _invdef;
	private Boolean _infinite;
	/**
	* Graph field, parent will not be removed when added and parent 
	*  of this field may not be this node. Also excluded for visitor.
	*/
	private GraphNodeList<PDefinition> _composeDefinitions = new GraphNodeList<PDefinition>(this);

	/**
	 * Creates a new {@link ATypeDefinition} node with no children.
	 */
	public ATypeDefinition()
	{

	}


	/**
	* Creates a new {@code ATypeDefinition TAG=type} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param invPattern_ the {@link PPattern} node for the {@code invPattern} child of this {@link ATypeDefinition} node
	* @param invExpression_ the {@link PExp} node for the {@code invExpression} child of this {@link ATypeDefinition} node
	* @param invdef_ the {@link AExplicitFunctionDefinition} node for the {@code invdef} child of this {@link ATypeDefinition} node
	* @param infinite_ the {@link Boolean} node for the {@code infinite} child of this {@link ATypeDefinition} node
	*/
	public ATypeDefinition(ILexLocation location_, NameScope nameScope_, Boolean used_, AAccessSpecifierAccessSpecifier access_, Pass pass_, PPattern invPattern_, PExp invExpression_, AExplicitFunctionDefinition invdef_, Boolean infinite_)
	{
		super(location_,null,nameScope_,used_,null,access_,null,pass_);
		this.setInvPattern(invPattern_);
		this.setInvExpression(invExpression_);
		this.setInvdef(invdef_);
		this.setInfinite(infinite_);

	}


	/**
	* Creates a new {@code ATypeDefinition} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param invType_ the {@link SInvariantType} <b>graph</a> node for the {@code invType} child of this {@link ATypeDefinition} node.
	*  <i>The parent of this {@code invType } will not be changed by adding it to this node.</i>
	* @param invPattern_ the {@link PPattern} node for the {@code invPattern} child of this {@link ATypeDefinition} node
	* @param invExpression_ the {@link PExp} node for the {@code invExpression} child of this {@link ATypeDefinition} node
	* @param invdef_ the {@link AExplicitFunctionDefinition} node for the {@code invdef} child of this {@link ATypeDefinition} node
	* @param infinite_ the {@link Boolean} node for the {@code infinite} child of this {@link ATypeDefinition} node
	* @param name_ the {@link ILexNameToken} <b>graph</a> node for the {@code name} child of this {@link ATypeDefinition} node.
	*  <i>The parent of this {@code name } will not be changed by adding it to this node.</i>
	* @param composeDefinitions_ the {@link GraphNodeList} <b>graph</a> node for the {@code composeDefinitions} child of this {@link ATypeDefinition} node.
	*  <i>The parent of this {@code composeDefinitions } will not be changed by adding it to this node.</i>
	*/
	public ATypeDefinition(ILexLocation location_, NameScope nameScope_, Boolean used_, SClassDefinition classDefinition_, AAccessSpecifierAccessSpecifier access_, PType type_, Pass pass_, SInvariantType invType_, PPattern invPattern_, PExp invExpression_, AExplicitFunctionDefinition invdef_, Boolean infinite_, ILexNameToken name_, List<? extends PDefinition> composeDefinitions_)
	{
		super(location_,null,nameScope_,used_,classDefinition_,access_,type_,pass_);
		this.setInvType(invType_);
		this.setInvPattern(invPattern_);
		this.setInvExpression(invExpression_);
		this.setInvdef(invdef_);
		this.setInfinite(infinite_);
		this.setName(name_);
		this.setComposeDefinitions(composeDefinitions_);

	}



	public String toString()
	{
		return "" + _name.getFullName() + " = " + _type/*.toDetailedString()*/ +
                (_invPattern == null ? "" :
                    "\n\tinv " + _invPattern + " == " + _invExpression);
	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link ATypeDefinition} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link ATypeDefinition} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link ATypeDefinition} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			return;
		}

		if (this._classDefinition == child) {
			return;
		}

		if (this._access == child) {
			this._access = null;
			return;
		}

		if (this._type == child) {
			return;
		}

		if (this._invType == child) {
			return;
		}

		if (this._invPattern == child) {
			this._invPattern = null;
			return;
		}

		if (this._invExpression == child) {
			this._invExpression = null;
			return;
		}

		if (this._invdef == child) {
			this._invdef = null;
			return;
		}

		if (this._name == child) {
			return;
		}

		if (this._composeDefinitions.contains(child)) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_invType",this._invType);
		fields.put("_invPattern",this._invPattern);
		fields.put("_invExpression",this._invExpression);
		fields.put("_invdef",this._invdef);
		fields.put("_infinite",this._infinite);
		fields.put("_name",this._name);
		fields.put("_composeDefinitions",this._composeDefinitions);
		return fields;
	}


	/**
	 * Creates a deep clone of this {@link ATypeDefinition} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link ATypeDefinition} node
	 */
	public ATypeDefinition clone(Map<INode,INode> oldToNewMap)
	{
		ATypeDefinition node = new ATypeDefinition(
			_location,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access, oldToNewMap),
			_type,
			_pass,
			_invType,
			cloneNode(_invPattern, oldToNewMap),
			cloneNode(_invExpression, oldToNewMap),
			cloneNode(_invdef, oldToNewMap),
			_infinite,
			(ILexNameToken)_name,
			_composeDefinitions
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof ATypeDefinition)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Returns a deep clone of this {@link ATypeDefinition} node.
	 * @return a deep clone of this {@link ATypeDefinition} node
	 */
	public ATypeDefinition clone()
	{
		return new ATypeDefinition(
			_location,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access),
			_type,
			_pass,
			_invType,
			cloneNode(_invPattern),
			cloneNode(_invExpression),
			cloneNode(_invdef),
			_infinite,
			(ILexNameToken)_name,
			_composeDefinitions
		);
	}


	/**
	 * Sets the {@code _invType} child of this {@link ATypeDefinition} node.
	 * @param value the new {@code _invType} child of this {@link ATypeDefinition} node
	*/
	public void setInvType(SInvariantType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._invType = value;

	}


	/**
	 * @return the {@link SInvariantType} node which is the {@code _invType} child of this {@link ATypeDefinition} node
	*/
	public SInvariantType getInvType()
	{
		return this._invType;
	}


	/**
	 * Sets the {@code _invPattern} child of this {@link ATypeDefinition} node.
	 * @param value the new {@code _invPattern} child of this {@link ATypeDefinition} node
	*/
	public void setInvPattern(PPattern value)
	{
		if (this._invPattern != null) {
			this._invPattern.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._invPattern = value;

	}


	/**
	 * @return the {@link PPattern} node which is the {@code _invPattern} child of this {@link ATypeDefinition} node
	*/
	public PPattern getInvPattern()
	{
		return this._invPattern;
	}


	/**
	 * Sets the {@code _invExpression} child of this {@link ATypeDefinition} node.
	 * @param value the new {@code _invExpression} child of this {@link ATypeDefinition} node
	*/
	public void setInvExpression(PExp value)
	{
		if (this._invExpression != null) {
			this._invExpression.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._invExpression = value;

	}


	/**
	 * @return the {@link PExp} node which is the {@code _invExpression} child of this {@link ATypeDefinition} node
	*/
	public PExp getInvExpression()
	{
		return this._invExpression;
	}


	/**
	 * Sets the {@code _invdef} child of this {@link ATypeDefinition} node.
	 * @param value the new {@code _invdef} child of this {@link ATypeDefinition} node
	*/
	public void setInvdef(AExplicitFunctionDefinition value)
	{
		if (this._invdef != null) {
			this._invdef.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._invdef = value;

	}


	/**
	 * @return the {@link AExplicitFunctionDefinition} node which is the {@code _invdef} child of this {@link ATypeDefinition} node
	*/
	public AExplicitFunctionDefinition getInvdef()
	{
		return this._invdef;
	}


	/**
	 * Sets the {@code _infinite} child of this {@link ATypeDefinition} node.
	 * @param value the new {@code _infinite} child of this {@link ATypeDefinition} node
	*/
	public void setInfinite(Boolean value)
	{
		this._infinite = value;
	}


	/**
	 * @return the {@link Boolean} node which is the {@code _infinite} child of this {@link ATypeDefinition} node
	*/
	public Boolean getInfinite()
	{
		return this._infinite;
	}


	/**
	 * Sets the {@code _name} child of this {@link ATypeDefinition} node.
	 * @param value the new {@code _name} child of this {@link ATypeDefinition} node
	*/
	public void setName(ILexNameToken value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._name = value;

	}


	/**
	 * @return the {@link ILexNameToken} node which is the {@code _name} child of this {@link ATypeDefinition} node
	*/
	public ILexNameToken getName()
	{
		return (ILexNameToken)this._name;
	}


	/**
	 * Sets the {@code _composeDefinitions} child of this {@link ATypeDefinition} node.
	 * @param value the new {@code _composeDefinitions} child of this {@link ATypeDefinition} node
	*/
	public void setComposeDefinitions(List<? extends PDefinition> value)
	{
		if (this._composeDefinitions.equals(value)) {
			return;
		}
		this._composeDefinitions.clear();
		if (value != null) {
			this._composeDefinitions.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _composeDefinitions} child of this {@link ATypeDefinition} node
	*/
	public LinkedList<PDefinition> getComposeDefinitions()
	{
		return this._composeDefinitions;
	}


	/**
	* Calls the {@link IAnalysis#caseATypeDefinition(ATypeDefinition)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link ATypeDefinition} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseATypeDefinition(this);
	}


	/**
	* Calls the {@link IAnswer#caseATypeDefinition(ATypeDefinition)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link ATypeDefinition} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseATypeDefinition(this);
	}


	/**
	* Calls the {@link IQuestion#caseATypeDefinition(ATypeDefinition, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link ATypeDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseATypeDefinition(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseATypeDefinition(ATypeDefinition, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link ATypeDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseATypeDefinition(this,question);
	}



}
