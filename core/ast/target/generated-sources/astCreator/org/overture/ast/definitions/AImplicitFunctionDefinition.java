/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overture.ast.definitions;


import org.overture.ast.definitions.PDefinition;
import java.util.HashMap;
import org.overture.ast.patterns.APatternListTypePair;
import org.overture.ast.definitions.SClassDefinition;
import java.lang.Integer;
import org.overture.ast.util.ToStringUtil;
import org.overture.ast.definitions.SFunctionDefinitionBase;
import org.overture.ast.typechecker.Pass;
import org.overture.ast.analysis.intf.IAnswer;
import org.overture.ast.intf.lex.ILexNameToken;
import org.overture.ast.types.AAccessSpecifierAccessSpecifier;
import java.util.Map;
import java.lang.Boolean;
import org.overture.ast.node.INode;
import org.overture.ast.analysis.intf.IQuestion;
import java.lang.String;
import java.util.LinkedList;
import org.overture.ast.analysis.intf.IQuestionAnswer;
import org.overture.ast.types.AFunctionType;
import org.overture.ast.expressions.PExp;
import org.overture.ast.analysis.AnalysisException;
import org.overture.ast.intf.lex.ILexLocation;
import java.util.List;
import org.overture.ast.node.NodeList;
import org.overture.ast.typechecker.NameScope;
import org.overture.ast.types.PType;
import org.overture.ast.definitions.AImplicitFunctionDefinition;
import org.overture.ast.definitions.AExplicitFunctionDefinition;
import org.overture.ast.patterns.APatternTypePair;
import org.overture.ast.analysis.intf.IAnalysis;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AImplicitFunctionDefinition extends SFunctionDefinitionBase
{
	private static final long serialVersionUID = 1L;

	private NodeList<APatternListTypePair> _paramPatterns = new NodeList<APatternListTypePair>(this);
	private APatternTypePair _result;

	/**
	 * Creates a new {@link AImplicitFunctionDefinition} node with no children.
	 */
	public AImplicitFunctionDefinition()
	{

	}


	/**
	* Creates a new {@code AImplicitFunctionDefinition} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param paramPatterns_ the {@link NodeList} node for the {@code paramPatterns} child of this {@link AImplicitFunctionDefinition} node
	* @param result_ the {@link APatternTypePair} node for the {@code result} child of this {@link AImplicitFunctionDefinition} node
	* @param type_ the {@link AFunctionType} <b>graph</a> node for the {@code type} child of this {@link AImplicitFunctionDefinition} node.
	*  <i>The parent of this {@code type } will not be changed by adding it to this node.</i>
	*/
	public AImplicitFunctionDefinition(ILexLocation location_, ILexNameToken name_, NameScope nameScope_, Boolean used_, SClassDefinition classDefinition_, AAccessSpecifierAccessSpecifier access_, Pass pass_, List<? extends ILexNameToken> typeParams_, PExp body_, PExp precondition_, PExp postcondition_, ILexNameToken measure_, AExplicitFunctionDefinition predef_, AExplicitFunctionDefinition postdef_, PDefinition measureDef_, Boolean recursive_, Boolean isUndefined_, Integer measureLexical_, PType expectedResult_, PType actualResult_, List<? extends APatternListTypePair> paramPatterns_, APatternTypePair result_, AFunctionType type_)
	{
		super(location_,name_,nameScope_,used_,classDefinition_,access_,null,pass_,typeParams_,body_,precondition_,postcondition_,measure_,predef_,postdef_,measureDef_,recursive_,isUndefined_,measureLexical_,expectedResult_,actualResult_);
		this.setParamPatterns(paramPatterns_);
		this.setResult(result_);
		this.setType(type_);

	}


	/**
	* Creates a new {@code AImplicitFunctionDefinition TAG=implicit} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param paramPatterns_ the {@link NodeList} node for the {@code paramPatterns} child of this {@link AImplicitFunctionDefinition} node
	* @param result_ the {@link APatternTypePair} node for the {@code result} child of this {@link AImplicitFunctionDefinition} node
	*/
	public AImplicitFunctionDefinition(ILexLocation location_, NameScope nameScope_, Boolean used_, AAccessSpecifierAccessSpecifier access_, Pass pass_, List<? extends ILexNameToken> typeParams_, PExp precondition_, PExp postcondition_, ILexNameToken measure_, List<? extends APatternListTypePair> paramPatterns_, APatternTypePair result_)
	{
		super(location_,null,nameScope_,used_,null,access_,null,pass_,typeParams_,null,precondition_,postcondition_,measure_,null,null,null,false,false,0,null,null);
		this.setParamPatterns(paramPatterns_);
		this.setResult(result_);

	}


	/**
	* Forwarding hashCode call to {@link Object#hashCode()}.
	**/
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}


	/**
	 * Returns a deep clone of this {@link AImplicitFunctionDefinition} node.
	 * @return a deep clone of this {@link AImplicitFunctionDefinition} node
	 */
	public AImplicitFunctionDefinition clone()
	{
		return new AImplicitFunctionDefinition(
			_location,
			_name,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access),
			_pass,
			cloneList(_typeParams),
			_body,
			cloneNode(_precondition),
			cloneNode(_postcondition),
			cloneNode(_measure),
			_predef,
			_postdef,
			_measureDef,
			_recursive,
			_isUndefined,
			_measureLexical,
			_expectedResult,
			_actualResult,
			cloneList(_paramPatterns),
			cloneNode(_result),
			(AFunctionType)_type
		);
	}


	/**
	 * Creates a deep clone of this {@link AImplicitFunctionDefinition} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AImplicitFunctionDefinition} node
	 */
	public AImplicitFunctionDefinition clone(Map<INode,INode> oldToNewMap)
	{
		AImplicitFunctionDefinition node = new AImplicitFunctionDefinition(
			_location,
			_name,
			_nameScope,
			_used,
			_classDefinition,
			cloneNode(_access, oldToNewMap),
			_pass,
			cloneList(_typeParams, oldToNewMap),
			_body,
			cloneNode(_precondition, oldToNewMap),
			cloneNode(_postcondition, oldToNewMap),
			cloneNode(_measure, oldToNewMap),
			_predef,
			_postdef,
			_measureDef,
			_recursive,
			_isUndefined,
			_measureLexical,
			_expectedResult,
			_actualResult,
			cloneList(_paramPatterns, oldToNewMap),
			cloneNode(_result, oldToNewMap),
			(AFunctionType)_type
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	* Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o)
	{
		if (o != null && o instanceof AImplicitFunctionDefinition)		{
			 return toString().equals(o.toString());
		}
		return false;
	}


	/**
	 * Creates a map of all field names and their value
	 * @param includeInheritedFields if true all inherited fields are included
	 * @return a a map of names to values of all fields
	 */
	@Override
	public Map<String,Object> getChildren(Boolean includeInheritedFields)
	{
		Map<String,Object> fields = new HashMap<String,Object>();
		if(includeInheritedFields)
		{
			fields.putAll(super.getChildren(includeInheritedFields));
		}
		fields.put("_paramPatterns",this._paramPatterns);
		fields.put("_result",this._result);
		fields.put("_type",this._type);
		return fields;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AImplicitFunctionDefinition} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AImplicitFunctionDefinition} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AImplicitFunctionDefinition} node
	 */
	public void removeChild(INode child)
	{
		if (this._name == child) {
			return;
		}

		if (this._classDefinition == child) {
			return;
		}

		if (this._access == child) {
			this._access = null;
			return;
		}

		if (this._type == child) {
			return;
		}

		if (this._typeParams.remove(child)) {
				return;
		}
		if (this._body == child) {
			return;
		}

		if (this._precondition == child) {
			this._precondition = null;
			return;
		}

		if (this._postcondition == child) {
			this._postcondition = null;
			return;
		}

		if (this._measure == child) {
			this._measure = null;
			return;
		}

		if (this._predef == child) {
			return;
		}

		if (this._postdef == child) {
			return;
		}

		if (this._measureDef == child) {
			return;
		}

		if (this._expectedResult == child) {
			return;
		}

		if (this._actualResult == child) {
			return;
		}

		if (this._paramPatterns.remove(child)) {
				return;
		}
		if (this._result == child) {
			this._result = null;
			return;
		}

		if (this._type == child) {
			return;
		}

		throw new RuntimeException("Not a child.");
	}



	public String toString()
	{
		return "" + ""+ToStringUtil.getImplicitFunctionString(this);
	}


	/**
	 * Sets the {@code _paramPatterns} child of this {@link AImplicitFunctionDefinition} node.
	 * @param value the new {@code _paramPatterns} child of this {@link AImplicitFunctionDefinition} node
	*/
	public void setParamPatterns(List<? extends APatternListTypePair> value)
	{
		if (this._paramPatterns.equals(value)) {
			return;
		}
		this._paramPatterns.clear();
		if (value != null) {
			this._paramPatterns.addAll(value);
		}

	}


	/**
	 * @return the {@link LinkedList} node which is the {@code _paramPatterns} child of this {@link AImplicitFunctionDefinition} node
	*/
	public LinkedList<APatternListTypePair> getParamPatterns()
	{
		return this._paramPatterns;
	}


	/**
	 * Sets the {@code _result} child of this {@link AImplicitFunctionDefinition} node.
	 * @param value the new {@code _result} child of this {@link AImplicitFunctionDefinition} node
	*/
	public void setResult(APatternTypePair value)
	{
		if (this._result != null) {
			this._result.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._result = value;

	}


	/**
	 * @return the {@link APatternTypePair} node which is the {@code _result} child of this {@link AImplicitFunctionDefinition} node
	*/
	public APatternTypePair getResult()
	{
		return this._result;
	}


	/**
	 * Sets the {@code _type} child of this {@link AImplicitFunctionDefinition} node.
	 * @param value the new {@code _type} child of this {@link AImplicitFunctionDefinition} node
	*/
	public void setType(AFunctionType value)
	{
		if( value != null && value.parent() == null) {
			value.parent(this);
		}
		this._type = value;

	}


	/**
	 * @return the {@link AFunctionType} node which is the {@code _type} child of this {@link AImplicitFunctionDefinition} node
	*/
	public AFunctionType getType()
	{
		return (AFunctionType)this._type;
	}


	/**
	* Calls the {@link IAnalysis#caseAImplicitFunctionDefinition(AImplicitFunctionDefinition)} of the {@link IAnalysis} {@code caller}.
	* @param caller the {@link IAnalysis} to which this {@link AImplicitFunctionDefinition} node is applied
	*/
	@Override
	public void apply(IAnalysis caller) throws AnalysisException
	{
		caller.caseAImplicitFunctionDefinition(this);
	}


	/**
	* Calls the {@link IAnswer#caseAImplicitFunctionDefinition(AImplicitFunctionDefinition)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AImplicitFunctionDefinition} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller) throws AnalysisException
	{
		return caller.caseAImplicitFunctionDefinition(this);
	}


	/**
	* Calls the {@link IQuestion#caseAImplicitFunctionDefinition(AImplicitFunctionDefinition, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AImplicitFunctionDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question) throws AnalysisException
	{
		caller.caseAImplicitFunctionDefinition(this,question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAImplicitFunctionDefinition(AImplicitFunctionDefinition, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AImplicitFunctionDefinition} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question) throws AnalysisException
	{
		return caller.caseAImplicitFunctionDefinition(this,question);
	}



}
