
============================================================================================================
|
|		Specification RTs
|___________________________________________________________________________________________________________
Parsed Specification RT - ClassList<AClassClassDefinition>   : class EnvironmentTask private  num:nat := 0 protected  max_stimuli:nat := 0 protected  e2s:map (nat) to (nat) := {|->} protected  s2e:map (nat) to (nat) := {|->} public static  public static checkResponseTimes: (map (nat) to (nat) * map (nat) to (nat) * nat -> bool) 	checkResponseTimes(pe2s, ps2e, plim) == (forall idx in set (dom ps2e) & ((ps2e(idx) - pe2s(idx)) <= plim)) 	pre (((dom ps2e) inter (dom pe2s)) = (dom ps2e)) public  EnvironmentTask (nat ==> (unresolved EnvironmentTask`EnvironmentTask)) 	EnvironmentTask(pno) == max_stimuli := pno public  getNum (() ==> nat) 	getNum() == ( res:nat := num  num := (num + 1); return (res) ) public  Run (() ==> ()) 	Run() == is subclass responsibility public  HandleEvent (nat ==> ()) 	HandleEvent(pev) == is subclass responsibility public  logEnvToSys (nat ==> ()) 	logEnvToSys(pev) == e2s := (e2s munion {pev |-> time}) public  logSysToEnv (nat ==> ()) 	logSysToEnv(pev) == s2e := (s2e munion {pev |-> time}) public  getMinMaxAverage (() ==> (nat * nat * real)) 	getMinMaxAverage() == ( min:[nat] := nil max:[nat] := nil diff:nat := 0  for all cnt in set (dom s2e) do let dt = (s2e(cnt) - e2s(cnt)) in (  if (min = nil) then min := dtelse (  if (min > dt) then min := dt ); if (max = nil) then max := dtelse (  if (max < dt) then max := dt ); diff := (diff + dt) ); return (mk_(min, max, (diff / (card (dom s2e))))) ) 	pre ((card (dom s2e)) > 0) public static  IsFinished (() ==> ()) 	IsFinished() == skip private  mutex(getNum) private  per getMinMaxAverage => ((card (dom s2e)) >= max_stimuli) private  per IsFinished => (#fin[logSysToEnv] > 0) end EnvironmentTask  class InsertAddress is subclass of [EnvironmentTask] public  InsertAddress (nat ==> (unresolved InsertAddress`InsertAddress)) 	InsertAddress(pno) == max_stimuli := pno public  HandleEvent (nat ==> ()) 	HandleEvent(pev) == logSysToEnv(pev) 	post checkResponseTimes(e2s, s2e, 24000000000) public  Run (() ==> ()) 	Run() == start (self) private  createSignal (() ==> ()) 	createSignal() == ( num2:nat := getNum()  logEnvToSys(num2); RadNavSys`mmi.HandleKeyPress(2, num2) ) protected  thread periodic(2000, 100, 1000, 0)(createSignal) end InsertAddress  class MMI public async  HandleKeyPress (nat * nat ==> ()) 	HandleKeyPress(pn, pno) == (  cycles (100000.0) skip; cases pn :   1 -> RadNavSys`radio.AdjustVolume(pno)  2 -> RadNavSys`navigation.DatabaseLookup(pno) end ) public async  UpdateScreen (nat * nat ==> ()) 	UpdateScreen(pn, pno) == (  cycles (500000.0) skip; cases pn :   1 -> World`envTasks("VolumeKnob").HandleEvent(pno)  2 -> World`envTasks("InsertAddress").HandleEvent(pno)  3 -> World`envTasks("TransmitTMC").HandleEvent(pno) end ) end MMI  class Navigation public async  DatabaseLookup (nat ==> ()) 	DatabaseLookup(pno) == (  cycles (5000000.0) skip; RadNavSys`mmi.UpdateScreen(2, pno) ) public async  DecodeTMC (nat ==> ()) 	DecodeTMC(pno) == (  cycles (500000.0) skip; RadNavSys`mmi.UpdateScreen(3, pno) ) end Navigation  system RadNavSys public static  mmi:(unresolved RadNavSys`MMI) := new MMI() private  CPU1:(unresolved RadNavSys`CPU) := new CPU(<FP>, 2.2E7) public static  radio:(unresolved RadNavSys`Radio) := new Radio() private  CPU2:(unresolved RadNavSys`CPU) := new CPU(<FP>, 1.1E7) public static  navigation:(unresolved RadNavSys`Navigation) := new Navigation() private  CPU3:(unresolved RadNavSys`CPU) := new CPU(<FP>, 1.13E8) private  BUS1:(unresolved RadNavSys`BUS) := new BUS(<CSMACD>, 72000.0, {CPU1, CPU2, CPU3}) public  RadNavSys (() ==> (unresolved RadNavSys`RadNavSys)) 	RadNavSys() == (  CPU1.deploy(mmi, "MMIT"); CPU1.setPriority(MMI`HandleKeyPress, 100); CPU1.setPriority(MMI`UpdateScreen, 90); CPU2.deploy(radio, "RadioT"); CPU2.setPriority(Radio`AdjustVolume, 100); CPU3.deploy(navigation, "NavT"); CPU3.setPriority(Navigation`DatabaseLookup, 100); CPU3.setPriority(Navigation`DecodeTMC, 90) ) end RadNavSys  class Radio public async  AdjustVolume (nat ==> ()) 	AdjustVolume(pno) == (  cycles (100000.0) skip; RadNavSys`mmi.UpdateScreen(1, pno) ) public async  HandleTMC (nat ==> ()) 	HandleTMC(pno) == (  cycles (1000000.0) skip; RadNavSys`navigation.DecodeTMC(pno) ) end Radio  class Test private  mmi:(unresolved Test`MMI) := new MMI() private  radio:(unresolved Test`Radio) := new Radio() private  nav:(unresolved Test`Navigation) := new Navigation() public  [TT][[x in set {1, 2, 3}ALetBeStBindingTraceDefinition([[([[mmi.HandleKeyPress(x, x){1,1}, mmi.UpdateScreen(x, x){1,1}, radio.AdjustVolume(x){1,1}, radio.HandleTMC(x){1,1}, nav.DatabaseLookup(x){1,1}, nav.DecodeTMC(x){1,1}]]){1,1}], [EnvironmentTask`IsFinished(){1,1}]]){1,1}ALetBeStBindingTraceDefinition]] end Test  class TransmitTMC is subclass of [EnvironmentTask] public  TransmitTMC (nat ==> (unresolved TransmitTMC`TransmitTMC)) 	TransmitTMC(pno) == max_stimuli := pno public  HandleEvent (nat ==> ()) 	HandleEvent(pev) == logSysToEnv(pev) 	post checkResponseTimes(e2s, s2e, 40000000000) public  Run (() ==> ()) 	Run() == start (self) private  createSignal (() ==> ()) 	createSignal() == ( num2:nat := getNum()  logEnvToSys(num2); RadNavSys`radio.HandleTMC(num2) ) protected  thread periodic(4000, 400, 3910, 0)(createSignal) end TransmitTMC  class VolumeKnob is subclass of [EnvironmentTask] public  VolumeKnob (nat ==> (unresolved VolumeKnob`VolumeKnob)) 	VolumeKnob(pno) == max_stimuli := pno public  HandleEvent (nat ==> ()) 	HandleEvent(pev) == logSysToEnv(pev) 	post checkResponseTimes(e2s, s2e, 22000000000) public  Run (() ==> ()) 	Run() == start (self) private  createSignal (() ==> ()) 	createSignal() == ( num2:nat := getNum()  logEnvToSys(num2); RadNavSys`mmi.HandleKeyPress(1, num2) ) protected  thread periodic(1000, 50, 500, 0)(createSignal) end VolumeKnob  class World public static  perfdata = perfdata public static  envTasks:map (seq of (char)) to ((unresolved World`EnvironmentTask)) := {|->} private  addEnvironmentTask (seq of (char) * (unresolved World`EnvironmentTask) ==> ()) 	addEnvironmentTask(pnm, penv) == (  envTasks := (envTasks munion {pnm |-> penv}); penv.Run() ) public  RunScenario1 (() ==> map (seq of (char)) to ((unresolved World`perfdata))) 	RunScenario1() == (  addEnvironmentTask("VolumeKnob", new VolumeKnob(10)); addEnvironmentTask("TransmitTMC", new TransmitTMC(10)); return ({name |-> (envTasks(name).getMinMaxAverage)() | name in set (dom envTasks)}) ) public  RunScenario2 (() ==> map (seq of (char)) to ((unresolved World`perfdata))) 	RunScenario2() == (  addEnvironmentTask("InsertAddress", new InsertAddress(10)); addEnvironmentTask("TransmitTMC", new TransmitTMC(10)); return ({name |-> (envTasks(name).getMinMaxAverage)() | name in set (dom envTasks)}) ) end World   from "CarNaviRadioRT"









